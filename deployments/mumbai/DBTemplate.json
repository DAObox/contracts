{
  "address": "0xE8fF069b5f0660ECa6211Ef654401D777c8F08d3",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "agentBase",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getDAO",
      "outputs": [
        {
          "name": "aragonId",
          "type": "string"
        },
        {
          "name": "kernel",
          "type": "address"
        },
        {
          "name": "acl",
          "type": "address"
        },
        {
          "name": "agent",
          "type": "address"
        },
        {
          "name": "voting",
          "type": "address"
        },
        {
          "name": "forwarder",
          "type": "address"
        },
        {
          "name": "token",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "votingBase",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        },
        {
          "name": "_id",
          "type": "string"
        }
      ],
      "name": "newDAO",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        },
        {
          "name": "_id",
          "type": "string"
        },
        {
          "name": "_votingSettings",
          "type": "uint64[3]"
        }
      ],
      "name": "newDAO",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "votesForwarderBase",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "daoId",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_votingBase",
          "type": "address"
        },
        {
          "name": "_votesForwarderBase",
          "type": "address"
        },
        {
          "name": "_agentBase",
          "type": "address"
        },
        {
          "name": "_daoFactory",
          "type": "address"
        },
        {
          "name": "_ens",
          "type": "address"
        },
        {
          "name": "_aragonID",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "dao",
          "type": "address"
        }
      ],
      "name": "SetupDao",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "appProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "appId",
          "type": "bytes32"
        }
      ],
      "name": "InstalledApp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "dao",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "acl",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "agent",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "voting",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "votesForwarder",
          "type": "address"
        }
      ],
      "name": "CompleteDAO",
      "type": "event"
    }
  ],
  "transactionHash": "0x9a88bf03caec56163d4457b95262ad1b56377479434ecc3d56b235f1256b0f1a",
  "receipt": {
    "to": null,
    "from": "0x0533F9d586ABd3334a0E90cA162602D6574F0493",
    "contractAddress": "0xE8fF069b5f0660ECa6211Ef654401D777c8F08d3",
    "transactionIndex": 27,
    "gasUsed": "1856937",
    "logsBloom": "0x
    "blockHash": "0x2dc5e476c38b5c5835f13861fbdae4630c1b584cccc5e89be1345d3432b720c1",
    "transactionHash": "0x9a88bf03caec56163d4457b95262ad1b56377479434ecc3d56b235f1256b0f1a",
    "logs": [
      {
        "transactionIndex": 27,
        "blockNumber": 28420249,
        "transactionHash": "0x9a88bf03caec56163d4457b95262ad1b56377479434ecc3d56b235f1256b0f1a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000533f9d586abd3334a0e90ca162602d6574f0493",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000011d92bdd4938ff00000000000000000000000000000000000000000000000009566094f0925dc800000000000000000000000000000000000000000000098b085248087127424c00000000000000000000000000000000000000000000000009448769134924c900000000000000000000000000000000000000000000098b086421344e707b4b",
        "logIndex": 148,
        "blockHash": "0x2dc5e476c38b5c5835f13861fbdae4630c1b584cccc5e89be1345d3432b720c1"
      }
    ],
    "blockNumber": 28420249,
    "cumulativeGasUsed": "6317529",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1b35798D90bA88aC2131Efb5694F2118C0075dDA",
    "0x18AE4B8dB687fC2BD9266378cc6E6bf8E7e7Df8D",
    "0xCf3f2c6b03295CF2C4E6C732d5c59576C1FF8bA7",
    "0xa48e321d8ebab7ccd52503d630c894b62a2f639b",
    "0x431f0eed904590b176f9ff8c36a1c4ff0ee9b982",
    "0xb0cec6f20ea617d0cdefef6521aad99d21876ad5"
  ],
  "numDeployments": 2,
  "solcInputHash": "715002c95ee264b76bfea230df9b4146",
  "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"agentBase\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getDAO\",\"outputs\":[{\"name\":\"aragonId\",\"type\":\"string\"},{\"name\":\"kernel\",\"type\":\"address\"},{\"name\":\"acl\",\"type\":\"address\"},{\"name\":\"agent\",\"type\":\"address\"},{\"name\":\"voting\",\"type\":\"address\"},{\"name\":\"forwarder\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votingBase\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"newDAO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_votingSettings\",\"type\":\"uint64[3]\"}],\"name\":\"newDAO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votesForwarderBase\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daoId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_votingBase\",\"type\":\"address\"},{\"name\":\"_votesForwarderBase\",\"type\":\"address\"},{\"name\":\"_agentBase\",\"type\":\"address\"},{\"name\":\"_daoFactory\",\"type\":\"address\"},{\"name\":\"_ens\",\"type\":\"address\"},{\"name\":\"_aragonID\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dao\",\"type\":\"address\"}],\"name\":\"SetupDao\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"appProxy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"appId\",\"type\":\"bytes32\"}],\"name\":\"InstalledApp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dao\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"acl\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"voting\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"votesForwarder\",\"type\":\"address\"}],\"name\":\"CompleteDAO\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/DBTemplate.sol\":\"DBTemplate\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@aragon/apps-agent/contracts/Agent.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    GPL-3.0-or-later\\n */\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"./SignatureValidator.sol\\\";\\nimport \\\"./standards/IERC165.sol\\\";\\nimport \\\"./standards/ERC1271.sol\\\";\\nimport \\\"./standards/IERC721Receiver.sol\\\";\\n\\nimport \\\"@aragon/apps-vault/contracts/Vault.sol\\\";\\n\\nimport \\\"@aragon/os/contracts/common/IForwarder.sol\\\";\\n\\n\\ncontract Agent is IERC165, IERC721Receiver, ERC1271Bytes, IForwarder, IsContract, Vault {\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant EXECUTE_ROLE = keccak256(\\\"EXECUTE_ROLE\\\");\\n    bytes32 public constant SAFE_EXECUTE_ROLE = keccak256(\\\"SAFE_EXECUTE_ROLE\\\");\\n    bytes32 public constant ADD_PROTECTED_TOKEN_ROLE = keccak256(\\\"ADD_PROTECTED_TOKEN_ROLE\\\");\\n    bytes32 public constant REMOVE_PROTECTED_TOKEN_ROLE = keccak256(\\\"REMOVE_PROTECTED_TOKEN_ROLE\\\");\\n    bytes32 public constant ADD_PRESIGNED_HASH_ROLE = keccak256(\\\"ADD_PRESIGNED_HASH_ROLE\\\");\\n    bytes32 public constant DESIGNATE_SIGNER_ROLE = keccak256(\\\"DESIGNATE_SIGNER_ROLE\\\");\\n    bytes32 public constant RUN_SCRIPT_ROLE = keccak256(\\\"RUN_SCRIPT_ROLE\\\");\\n    */\\n\\n    bytes32 public constant EXECUTE_ROLE = 0xcebf517aa4440d1d125e0355aae64401211d0848a23c02cc5d29a14822580ba4;\\n    bytes32 public constant SAFE_EXECUTE_ROLE = 0x0a1ad7b87f5846153c6d5a1f761d71c7d0cfd122384f56066cd33239b7933694;\\n    bytes32 public constant ADD_PROTECTED_TOKEN_ROLE = 0x6eb2a499556bfa2872f5aa15812b956cc4a71b4d64eb3553f7073c7e41415aaa;\\n    bytes32 public constant REMOVE_PROTECTED_TOKEN_ROLE = 0x71eee93d500f6f065e38b27d242a756466a00a52a1dbcd6b4260f01a8640402a;\\n    bytes32 public constant ADD_PRESIGNED_HASH_ROLE = 0x0b29780bb523a130b3b01f231ef49ed2fa2781645591a0b0a44ca98f15a5994c;\\n    bytes32 public constant DESIGNATE_SIGNER_ROLE = 0x23ce341656c3f14df6692eebd4757791e33662b7dcf9970c8308303da5472b7c;\\n    bytes32 public constant RUN_SCRIPT_ROLE = 0xb421f7ad7646747f3051c50c0b8e2377839296cd4973e27f63821d73e390338f;\\n\\n    uint256 public constant PROTECTED_TOKENS_CAP = 10;\\n\\n    bytes4 private constant ERC165_INTERFACE_ID = 0x01ffc9a7;\\n    bytes4 private constant ERC721_RECEIVED_INTERFACE_ID = 0x150b7a02; // bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))\\n\\n    string private constant ERROR_TARGET_PROTECTED = \\\"AGENT_TARGET_PROTECTED\\\";\\n    string private constant ERROR_PROTECTED_TOKENS_MODIFIED = \\\"AGENT_PROTECTED_TOKENS_MODIFIED\\\";\\n    string private constant ERROR_PROTECTED_BALANCE_LOWERED = \\\"AGENT_PROTECTED_BALANCE_LOWERED\\\";\\n    string private constant ERROR_TOKENS_CAP_REACHED = \\\"AGENT_TOKENS_CAP_REACHED\\\";\\n    string private constant ERROR_TOKEN_NOT_ERC20 = \\\"AGENT_TOKEN_NOT_ERC20\\\";\\n    string private constant ERROR_TOKEN_ALREADY_PROTECTED = \\\"AGENT_TOKEN_ALREADY_PROTECTED\\\";\\n    string private constant ERROR_TOKEN_NOT_PROTECTED = \\\"AGENT_TOKEN_NOT_PROTECTED\\\";\\n    string private constant ERROR_DESIGNATED_TO_SELF = \\\"AGENT_DESIGNATED_TO_SELF\\\";\\n    string private constant ERROR_CAN_NOT_FORWARD = \\\"AGENT_CAN_NOT_FORWARD\\\";\\n\\n    mapping (bytes32 => bool) public isPresigned;\\n    address public designatedSigner;\\n    address[] public protectedTokens;\\n\\n    event SafeExecute(address indexed sender, address indexed target, bytes data);\\n    event Execute(address indexed sender, address indexed target, uint256 ethValue, bytes data);\\n    event AddProtectedToken(address indexed token);\\n    event RemoveProtectedToken(address indexed token);\\n    event PresignHash(address indexed sender, bytes32 indexed hash);\\n    event SetDesignatedSigner(address indexed sender, address indexed oldSigner, address indexed newSigner);\\n    event ReceiveERC721(address indexed token, address indexed operator, address indexed from, uint256 tokenId, bytes data);\\n\\n    /**\\n    * @notice Execute '`@radspec(_target, _data)`' on `_target``_ethValue == 0 ? '' : ' (Sending ' + @tokenAmount(0x0000000000000000000000000000000000000000, _ethValue) + ')'`\\n    * @param _target Address where the action is being executed\\n    * @param _ethValue Amount of ETH from the contract that is sent with the action\\n    * @param _data Calldata for the action\\n    * @return Exits call frame forwarding the return data of the executed call (either error or success data)\\n    */\\n    function execute(address _target, uint256 _ethValue, bytes _data)\\n        external // This function MUST always be external as the function performs a low level return, exiting the Agent app execution context\\n        authP(EXECUTE_ROLE, arr(_target, _ethValue, uint256(_getSig(_data)))) // bytes4 casted as uint256 sets the bytes as the LSBs\\n    {\\n        bool result = _target.call.value(_ethValue)(_data);\\n\\n        if (result) {\\n            emit Execute(msg.sender, _target, _ethValue, _data);\\n        }\\n\\n        assembly {\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, returndatasize)\\n\\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\\n            // if the call returned error data, forward it\\n            switch result case 0 { revert(ptr, returndatasize) }\\n            default { return(ptr, returndatasize) }\\n        }\\n    }\\n\\n    /**\\n    * @notice Execute '`@radspec(_target, _data)`' on `_target`, ensuring that protected tokens can't be spent\\n    * @param _target Address where the action is being executed\\n    * @param _data Calldata for the action\\n    * @return Exits call frame forwarding the return data of the executed call (either error or success data)\\n    */\\n    function safeExecute(address _target, bytes _data)\\n        external // This function MUST always be external as the function performs a low level return, exiting the Agent app execution context\\n        authP(SAFE_EXECUTE_ROLE, arr(_target, uint256(_getSig(_data)))) // bytes4 casted as uint256 sets the bytes as the LSBs\\n    {\\n        uint256 protectedTokensLength = protectedTokens.length;\\n        address[] memory protectedTokens_ = new address[](protectedTokensLength);\\n        uint256[] memory balances = new uint256[](protectedTokensLength);\\n\\n        for (uint256 i = 0; i < protectedTokensLength; i++) {\\n            address token = protectedTokens[i];\\n            require(_target != token, ERROR_TARGET_PROTECTED);\\n            // we copy the protected tokens array to check whether the storage array has been modified during the underlying call\\n            protectedTokens_[i] = token;\\n            // we copy the balances to check whether they have been modified during the underlying call\\n            balances[i] = balance(token);\\n        }\\n\\n        bool result = _target.call(_data);\\n\\n        bytes32 ptr;\\n        uint256 size;\\n        assembly {\\n            size := returndatasize\\n            ptr := mload(0x40)\\n            mstore(0x40, add(ptr, returndatasize))\\n            returndatacopy(ptr, 0, returndatasize)\\n        }\\n\\n        if (result) {\\n            // if the underlying call has succeeded, we check that the protected tokens\\n            // and their balances have not been modified and return the call's return data\\n            require(protectedTokens.length == protectedTokensLength, ERROR_PROTECTED_TOKENS_MODIFIED);\\n            for (uint256 j = 0; j < protectedTokensLength; j++) {\\n                require(protectedTokens[j] == protectedTokens_[j], ERROR_PROTECTED_TOKENS_MODIFIED);\\n                require(balance(protectedTokens[j]) >= balances[j], ERROR_PROTECTED_BALANCE_LOWERED);\\n            }\\n\\n            emit SafeExecute(msg.sender, _target, _data);\\n\\n            assembly {\\n                return(ptr, size)\\n            }\\n        } else {\\n            // if the underlying call has failed, we revert and forward returned error data\\n            assembly {\\n                revert(ptr, size)\\n            }\\n        }\\n    }\\n\\n    /**\\n    * @notice Add `_token.symbol(): string` to the list of protected tokens\\n    * @param _token Address of the token to be protected\\n    */\\n    function addProtectedToken(address _token) external authP(ADD_PROTECTED_TOKEN_ROLE, arr(_token)) {\\n        require(protectedTokens.length < PROTECTED_TOKENS_CAP, ERROR_TOKENS_CAP_REACHED);\\n        require(_isERC20(_token), ERROR_TOKEN_NOT_ERC20);\\n        require(!_tokenIsProtected(_token), ERROR_TOKEN_ALREADY_PROTECTED);\\n\\n        _addProtectedToken(_token);\\n    }\\n\\n    /**\\n    * @notice Remove `_token.symbol(): string` from the list of protected tokens\\n    * @param _token Address of the token to be unprotected\\n    */\\n    function removeProtectedToken(address _token) external authP(REMOVE_PROTECTED_TOKEN_ROLE, arr(_token)) {\\n        require(_tokenIsProtected(_token), ERROR_TOKEN_NOT_PROTECTED);\\n\\n        _removeProtectedToken(_token);\\n    }\\n\\n    /**\\n    * @notice Pre-sign hash `_hash`\\n    * @param _hash Hash that will be considered signed regardless of the signature checked with 'isValidSignature()'\\n    */\\n    function presignHash(bytes32 _hash)\\n        external\\n        authP(ADD_PRESIGNED_HASH_ROLE, arr(_hash))\\n    {\\n        isPresigned[_hash] = true;\\n\\n        emit PresignHash(msg.sender, _hash);\\n    }\\n\\n    /**\\n    * @notice Set `_designatedSigner` as the designated signer of the app, which will be able to sign messages on behalf of the app\\n    * @param _designatedSigner Address that will be able to sign messages on behalf of the app\\n    */\\n    function setDesignatedSigner(address _designatedSigner)\\n        external\\n        authP(DESIGNATE_SIGNER_ROLE, arr(_designatedSigner))\\n    {\\n        // Prevent an infinite loop by setting the app itself as its designated signer.\\n        // An undetectable loop can be created by setting a different contract as the\\n        // designated signer which calls back into `isValidSignature`.\\n        // Given that `isValidSignature` is always called with just 50k gas, the max\\n        // damage of the loop is wasting 50k gas.\\n        require(_designatedSigner != address(this), ERROR_DESIGNATED_TO_SELF);\\n\\n        address oldDesignatedSigner = designatedSigner;\\n        designatedSigner = _designatedSigner;\\n\\n        emit SetDesignatedSigner(msg.sender, oldDesignatedSigner, _designatedSigner);\\n    }\\n\\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns (bytes4) {\\n        emit ReceiveERC721(msg.sender, _operator, _from, _tokenId, _data);\\n\\n        return ERC721_RECEIVED_INTERFACE_ID;\\n    }\\n\\n    // Forwarding fns\\n\\n    /**\\n    * @notice Tells whether the Agent app is a forwarder or not\\n    * @dev IForwarder interface conformance\\n    * @return Always true\\n    */\\n    function isForwarder() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Tells whether this contract supports a given ERC-165 interface\\n     * @dev Implements conformance to ERC-165\\n     * @param _interfaceId Interface bytes to check\\n     * @return True if this contract supports the interface\\n     */\\n    function supportsInterface(bytes4 _interfaceId) external pure returns (bool) {\\n        return\\n            _interfaceId == ERC1271_INTERFACE_ID ||\\n            _interfaceId == ERC721_RECEIVED_INTERFACE_ID ||\\n            _interfaceId == ERC165_INTERFACE_ID;\\n    }\\n\\n    /**\\n    * @notice Execute the script as the Agent app\\n    * @dev IForwarder interface conformance. Forwards any token holder action.\\n    * @param _evmScript Script being executed\\n    */\\n    function forward(bytes _evmScript) public {\\n        require(canForward(msg.sender, _evmScript), ERROR_CAN_NOT_FORWARD);\\n\\n        bytes memory input = \\\"\\\"; // no input\\n        address[] memory blacklist = new address[](0); // no addr blacklist, can interact with anything\\n        runScript(_evmScript, input, blacklist);\\n        // We don't need to emit an event here as EVMScriptRunner will emit ScriptResult if successful\\n    }\\n\\n    /**\\n    * @notice Tells whether `_sender` can forward actions or not\\n    * @dev IForwarder interface conformance\\n    * @param _sender Address of the account intending to forward an action\\n    * @return True if the given address can run scripts, false otherwise\\n    */\\n    function canForward(address _sender, bytes _evmScript) public view returns (bool) {\\n        // Note that `canPerform()` implicitly does an initialization check itself\\n        return canPerform(_sender, RUN_SCRIPT_ROLE, arr(_getScriptACLParam(_evmScript)));\\n    }\\n\\n    // ERC-1271 conformance\\n\\n    /**\\n     * @notice Tells whether a signature is seen as valid by this contract through ERC-1271\\n     * @param _hash Arbitrary length data signed on the behalf of address (this)\\n     * @param _signature Signature byte array associated with _data\\n     * @return The ERC-1271 magic value if the signature is valid\\n     */\\n    function isValidSignature(bytes32 _hash, bytes _signature) public view returns (bytes4) {\\n        // Short-circuit in case the hash was presigned. Optimization as performing calls\\n        // and ecrecover is more expensive than an SLOAD.\\n        if (isPresigned[_hash]) {\\n            return returnIsValidSignatureMagicNumber(true);\\n        }\\n\\n        bool isValid;\\n        if (designatedSigner == address(0)) {\\n            isValid = false;\\n        } else {\\n            isValid = SignatureValidator.isValidSignature(_hash, designatedSigner, _signature);\\n        }\\n\\n        return returnIsValidSignatureMagicNumber(isValid);\\n    }\\n\\n    // Getters\\n\\n    function getProtectedTokensLength() public view isInitialized returns (uint256) {\\n        return protectedTokens.length;\\n    }\\n\\n    // Internal fns\\n\\n    function _addProtectedToken(address _token) internal {\\n        protectedTokens.push(_token);\\n\\n        emit AddProtectedToken(_token);\\n    }\\n\\n    function _removeProtectedToken(address _token) internal {\\n        protectedTokens[_protectedTokenIndex(_token)] = protectedTokens[protectedTokens.length - 1];\\n        protectedTokens.length--;\\n\\n        emit RemoveProtectedToken(_token);\\n    }\\n\\n    function _isERC20(address _token) internal view returns (bool) {\\n        if (!isContract(_token)) {\\n            return false;\\n        }\\n\\n        // Throwaway sanity check to make sure the token's `balanceOf()` does not error (for now)\\n        balance(_token);\\n\\n        return true;\\n    }\\n\\n    function _protectedTokenIndex(address _token) internal view returns (uint256) {\\n        for (uint i = 0; i < protectedTokens.length; i++) {\\n            if (protectedTokens[i] == _token) {\\n              return i;\\n            }\\n        }\\n\\n        revert(ERROR_TOKEN_NOT_PROTECTED);\\n    }\\n\\n    function _tokenIsProtected(address _token) internal view returns (bool) {\\n        for (uint256 i = 0; i < protectedTokens.length; i++) {\\n            if (protectedTokens[i] == _token) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function _getScriptACLParam(bytes _evmScript) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(_evmScript)));\\n    }\\n\\n    function _getSig(bytes _data) internal pure returns (bytes4 sig) {\\n        if (_data.length < 4) {\\n            return;\\n        }\\n\\n        assembly { sig := mload(add(_data, 0x20)) }\\n    }\\n}\\n\",\"keccak256\":\"0xd90f3ec7479a49011f6e35a1c1b85322e6d634f41f0d4bcb89023102abbd3203\"},\"@aragon/apps-agent/contracts/SignatureValidator.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\n// Inspired by https://github.com/horizon-games/multi-token-standard/blob/319740cf2a78b8816269ae49a09c537b3fd7303b/contracts/utils/SignatureValidator.sol\\n// This should probably be moved into aOS: https://github.com/aragon/aragonOS/pull/442\\n\\nimport \\\"./standards/ERC1271.sol\\\";\\n\\n\\nlibrary SignatureValidator {\\n    enum SignatureMode {\\n        Invalid, // 0x00\\n        EIP712,  // 0x01\\n        EthSign, // 0x02\\n        ERC1271, // 0x03\\n        NMode    // 0x04, to check if mode is specified, leave at the end\\n    }\\n\\n    // bytes4(keccak256(\\\"isValidSignature(bytes,bytes)\\\")\\n    bytes4 public constant ERC1271_RETURN_VALID_SIGNATURE = 0x20c13b0b;\\n    uint256 internal constant ERC1271_ISVALIDSIG_MAX_GAS = 250000;\\n\\n    string private constant ERROR_INVALID_LENGTH_POP_BYTE = \\\"SIGVAL_INVALID_LENGTH_POP_BYTE\\\";\\n\\n    /// @dev Validates that a hash was signed by a specified signer.\\n    /// @param hash Hash which was signed.\\n    /// @param signer Address of the signer.\\n    /// @param signature ECDSA signature along with the mode (0 = Invalid, 1 = EIP712, 2 = EthSign, 3 = ERC1271) {mode}{r}{s}{v}.\\n    /// @return Returns whether signature is from a specified user.\\n    function isValidSignature(bytes32 hash, address signer, bytes signature) internal view returns (bool) {\\n        if (signature.length == 0) {\\n            return false;\\n        }\\n\\n        uint8 modeByte = uint8(signature[0]);\\n        if (modeByte >= uint8(SignatureMode.NMode)) {\\n            return false;\\n        }\\n        SignatureMode mode = SignatureMode(modeByte);\\n\\n        if (mode == SignatureMode.EIP712) {\\n            return ecVerify(hash, signer, signature);\\n        } else if (mode == SignatureMode.EthSign) {\\n            return ecVerify(\\n                keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)),\\n                signer,\\n                signature\\n            );\\n        } else if (mode == SignatureMode.ERC1271) {\\n            // Pop the mode byte before sending it down the validation chain\\n            return safeIsValidSignature(signer, hash, popFirstByte(signature));\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function ecVerify(bytes32 hash, address signer, bytes memory signature) private pure returns (bool) {\\n        (bool badSig, bytes32 r, bytes32 s, uint8 v) = unpackEcSig(signature);\\n\\n        if (badSig) {\\n            return false;\\n        }\\n\\n        return signer == ecrecover(hash, v, r, s);\\n    }\\n\\n    function unpackEcSig(bytes memory signature) private pure returns (bool badSig, bytes32 r, bytes32 s, uint8 v) {\\n        if (signature.length != 66) {\\n            badSig = true;\\n            return;\\n        }\\n\\n        v = uint8(signature[65]);\\n        assembly {\\n            r := mload(add(signature, 33))\\n            s := mload(add(signature, 65))\\n        }\\n\\n        // Allow signature version to be 0 or 1\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            badSig = true;\\n        }\\n    }\\n\\n    function popFirstByte(bytes memory input) private pure returns (bytes memory output) {\\n        uint256 inputLength = input.length;\\n        require(inputLength > 0, ERROR_INVALID_LENGTH_POP_BYTE);\\n\\n        output = new bytes(inputLength - 1);\\n\\n        if (output.length == 0) {\\n            return output;\\n        }\\n\\n        uint256 inputPointer;\\n        uint256 outputPointer;\\n        assembly {\\n            inputPointer := add(input, 0x21)\\n            outputPointer := add(output, 0x20)\\n        }\\n        memcpy(outputPointer, inputPointer, output.length);\\n    }\\n\\n    function safeIsValidSignature(address validator, bytes32 hash, bytes memory signature) private view returns (bool) {\\n        bytes memory data = abi.encodeWithSelector(ERC1271(validator).isValidSignature.selector, hash, signature);\\n        bytes4 erc1271Return = safeBytes4StaticCall(validator, data, ERC1271_ISVALIDSIG_MAX_GAS);\\n        return erc1271Return == ERC1271_RETURN_VALID_SIGNATURE;\\n    }\\n\\n    function safeBytes4StaticCall(address target, bytes data, uint256 maxGas) private view returns (bytes4 ret) {\\n        uint256 gasLeft = gasleft();\\n\\n        uint256 callGas = gasLeft > maxGas ? maxGas : gasLeft;\\n        bool ok;\\n        assembly {\\n            ok := staticcall(callGas, target, add(data, 0x20), mload(data), 0, 0)\\n        }\\n\\n        if (!ok) {\\n            return;\\n        }\\n\\n        uint256 size;\\n        assembly { size := returndatasize }\\n        if (size != 32) {\\n            return;\\n        }\\n\\n        assembly {\\n            let ptr := mload(0x40)       // get next free memory ptr\\n            returndatacopy(ptr, 0, size) // copy return from above `staticcall`\\n            ret := mload(ptr)            // read data at ptr and set it to be returned\\n        }\\n\\n        return ret;\\n    }\\n\\n    // From: https://github.com/Arachnid/solidity-stringutils/blob/01e955c1d6/src/strings.sol\\n    function memcpy(uint256 dest, uint256 src, uint256 len) private pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8900d75cd2ac28d3290df3aa09db7d4c89e0de0ae1598ee8bef450b22731118b\"},\"@aragon/apps-agent/contracts/standards/ERC1271.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\n// ERC1271 on Feb 12th, 2019: https://github.com/ethereum/EIPs/blob/a97dc434930d0ccc4461c97d8c7a920dc585adf2/EIPS/eip-1271.md\\n// Using `isValidSignature(bytes32,bytes)` even though the standard still hasn't been modified\\n// Rationale: https://github.com/ethereum/EIPs/issues/1271#issuecomment-462719728\\n\\n\\ncontract ERC1271 {\\n    bytes4 constant public ERC1271_INTERFACE_ID = 0xfb855dc9; // this.isValidSignature.selector\\n\\n    bytes4 constant public ERC1271_RETURN_VALID_SIGNATURE =   0x20c13b0b; // TODO: Likely needs to be updated\\n    bytes4 constant public ERC1271_RETURN_INVALID_SIGNATURE = 0x00000000;\\n\\n    /**\\n    * @dev Function must be implemented by deriving contract\\n    * @param _hash Arbitrary length data signed on the behalf of address(this)\\n    * @param _signature Signature byte array associated with _data\\n    * @return A bytes4 magic value 0x20c13b0b if the signature check passes, 0x00000000 if not\\n    *\\n    * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n    * MUST allow external calls\\n    */\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) public view returns (bytes4);\\n\\n    function returnIsValidSignatureMagicNumber(bool isValid) internal pure returns (bytes4) {\\n        return isValid ? ERC1271_RETURN_VALID_SIGNATURE : ERC1271_RETURN_INVALID_SIGNATURE;\\n    }\\n}\\n\\n\\ncontract ERC1271Bytes is ERC1271 {\\n    /**\\n    * @dev Default behavior of `isValidSignature(bytes,bytes)`, can be overloaded for custom validation\\n    * @param _data Arbitrary length data signed on the behalf of address(this)\\n    * @param _signature Signature byte array associated with _data\\n    * @return A bytes4 magic value 0x20c13b0b if the signature check passes, 0x00000000 if not\\n    *\\n    * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n    * MUST allow external calls\\n    */\\n    function isValidSignature(bytes _data, bytes _signature) public view returns (bytes4) {\\n        return isValidSignature(keccak256(_data), _signature);\\n    }\\n}\\n\",\"keccak256\":\"0x0e0d434f9f3c740b8f94dab93af3b226dac4d40af885adbbe81ff2a4fd957fc1\"},\"@aragon/apps-agent/contracts/standards/IERC165.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0x54c5b6c1e72d3f1a3ad7212600f2a5ae39dc9d990b73d88e614b11dd58f8d7ce\"},\"@aragon/apps-agent/contracts/standards/IERC721Receiver.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\n\\ninterface IERC721Receiver {\\n    /**\\n     * @notice Handle the receipt of an NFT\\n     * @dev The ERC721 smart contract calls this function on the recipient\\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\\n     * otherwise the caller will revert the transaction. The selector to be\\n     * returned can be obtained as `this.onERC721Received.selector`. This\\n     * function MAY throw to revert and reject the transfer.\\n     * Note: the ERC721 contract address is always the message sender.\\n     * @param operator The address which called `safeTransferFrom` function\\n     * @param from The address which previously owned the token\\n     * @param tokenId The NFT identifier which is being transferred\\n     * @param data Additional data with no specified format\\n     * @return bytes4 `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x0f80bfb9c096d9dc68a94b93038a7de0247396b09d3b10fb7a339f336d7d2f6b\"},\"@aragon/apps-vault/contracts/Vault.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/common/DepositableStorage.sol\\\";\\nimport \\\"@aragon/os/contracts/common/EtherTokenConstant.sol\\\";\\nimport \\\"@aragon/os/contracts/common/SafeERC20.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/token/ERC20.sol\\\";\\n\\n\\ncontract Vault is EtherTokenConstant, AragonApp, DepositableStorage {\\n    using SafeERC20 for ERC20;\\n\\n    bytes32 public constant TRANSFER_ROLE = keccak256(\\\"TRANSFER_ROLE\\\");\\n\\n    string private constant ERROR_DATA_NON_ZERO = \\\"VAULT_DATA_NON_ZERO\\\";\\n    string private constant ERROR_NOT_DEPOSITABLE = \\\"VAULT_NOT_DEPOSITABLE\\\";\\n    string private constant ERROR_DEPOSIT_VALUE_ZERO = \\\"VAULT_DEPOSIT_VALUE_ZERO\\\";\\n    string private constant ERROR_TRANSFER_VALUE_ZERO = \\\"VAULT_TRANSFER_VALUE_ZERO\\\";\\n    string private constant ERROR_SEND_REVERTED = \\\"VAULT_SEND_REVERTED\\\";\\n    string private constant ERROR_VALUE_MISMATCH = \\\"VAULT_VALUE_MISMATCH\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_FROM_REVERTED = \\\"VAULT_TOKEN_TRANSFER_FROM_REVERT\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_REVERTED = \\\"VAULT_TOKEN_TRANSFER_REVERTED\\\";\\n\\n    event VaultTransfer(address indexed token, address indexed to, uint256 amount);\\n    event VaultDeposit(address indexed token, address indexed sender, uint256 amount);\\n\\n    /**\\n    * @dev On a normal send() or transfer() this fallback is never executed as it will be\\n    *      intercepted by the Proxy (see aragonOS#281)\\n    */\\n    function () external payable isInitialized {\\n        require(msg.data.length == 0, ERROR_DATA_NON_ZERO);\\n        _deposit(ETH, msg.value);\\n    }\\n\\n    /**\\n    * @notice Initialize Vault app\\n    * @dev As an AragonApp it needs to be initialized in order for roles (`auth` and `authP`) to work\\n    */\\n    function initialize() external onlyInit {\\n        initialized();\\n        setDepositable(true);\\n    }\\n\\n    /**\\n    * @notice Deposit `_value` `_token` to the vault\\n    * @param _token Address of the token being transferred\\n    * @param _value Amount of tokens being transferred\\n    */\\n    function deposit(address _token, uint256 _value) external payable isInitialized {\\n        _deposit(_token, _value);\\n    }\\n\\n    /**\\n    * @notice Transfer `_value` `_token` from the Vault to `_to`\\n    * @param _token Address of the token being transferred\\n    * @param _to Address of the recipient of tokens\\n    * @param _value Amount of tokens being transferred\\n    */\\n    /* solium-disable-next-line function-order */\\n    function transfer(address _token, address _to, uint256 _value)\\n        external\\n        authP(TRANSFER_ROLE, arr(_token, _to, _value))\\n    {\\n        require(_value > 0, ERROR_TRANSFER_VALUE_ZERO);\\n\\n        if (_token == ETH) {\\n            require(_to.send(_value), ERROR_SEND_REVERTED);\\n        } else {\\n            require(ERC20(_token).safeTransfer(_to, _value), ERROR_TOKEN_TRANSFER_REVERTED);\\n        }\\n\\n        emit VaultTransfer(_token, _to, _value);\\n    }\\n\\n    function balance(address _token) public view returns (uint256) {\\n        if (_token == ETH) {\\n            return address(this).balance;\\n        } else {\\n            return ERC20(_token).staticBalanceOf(address(this));\\n        }\\n    }\\n\\n    /**\\n    * @dev Disable recovery escape hatch, as it could be used\\n    *      maliciously to transfer funds away from the vault\\n    */\\n    function allowRecoverability(address) public view returns (bool) {\\n        return false;\\n    }\\n\\n    function _deposit(address _token, uint256 _value) internal {\\n        require(isDepositable(), ERROR_NOT_DEPOSITABLE);\\n        require(_value > 0, ERROR_DEPOSIT_VALUE_ZERO);\\n\\n        if (_token == ETH) {\\n            // Deposit is implicit in this case\\n            require(msg.value == _value, ERROR_VALUE_MISMATCH);\\n        } else {\\n            require(\\n                ERC20(_token).safeTransferFrom(msg.sender, address(this), _value),\\n                ERROR_TOKEN_TRANSFER_FROM_REVERTED\\n            );\\n        }\\n\\n        emit VaultDeposit(_token, msg.sender, _value);\\n    }\\n}\\n\",\"keccak256\":\"0x760b4fd895153fd398391df3b27474d1913d792fadec2172dd10d3686d3416e6\"},\"@aragon/id/contracts/IFIFSResolvingRegistrar.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"./ens/IPublicResolver.sol\\\";\\n\\n\\ninterface IFIFSResolvingRegistrar {\\n    function register(bytes32 _subnode, address _owner) external;\\n    function registerWithResolver(bytes32 _subnode, address _owner, IPublicResolver _resolver) public;\\n}\\n\",\"keccak256\":\"0x8814289dea9fc410164c2494929c38e289e42e69e7546833cf48b59b003d944f\"},\"@aragon/id/contracts/ens/IPublicResolver.sol\":{\"content\":\"pragma solidity ^0.4.0;\\n\\n\\ninterface IPublicResolver {\\n    function supportsInterface(bytes4 interfaceID) constant returns (bool);\\n    function addr(bytes32 node) constant returns (address ret);\\n    function setAddr(bytes32 node, address addr);\\n    function hash(bytes32 node) constant returns (bytes32 ret);\\n    function setHash(bytes32 node, bytes32 hash);\\n}\\n\",\"keccak256\":\"0xd3cfaad61764512d8becada0f59d1a9db2a7349df2610e4a77f0fbf49750af03\"},\"@aragon/os/contracts/acl/ACL.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../apps/AragonApp.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/TimeHelpers.sol\\\";\\nimport \\\"./ACLSyntaxSugar.sol\\\";\\nimport \\\"./IACL.sol\\\";\\nimport \\\"./IACLOracle.sol\\\";\\n\\n\\n/* solium-disable function-order */\\n// Allow public initialize() to be first\\ncontract ACL is IACL, TimeHelpers, AragonApp, ACLHelpers {\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant CREATE_PERMISSIONS_ROLE = keccak256(\\\"CREATE_PERMISSIONS_ROLE\\\");\\n    */\\n    bytes32 public constant CREATE_PERMISSIONS_ROLE = 0x0b719b33c83b8e5d300c521cb8b54ae9bd933996a14bef8c2f4e0285d2d2400a;\\n\\n    enum Op { NONE, EQ, NEQ, GT, LT, GTE, LTE, RET, NOT, AND, OR, XOR, IF_ELSE } // op types\\n\\n    struct Param {\\n        uint8 id;\\n        uint8 op;\\n        uint240 value; // even though value is an uint240 it can store addresses\\n        // in the case of 32 byte hashes losing 2 bytes precision isn't a huge deal\\n        // op and id take less than 1 byte each so it can be kept in 1 sstore\\n    }\\n\\n    uint8 internal constant BLOCK_NUMBER_PARAM_ID = 200;\\n    uint8 internal constant TIMESTAMP_PARAM_ID    = 201;\\n    // 202 is unused\\n    uint8 internal constant ORACLE_PARAM_ID       = 203;\\n    uint8 internal constant LOGIC_OP_PARAM_ID     = 204;\\n    uint8 internal constant PARAM_VALUE_PARAM_ID  = 205;\\n    // TODO: Add execution times param type?\\n\\n    /* Hardcoded constant to save gas\\n    bytes32 public constant EMPTY_PARAM_HASH = keccak256(uint256(0));\\n    */\\n    bytes32 public constant EMPTY_PARAM_HASH = 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563;\\n    bytes32 public constant NO_PERMISSION = bytes32(0);\\n    address public constant ANY_ENTITY = address(-1);\\n    address public constant BURN_ENTITY = address(1); // address(0) is already used as \\\"no permission manager\\\"\\n\\n    string private constant ERROR_AUTH_INIT_KERNEL = \\\"ACL_AUTH_INIT_KERNEL\\\";\\n    string private constant ERROR_AUTH_NO_MANAGER = \\\"ACL_AUTH_NO_MANAGER\\\";\\n    string private constant ERROR_EXISTENT_MANAGER = \\\"ACL_EXISTENT_MANAGER\\\";\\n\\n    // Whether someone has a permission\\n    mapping (bytes32 => bytes32) internal permissions; // permissions hash => params hash\\n    mapping (bytes32 => Param[]) internal permissionParams; // params hash => params\\n\\n    // Who is the manager of a permission\\n    mapping (bytes32 => address) internal permissionManager;\\n\\n    event SetPermission(address indexed entity, address indexed app, bytes32 indexed role, bool allowed);\\n    event SetPermissionParams(address indexed entity, address indexed app, bytes32 indexed role, bytes32 paramsHash);\\n    event ChangePermissionManager(address indexed app, bytes32 indexed role, address indexed manager);\\n\\n    modifier onlyPermissionManager(address _app, bytes32 _role) {\\n        require(msg.sender == getPermissionManager(_app, _role), ERROR_AUTH_NO_MANAGER);\\n        _;\\n    }\\n\\n    modifier noPermissionManager(address _app, bytes32 _role) {\\n        // only allow permission creation (or re-creation) when there is no manager\\n        require(getPermissionManager(_app, _role) == address(0), ERROR_EXISTENT_MANAGER);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\\n    * @notice Initialize an ACL instance and set `_permissionsCreator` as the entity that can create other permissions\\n    * @param _permissionsCreator Entity that will be given permission over createPermission\\n    */\\n    function initialize(address _permissionsCreator) public onlyInit {\\n        initialized();\\n        require(msg.sender == address(kernel()), ERROR_AUTH_INIT_KERNEL);\\n\\n        _createPermission(_permissionsCreator, this, CREATE_PERMISSIONS_ROLE, _permissionsCreator);\\n    }\\n\\n    /**\\n    * @dev Creates a permission that wasn't previously set and managed.\\n    *      If a created permission is removed it is possible to reset it with createPermission.\\n    *      This is the **ONLY** way to create permissions and set managers to permissions that don't\\n    *      have a manager.\\n    *      In terms of the ACL being initialized, this function implicitly protects all the other\\n    *      state-changing external functions, as they all require the sender to be a manager.\\n    * @notice Create a new permission granting `_entity` the ability to perform actions requiring `_role` on `_app`, setting `_manager` as the permission's manager\\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\\n    * @param _role Identifier for the group of actions in app given access to perform\\n    * @param _manager Address of the entity that will be able to grant and revoke the permission further.\\n    */\\n    function createPermission(address _entity, address _app, bytes32 _role, address _manager)\\n        external\\n        auth(CREATE_PERMISSIONS_ROLE)\\n        noPermissionManager(_app, _role)\\n    {\\n        _createPermission(_entity, _app, _role, _manager);\\n    }\\n\\n    /**\\n    * @dev Grants permission if allowed. This requires `msg.sender` to be the permission manager\\n    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`\\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\\n    * @param _role Identifier for the group of actions in app given access to perform\\n    */\\n    function grantPermission(address _entity, address _app, bytes32 _role)\\n        external\\n    {\\n        grantPermissionP(_entity, _app, _role, new uint256[](0));\\n    }\\n\\n    /**\\n    * @dev Grants a permission with parameters if allowed. This requires `msg.sender` to be the permission manager\\n    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`\\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\\n    * @param _role Identifier for the group of actions in app given access to perform\\n    * @param _params Permission parameters\\n    */\\n    function grantPermissionP(address _entity, address _app, bytes32 _role, uint256[] _params)\\n        public\\n        onlyPermissionManager(_app, _role)\\n    {\\n        bytes32 paramsHash = _params.length > 0 ? _saveParams(_params) : EMPTY_PARAM_HASH;\\n        _setPermission(_entity, _app, _role, paramsHash);\\n    }\\n\\n    /**\\n    * @dev Revokes permission if allowed. This requires `msg.sender` to be the the permission manager\\n    * @notice Revoke from `_entity` the ability to perform actions requiring `_role` on `_app`\\n    * @param _entity Address of the whitelisted entity to revoke access from\\n    * @param _app Address of the app in which the role will be revoked\\n    * @param _role Identifier for the group of actions in app being revoked\\n    */\\n    function revokePermission(address _entity, address _app, bytes32 _role)\\n        external\\n        onlyPermissionManager(_app, _role)\\n    {\\n        _setPermission(_entity, _app, _role, NO_PERMISSION);\\n    }\\n\\n    /**\\n    * @notice Set `_newManager` as the manager of `_role` in `_app`\\n    * @param _newManager Address for the new manager\\n    * @param _app Address of the app in which the permission management is being transferred\\n    * @param _role Identifier for the group of actions being transferred\\n    */\\n    function setPermissionManager(address _newManager, address _app, bytes32 _role)\\n        external\\n        onlyPermissionManager(_app, _role)\\n    {\\n        _setPermissionManager(_newManager, _app, _role);\\n    }\\n\\n    /**\\n    * @notice Remove the manager of `_role` in `_app`\\n    * @param _app Address of the app in which the permission is being unmanaged\\n    * @param _role Identifier for the group of actions being unmanaged\\n    */\\n    function removePermissionManager(address _app, bytes32 _role)\\n        external\\n        onlyPermissionManager(_app, _role)\\n    {\\n        _setPermissionManager(address(0), _app, _role);\\n    }\\n\\n    /**\\n    * @notice Burn non-existent `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\\n    * @param _app Address of the app in which the permission is being burned\\n    * @param _role Identifier for the group of actions being burned\\n    */\\n    function createBurnedPermission(address _app, bytes32 _role)\\n        external\\n        auth(CREATE_PERMISSIONS_ROLE)\\n        noPermissionManager(_app, _role)\\n    {\\n        _setPermissionManager(BURN_ENTITY, _app, _role);\\n    }\\n\\n    /**\\n    * @notice Burn `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\\n    * @param _app Address of the app in which the permission is being burned\\n    * @param _role Identifier for the group of actions being burned\\n    */\\n    function burnPermissionManager(address _app, bytes32 _role)\\n        external\\n        onlyPermissionManager(_app, _role)\\n    {\\n        _setPermissionManager(BURN_ENTITY, _app, _role);\\n    }\\n\\n    /**\\n     * @notice Get parameters for permission array length\\n     * @param _entity Address of the whitelisted entity that will be able to perform the role\\n     * @param _app Address of the app\\n     * @param _role Identifier for a group of actions in app\\n     * @return Length of the array\\n     */\\n    function getPermissionParamsLength(address _entity, address _app, bytes32 _role) external view returns (uint) {\\n        return permissionParams[permissions[permissionHash(_entity, _app, _role)]].length;\\n    }\\n\\n    /**\\n    * @notice Get parameter for permission\\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\\n    * @param _app Address of the app\\n    * @param _role Identifier for a group of actions in app\\n    * @param _index Index of parameter in the array\\n    * @return Parameter (id, op, value)\\n    */\\n    function getPermissionParam(address _entity, address _app, bytes32 _role, uint _index)\\n        external\\n        view\\n        returns (uint8, uint8, uint240)\\n    {\\n        Param storage param = permissionParams[permissions[permissionHash(_entity, _app, _role)]][_index];\\n        return (param.id, param.op, param.value);\\n    }\\n\\n    /**\\n    * @dev Get manager for permission\\n    * @param _app Address of the app\\n    * @param _role Identifier for a group of actions in app\\n    * @return address of the manager for the permission\\n    */\\n    function getPermissionManager(address _app, bytes32 _role) public view returns (address) {\\n        return permissionManager[roleHash(_app, _role)];\\n    }\\n\\n    /**\\n    * @dev Function called by apps to check ACL on kernel or to check permission statu\\n    * @param _who Sender of the original call\\n    * @param _where Address of the app\\n    * @param _where Identifier for a group of actions in app\\n    * @param _how Permission parameters\\n    * @return boolean indicating whether the ACL allows the role or not\\n    */\\n    function hasPermission(address _who, address _where, bytes32 _what, bytes memory _how) public view returns (bool) {\\n        return hasPermission(_who, _where, _what, ConversionHelpers.dangerouslyCastBytesToUintArray(_how));\\n    }\\n\\n    function hasPermission(address _who, address _where, bytes32 _what, uint256[] memory _how) public view returns (bool) {\\n        bytes32 whoParams = permissions[permissionHash(_who, _where, _what)];\\n        if (whoParams != NO_PERMISSION && evalParams(whoParams, _who, _where, _what, _how)) {\\n            return true;\\n        }\\n\\n        bytes32 anyParams = permissions[permissionHash(ANY_ENTITY, _where, _what)];\\n        if (anyParams != NO_PERMISSION && evalParams(anyParams, ANY_ENTITY, _where, _what, _how)) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function hasPermission(address _who, address _where, bytes32 _what) public view returns (bool) {\\n        uint256[] memory empty = new uint256[](0);\\n        return hasPermission(_who, _where, _what, empty);\\n    }\\n\\n    function evalParams(\\n        bytes32 _paramsHash,\\n        address _who,\\n        address _where,\\n        bytes32 _what,\\n        uint256[] _how\\n    ) public view returns (bool)\\n    {\\n        if (_paramsHash == EMPTY_PARAM_HASH) {\\n            return true;\\n        }\\n\\n        return _evalParam(_paramsHash, 0, _who, _where, _what, _how);\\n    }\\n\\n    /**\\n    * @dev Internal createPermission for access inside the kernel (on instantiation)\\n    */\\n    function _createPermission(address _entity, address _app, bytes32 _role, address _manager) internal {\\n        _setPermission(_entity, _app, _role, EMPTY_PARAM_HASH);\\n        _setPermissionManager(_manager, _app, _role);\\n    }\\n\\n    /**\\n    * @dev Internal function called to actually save the permission\\n    */\\n    function _setPermission(address _entity, address _app, bytes32 _role, bytes32 _paramsHash) internal {\\n        permissions[permissionHash(_entity, _app, _role)] = _paramsHash;\\n        bool entityHasPermission = _paramsHash != NO_PERMISSION;\\n        bool permissionHasParams = entityHasPermission && _paramsHash != EMPTY_PARAM_HASH;\\n\\n        emit SetPermission(_entity, _app, _role, entityHasPermission);\\n        if (permissionHasParams) {\\n            emit SetPermissionParams(_entity, _app, _role, _paramsHash);\\n        }\\n    }\\n\\n    function _saveParams(uint256[] _encodedParams) internal returns (bytes32) {\\n        bytes32 paramHash = keccak256(abi.encodePacked(_encodedParams));\\n        Param[] storage params = permissionParams[paramHash];\\n\\n        if (params.length == 0) { // params not saved before\\n            for (uint256 i = 0; i < _encodedParams.length; i++) {\\n                uint256 encodedParam = _encodedParams[i];\\n                Param memory param = Param(decodeParamId(encodedParam), decodeParamOp(encodedParam), uint240(encodedParam));\\n                params.push(param);\\n            }\\n        }\\n\\n        return paramHash;\\n    }\\n\\n    function _evalParam(\\n        bytes32 _paramsHash,\\n        uint32 _paramId,\\n        address _who,\\n        address _where,\\n        bytes32 _what,\\n        uint256[] _how\\n    ) internal view returns (bool)\\n    {\\n        if (_paramId >= permissionParams[_paramsHash].length) {\\n            return false; // out of bounds\\n        }\\n\\n        Param memory param = permissionParams[_paramsHash][_paramId];\\n\\n        if (param.id == LOGIC_OP_PARAM_ID) {\\n            return _evalLogic(param, _paramsHash, _who, _where, _what, _how);\\n        }\\n\\n        uint256 value;\\n        uint256 comparedTo = uint256(param.value);\\n\\n        // get value\\n        if (param.id == ORACLE_PARAM_ID) {\\n            value = checkOracle(IACLOracle(param.value), _who, _where, _what, _how) ? 1 : 0;\\n            comparedTo = 1;\\n        } else if (param.id == BLOCK_NUMBER_PARAM_ID) {\\n            value = getBlockNumber();\\n        } else if (param.id == TIMESTAMP_PARAM_ID) {\\n            value = getTimestamp();\\n        } else if (param.id == PARAM_VALUE_PARAM_ID) {\\n            value = uint256(param.value);\\n        } else {\\n            if (param.id >= _how.length) {\\n                return false;\\n            }\\n            value = uint256(uint240(_how[param.id])); // force lost precision\\n        }\\n\\n        if (Op(param.op) == Op.RET) {\\n            return uint256(value) > 0;\\n        }\\n\\n        return compare(value, Op(param.op), comparedTo);\\n    }\\n\\n    function _evalLogic(Param _param, bytes32 _paramsHash, address _who, address _where, bytes32 _what, uint256[] _how)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (Op(_param.op) == Op.IF_ELSE) {\\n            uint32 conditionParam;\\n            uint32 successParam;\\n            uint32 failureParam;\\n\\n            (conditionParam, successParam, failureParam) = decodeParamsList(uint256(_param.value));\\n            bool result = _evalParam(_paramsHash, conditionParam, _who, _where, _what, _how);\\n\\n            return _evalParam(_paramsHash, result ? successParam : failureParam, _who, _where, _what, _how);\\n        }\\n\\n        uint32 param1;\\n        uint32 param2;\\n\\n        (param1, param2,) = decodeParamsList(uint256(_param.value));\\n        bool r1 = _evalParam(_paramsHash, param1, _who, _where, _what, _how);\\n\\n        if (Op(_param.op) == Op.NOT) {\\n            return !r1;\\n        }\\n\\n        if (r1 && Op(_param.op) == Op.OR) {\\n            return true;\\n        }\\n\\n        if (!r1 && Op(_param.op) == Op.AND) {\\n            return false;\\n        }\\n\\n        bool r2 = _evalParam(_paramsHash, param2, _who, _where, _what, _how);\\n\\n        if (Op(_param.op) == Op.XOR) {\\n            return r1 != r2;\\n        }\\n\\n        return r2; // both or and and depend on result of r2 after checks\\n    }\\n\\n    function compare(uint256 _a, Op _op, uint256 _b) internal pure returns (bool) {\\n        if (_op == Op.EQ)  return _a == _b;                              // solium-disable-line lbrace\\n        if (_op == Op.NEQ) return _a != _b;                              // solium-disable-line lbrace\\n        if (_op == Op.GT)  return _a > _b;                               // solium-disable-line lbrace\\n        if (_op == Op.LT)  return _a < _b;                               // solium-disable-line lbrace\\n        if (_op == Op.GTE) return _a >= _b;                              // solium-disable-line lbrace\\n        if (_op == Op.LTE) return _a <= _b;                              // solium-disable-line lbrace\\n        return false;\\n    }\\n\\n    function checkOracle(IACLOracle _oracleAddr, address _who, address _where, bytes32 _what, uint256[] _how) internal view returns (bool) {\\n        bytes4 sig = _oracleAddr.canPerform.selector;\\n\\n        // a raw call is required so we can return false if the call reverts, rather than reverting\\n        bytes memory checkCalldata = abi.encodeWithSelector(sig, _who, _where, _what, _how);\\n\\n        bool ok;\\n        assembly {\\n            // send all available gas; if the oracle eats up all the gas, we will eventually revert\\n            // note that we are currently guaranteed to still have some gas after the call from\\n            // EIP-150's 63/64 gas forward rule\\n            ok := staticcall(gas, _oracleAddr, add(checkCalldata, 0x20), mload(checkCalldata), 0, 0)\\n        }\\n\\n        if (!ok) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := returndatasize }\\n        if (size != 32) {\\n            return false;\\n        }\\n\\n        bool result;\\n        assembly {\\n            let ptr := mload(0x40)       // get next free memory ptr\\n            returndatacopy(ptr, 0, size) // copy return from above `staticcall`\\n            result := mload(ptr)         // read data at ptr and set it to result\\n            mstore(ptr, 0)               // set pointer memory to 0 so it still is the next free ptr\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n    * @dev Internal function that sets management\\n    */\\n    function _setPermissionManager(address _newManager, address _app, bytes32 _role) internal {\\n        permissionManager[roleHash(_app, _role)] = _newManager;\\n        emit ChangePermissionManager(_app, _role, _newManager);\\n    }\\n\\n    function roleHash(address _where, bytes32 _what) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"ROLE\\\", _where, _what));\\n    }\\n\\n    function permissionHash(address _who, address _where, bytes32 _what) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"PERMISSION\\\", _who, _where, _what));\\n    }\\n}\\n\",\"keccak256\":\"0x1c850377b65614983bda130233257eab46f6de300d33c585c3c90af962fb535f\"},\"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[]) {\\n        return new uint256[](0);\\n    }\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c, _d);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\",\"keccak256\":\"0x672a96975fc17f66905e775645cc93249426ce9601aef597a13d1e449c7f89d0\"},\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0x7e081f42891bbcc8fa9f3a67efb34ecafa8e2c075e37a01d74d221c45ddfdd10\"},\"@aragon/os/contracts/acl/IACLOracle.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IACLOracle {\\n    function canPerform(address who, address where, bytes32 what, uint256[] how) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x76b78ed68eafa0e3c9a4a9e4151f136f13dbcca0ac65cc43501db7b6a1189867\"},\"@aragon/os/contracts/apm/APMNamehash.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract APMNamehash {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant APM_NODE = keccak256(abi.encodePacked(ETH_TLD_NODE, keccak256(abi.encodePacked(\\\"aragonpm\\\"))));\\n    */\\n    bytes32 internal constant APM_NODE = 0x9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba;\\n\\n    function apmNamehash(string name) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(APM_NODE, keccak256(bytes(name))));\\n    }\\n}\\n\",\"keccak256\":\"0x8af7350d0193d35069b3d64c276ea446b0ed1503c57bfcd828a1fd92cb7257a8\"},\"@aragon/os/contracts/apm/Repo.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../apps/AragonApp.sol\\\";\\n\\n\\n/* solium-disable function-order */\\n// Allow public initialize() to be first\\ncontract Repo is AragonApp {\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant CREATE_VERSION_ROLE = keccak256(\\\"CREATE_VERSION_ROLE\\\");\\n    */\\n    bytes32 public constant CREATE_VERSION_ROLE = 0x1f56cfecd3595a2e6cc1a7e6cb0b20df84cdbd92eff2fee554e70e4e45a9a7d8;\\n\\n    string private constant ERROR_INVALID_BUMP = \\\"REPO_INVALID_BUMP\\\";\\n    string private constant ERROR_INVALID_VERSION = \\\"REPO_INVALID_VERSION\\\";\\n    string private constant ERROR_INEXISTENT_VERSION = \\\"REPO_INEXISTENT_VERSION\\\";\\n\\n    struct Version {\\n        uint16[3] semanticVersion;\\n        address contractAddress;\\n        bytes contentURI;\\n    }\\n\\n    uint256 internal versionsNextIndex;\\n    mapping (uint256 => Version) internal versions;\\n    mapping (bytes32 => uint256) internal versionIdForSemantic;\\n    mapping (address => uint256) internal latestVersionIdForContract;\\n\\n    event NewVersion(uint256 versionId, uint16[3] semanticVersion);\\n\\n    /**\\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\\n    * @notice Initialize this Repo\\n    */\\n    function initialize() public onlyInit {\\n        initialized();\\n        versionsNextIndex = 1;\\n    }\\n\\n    /**\\n    * @notice Create new version with contract `_contractAddress` and content `@fromHex(_contentURI)`\\n    * @param _newSemanticVersion Semantic version for new repo version\\n    * @param _contractAddress address for smart contract logic for version (if set to 0, it uses last versions' contractAddress)\\n    * @param _contentURI External URI for fetching new version's content\\n    */\\n    function newVersion(\\n        uint16[3] _newSemanticVersion,\\n        address _contractAddress,\\n        bytes _contentURI\\n    ) public auth(CREATE_VERSION_ROLE)\\n    {\\n        address contractAddress = _contractAddress;\\n        uint256 lastVersionIndex = versionsNextIndex - 1;\\n\\n        uint16[3] memory lastSematicVersion;\\n\\n        if (lastVersionIndex > 0) {\\n            Version storage lastVersion = versions[lastVersionIndex];\\n            lastSematicVersion = lastVersion.semanticVersion;\\n\\n            if (contractAddress == address(0)) {\\n                contractAddress = lastVersion.contractAddress;\\n            }\\n            // Only allows smart contract change on major version bumps\\n            require(\\n                lastVersion.contractAddress == contractAddress || _newSemanticVersion[0] > lastVersion.semanticVersion[0],\\n                ERROR_INVALID_VERSION\\n            );\\n        }\\n\\n        require(isValidBump(lastSematicVersion, _newSemanticVersion), ERROR_INVALID_BUMP);\\n\\n        uint256 versionId = versionsNextIndex++;\\n        versions[versionId] = Version(_newSemanticVersion, contractAddress, _contentURI);\\n        versionIdForSemantic[semanticVersionHash(_newSemanticVersion)] = versionId;\\n        latestVersionIdForContract[contractAddress] = versionId;\\n\\n        emit NewVersion(versionId, _newSemanticVersion);\\n    }\\n\\n    function getLatest() public view returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI) {\\n        return getByVersionId(versionsNextIndex - 1);\\n    }\\n\\n    function getLatestForContractAddress(address _contractAddress)\\n        public\\n        view\\n        returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI)\\n    {\\n        return getByVersionId(latestVersionIdForContract[_contractAddress]);\\n    }\\n\\n    function getBySemanticVersion(uint16[3] _semanticVersion)\\n        public\\n        view\\n        returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI)\\n    {\\n        return getByVersionId(versionIdForSemantic[semanticVersionHash(_semanticVersion)]);\\n    }\\n\\n    function getByVersionId(uint _versionId) public view returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI) {\\n        require(_versionId > 0 && _versionId < versionsNextIndex, ERROR_INEXISTENT_VERSION);\\n        Version storage version = versions[_versionId];\\n        return (version.semanticVersion, version.contractAddress, version.contentURI);\\n    }\\n\\n    function getVersionsCount() public view returns (uint256) {\\n        return versionsNextIndex - 1;\\n    }\\n\\n    function isValidBump(uint16[3] _oldVersion, uint16[3] _newVersion) public pure returns (bool) {\\n        bool hasBumped;\\n        uint i = 0;\\n        while (i < 3) {\\n            if (hasBumped) {\\n                if (_newVersion[i] != 0) {\\n                    return false;\\n                }\\n            } else if (_newVersion[i] != _oldVersion[i]) {\\n                if (_oldVersion[i] > _newVersion[i] || _newVersion[i] - _oldVersion[i] != 1) {\\n                    return false;\\n                }\\n                hasBumped = true;\\n            }\\n            i++;\\n        }\\n        return hasBumped;\\n    }\\n\\n    function semanticVersionHash(uint16[3] version) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(version[0], version[1], version[2]));\\n    }\\n}\\n\",\"keccak256\":\"0x4df44671f92e5410aa0fca7f515b562784a8da63e21e8872fdf275835d5c2dd1\"},\"@aragon/os/contracts/apps/AppProxyBase.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../common/DepositableDelegateProxy.sol\\\";\\nimport \\\"../kernel/KernelConstants.sol\\\";\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppProxyBase is AppStorage, DepositableDelegateProxy, KernelNamespaceConstants {\\n    /**\\n    * @dev Initialize AppProxy\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public {\\n        setKernel(_kernel);\\n        setAppId(_appId);\\n\\n        // Implicit check that kernel is actually a Kernel\\n        // The EVM doesn't actually provide a way for us to make sure, but we can force a revert to\\n        // occur if the kernel is set to 0x0 or a non-code address when we try to call a method on\\n        // it.\\n        address appCode = getAppBase(_appId);\\n\\n        // If initialize payload is provided, it will be executed\\n        if (_initializePayload.length > 0) {\\n            require(isContract(appCode));\\n            // Cannot make delegatecall as a delegateproxy.delegatedFwd as it\\n            // returns ending execution context and halts contract deployment\\n            require(appCode.delegatecall(_initializePayload));\\n        }\\n    }\\n\\n    function getAppBase(bytes32 _appId) internal view returns (address) {\\n        return kernel().getApp(KERNEL_APP_BASES_NAMESPACE, _appId);\\n    }\\n}\\n\",\"keccak256\":\"0x6d591412d30dc3d5079f8c5cab04f83ad44be376a9e4143d4a3b2067cd7a4483\"},\"@aragon/os/contracts/apps/AppProxyPinned.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\nimport \\\"../common/IsContract.sol\\\";\\nimport \\\"./AppProxyBase.sol\\\";\\n\\n\\ncontract AppProxyPinned is IsContract, AppProxyBase {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.appStorage.pinnedCode\\\")\\n    bytes32 internal constant PINNED_CODE_POSITION = 0xdee64df20d65e53d7f51cb6ab6d921a0a6a638a91e942e1d8d02df28e31c038e;\\n\\n    /**\\n    * @dev Initialize AppProxyPinned (makes it an un-upgradeable Aragon app)\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\\n        AppProxyBase(_kernel, _appId, _initializePayload)\\n        public // solium-disable-line visibility-first\\n    {\\n        setPinnedCode(getAppBase(_appId));\\n        require(isContract(pinnedCode()));\\n    }\\n\\n    /**\\n     * @dev ERC897, the address the proxy would delegate calls to\\n     */\\n    function implementation() public view returns (address) {\\n        return pinnedCode();\\n    }\\n\\n    /**\\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\\n     */\\n    function proxyType() public pure returns (uint256 proxyTypeId) {\\n        return FORWARDING;\\n    }\\n\\n    function setPinnedCode(address _pinnedCode) internal {\\n        PINNED_CODE_POSITION.setStorageAddress(_pinnedCode);\\n    }\\n\\n    function pinnedCode() internal view returns (address) {\\n        return PINNED_CODE_POSITION.getStorageAddress();\\n    }\\n}\\n\",\"keccak256\":\"0xbe6285bcc237c696e297948be02cfad8d48812ba52d67f8947b52c0546da53b1\"},\"@aragon/os/contracts/apps/AppProxyUpgradeable.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"./AppProxyBase.sol\\\";\\n\\n\\ncontract AppProxyUpgradeable is AppProxyBase {\\n    /**\\n    * @dev Initialize AppProxyUpgradeable (makes it an upgradeable Aragon app)\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\\n        AppProxyBase(_kernel, _appId, _initializePayload)\\n        public // solium-disable-line visibility-first\\n    {\\n        // solium-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev ERC897, the address the proxy would delegate calls to\\n     */\\n    function implementation() public view returns (address) {\\n        return getAppBase(appId());\\n    }\\n\\n    /**\\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\\n     */\\n    function proxyType() public pure returns (uint256 proxyTypeId) {\\n        return UPGRADEABLE;\\n    }\\n}\\n\",\"keccak256\":\"0xbcc626f70099c7e859b9c2bb8ca91e72b84f9e6783f91277e40737d51bd2c433\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_POSITION = keccak256(\\\"aragonOS.appStorage.kernel\\\");\\n    bytes32 internal constant APP_ID_POSITION = keccak256(\\\"aragonOS.appStorage.appId\\\");\\n    */\\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\\n\\n    function kernel() public view returns (IKernel) {\\n        return IKernel(KERNEL_POSITION.getStorageAddress());\\n    }\\n\\n    function appId() public view returns (bytes32) {\\n        return APP_ID_POSITION.getStorageBytes32();\\n    }\\n\\n    function setKernel(IKernel _kernel) internal {\\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\\n    }\\n\\n    function setAppId(bytes32 _appId) internal {\\n        APP_ID_POSITION.setStorageBytes32(_appId);\\n    }\\n}\\n\",\"keccak256\":\"0x37324058906601970b1ef5cbe8f2af93144d3b723c2a33e468142cdc753c829b\"},\"@aragon/os/contracts/apps/AragonApp.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\nimport \\\"../common/Autopetrified.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/ReentrancyGuard.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../evmscript/EVMScriptRunner.sol\\\";\\n\\n\\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\\n// that they can never be initialized.\\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\\n// are included so that they are automatically usable by subclassing contracts\\ncontract AragonApp is AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\\n    string private constant ERROR_AUTH_FAILED = \\\"APP_AUTH_FAILED\\\";\\n\\n    modifier auth(bytes32 _role) {\\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    modifier authP(bytes32 _role, uint256[] _params) {\\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\\n    * @param _sender Sender of the call\\n    * @param _role Role on this app\\n    * @param _params Permission params for the role\\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\\n    *         Always returns false if the app hasn't been initialized yet.\\n    */\\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\\n        if (!hasInitialized()) {\\n            return false;\\n        }\\n\\n        IKernel linkedKernel = kernel();\\n        if (address(linkedKernel) == address(0)) {\\n            return false;\\n        }\\n\\n        return linkedKernel.hasPermission(\\n            _sender,\\n            address(this),\\n            _role,\\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\\n        );\\n    }\\n\\n    /**\\n    * @dev Get the recovery vault for the app\\n    * @return Recovery vault address for the app\\n    */\\n    function getRecoveryVault() public view returns (address) {\\n        // Funds recovery via a vault is only available when used with a kernel\\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\\n    }\\n}\\n\",\"keccak256\":\"0x342fa7437cb3e80ea702209cc90787b27d21a7d4bf101e313534c9da2a2f7875\"},\"@aragon/os/contracts/common/Autopetrified.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Petrifiable.sol\\\";\\n\\n\\ncontract Autopetrified is Petrifiable {\\n    constructor() public {\\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\\n        // This renders them uninitializable (and unusable without a proxy).\\n        petrify();\\n    }\\n}\\n\",\"keccak256\":\"0x42f0422744e13674e38bfbef079af7150883aba96ddbe61c5ae50df31d42696e\"},\"@aragon/os/contracts/common/ConversionHelpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary ConversionHelpers {\\n    string private constant ERROR_IMPROPER_LENGTH = \\\"CONVERSION_IMPROPER_LENGTH\\\";\\n\\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\\n        // Force cast the uint256[] into a bytes array, by overwriting its length\\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 byteLength = _input.length * 32;\\n        assembly {\\n            output := _input\\n            mstore(output, byteLength)\\n        }\\n    }\\n\\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\\n        // Force cast the bytes array into a uint256[], by overwriting its length\\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 intsLength = _input.length / 32;\\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\\n\\n        assembly {\\n            output := _input\\n            mstore(output, intsLength)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9872383d458352f5c68fa5afd1fc84ab6b172cbee33359cfa57655b8eda92416\"},\"@aragon/os/contracts/common/DelegateProxy.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../common/IsContract.sol\\\";\\nimport \\\"../lib/misc/ERCProxy.sol\\\";\\n\\n\\ncontract DelegateProxy is ERCProxy, IsContract {\\n    uint256 internal constant FWD_GAS_LIMIT = 10000;\\n\\n    /**\\n    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\\n    * @param _dst Destination address to perform the delegatecall\\n    * @param _calldata Calldata for the delegatecall\\n    */\\n    function delegatedFwd(address _dst, bytes _calldata) internal {\\n        require(isContract(_dst));\\n        uint256 fwdGasLimit = FWD_GAS_LIMIT;\\n\\n        assembly {\\n            let result := delegatecall(sub(gas, fwdGasLimit), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\\n            let size := returndatasize\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, size)\\n\\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\\n            // if the call returned error data, forward it\\n            switch result case 0 { revert(ptr, size) }\\n            default { return(ptr, size) }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x381a4ab9b57abf496b337146a52d533aaf6a8247941fbc19735cbde0e891e85b\"},\"@aragon/os/contracts/common/DepositableDelegateProxy.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"./DelegateProxy.sol\\\";\\nimport \\\"./DepositableStorage.sol\\\";\\n\\n\\ncontract DepositableDelegateProxy is DepositableStorage, DelegateProxy {\\n    event ProxyDeposit(address sender, uint256 value);\\n\\n    function () external payable {\\n        uint256 forwardGasThreshold = FWD_GAS_LIMIT;\\n        bytes32 isDepositablePosition = DEPOSITABLE_POSITION;\\n\\n        // Optimized assembly implementation to prevent EIP-1884 from breaking deposits, reference code in Solidity:\\n        // https://github.com/aragon/aragonOS/blob/v4.2.1/contracts/common/DepositableDelegateProxy.sol#L10-L20\\n        assembly {\\n            // Continue only if the gas left is lower than the threshold for forwarding to the implementation code,\\n            // otherwise continue outside of the assembly block.\\n            if lt(gas, forwardGasThreshold) {\\n                // Only accept the deposit and emit an event if all of the following are true:\\n                // the proxy accepts deposits (isDepositable), msg.data.length == 0, and msg.value > 0\\n                if and(and(sload(isDepositablePosition), iszero(calldatasize)), gt(callvalue, 0)) {\\n                    // Equivalent Solidity code for emitting the event:\\n                    // emit ProxyDeposit(msg.sender, msg.value);\\n\\n                    let logData := mload(0x40) // free memory pointer\\n                    mstore(logData, caller) // add 'msg.sender' to the log data (first event param)\\n                    mstore(add(logData, 0x20), callvalue) // add 'msg.value' to the log data (second event param)\\n\\n                    // Emit an event with one topic to identify the event: keccak256('ProxyDeposit(address,uint256)') = 0x15ee...dee1\\n                    log1(logData, 0x40, 0x15eeaa57c7bd188c1388020bcadc2c436ec60d647d36ef5b9eb3c742217ddee1)\\n\\n                    stop() // Stop. Exits execution context\\n                }\\n\\n                // If any of above checks failed, revert the execution (if ETH was sent, it is returned to the sender)\\n                revert(0, 0)\\n            }\\n        }\\n\\n        address target = implementation();\\n        delegatedFwd(target, msg.data);\\n    }\\n}\\n\",\"keccak256\":\"0x80a08f88ca7051a248c6fd91283fef4b01b241d1dc97e13499f1460093ff3068\"},\"@aragon/os/contracts/common/DepositableStorage.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"./UnstructuredStorage.sol\\\";\\n\\n\\ncontract DepositableStorage {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.depositableStorage.depositable\\\")\\n    bytes32 internal constant DEPOSITABLE_POSITION = 0x665fd576fbbe6f247aff98f5c94a561e3f71ec2d3c988d56f12d342396c50cea;\\n\\n    function isDepositable() public view returns (bool) {\\n        return DEPOSITABLE_POSITION.getStorageBool();\\n    }\\n\\n    function setDepositable(bool _depositable) internal {\\n        DEPOSITABLE_POSITION.setStorageBool(_depositable);\\n    }\\n}\\n\",\"keccak256\":\"0x67e1884ba4c91de1c6fe1fc2c1c632c29ed3e7894a434c049be9f1ed80539237\"},\"@aragon/os/contracts/common/EtherTokenConstant.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address internal constant ETH = address(0);\\n}\\n\",\"keccak256\":\"0x6b2fa091968161075154a77fa741a3484c891d73cd3cd14ede502ff56dd08dfc\"},\"@aragon/os/contracts/common/IForwarder.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IForwarder {\\n    function isForwarder() external pure returns (bool);\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function canForward(address sender, bytes evmCallScript) public view returns (bool);\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function forward(bytes evmCallScript) public;\\n}\\n\",\"keccak256\":\"0x3dcf53bc3021c65b14d5af9f681b4bed524dd1c70a7d39add82166a94981f297\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IVaultRecoverable {\\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\\n\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) external view returns (bool);\\n    function getRecoveryVault() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa8e004decf086e817a864b485473b687c2c468c82af7b5011d9908586f7cbf36\"},\"@aragon/os/contracts/common/Initializable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./TimeHelpers.sol\\\";\\nimport \\\"./UnstructuredStorage.sol\\\";\\n\\n\\ncontract Initializable is TimeHelpers {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.initializable.initializationBlock\\\")\\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\\n\\n    string private constant ERROR_ALREADY_INITIALIZED = \\\"INIT_ALREADY_INITIALIZED\\\";\\n    string private constant ERROR_NOT_INITIALIZED = \\\"INIT_NOT_INITIALIZED\\\";\\n\\n    modifier onlyInit {\\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n    * @return Whether the contract has been initialized by the time of the current block\\n    */\\n    function hasInitialized() public view returns (bool) {\\n        uint256 initializationBlock = getInitializationBlock();\\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization to enable the contract\\n    *      at a future block number rather than immediately.\\n    */\\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xc859366d3143499d1458ea55cb5374ae1ca1faf41763cad5e051dea2da373ba1\"},\"@aragon/os/contracts/common/IsContract.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract IsContract {\\n    /*\\n    * NOTE: this should NEVER be used for authentication\\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\\n    *\\n    * This is only intended to be used as a sanity check that an address is actually a contract,\\n    * RATHER THAN an address not being a contract.\\n    */\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x9dd99d770a5eed901ba749e1f02e4fae443e71e899f4909f56825dfc378da089\"},\"@aragon/os/contracts/common/Petrifiable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\n\\ncontract Petrifiable is Initializable {\\n    // Use block UINT256_MAX (which should be never) as the initializable date\\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\\n\\n    function isPetrified() public view returns (bool) {\\n        return getInitializationBlock() == PETRIFIED_BLOCK;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract to prevent being initialized.\\n    *      Useful for freezing base contracts when they're used behind proxies.\\n    */\\n    function petrify() internal onlyInit {\\n        initializedAt(PETRIFIED_BLOCK);\\n    }\\n}\\n\",\"keccak256\":\"0x797d3a58b782032f6afc51725326c0b51dceb00f3af6b85b25bd91cc10d22504\"},\"@aragon/os/contracts/common/ReentrancyGuard.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\n\\n\\ncontract ReentrancyGuard {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\\\"aragonOS.reentrancyGuard.mutex\\\");\\n    */\\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\\n\\n    string private constant ERROR_REENTRANT = \\\"REENTRANCY_REENTRANT_CALL\\\";\\n\\n    modifier nonReentrant() {\\n        // Ensure mutex is unlocked\\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\\n\\n        // Lock mutex before function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\\n\\n        // Perform function call\\n        _;\\n\\n        // Unlock mutex after function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\\n    }\\n}\\n\",\"keccak256\":\"0xd89653c118bbd8cace423c45daa37986c566672198a415254011c028d1831189\"},\"@aragon/os/contracts/common/SafeERC20.sol\":{\"content\":\"// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\n\\n\\nlibrary SafeERC20 {\\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\\n    // https://github.com/ethereum/solidity/issues/3544\\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\\n\\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \\\"SAFE_ERC_20_BALANCE_REVERTED\\\";\\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \\\"SAFE_ERC_20_ALLOWANCE_REVERTED\\\";\\n\\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\\n        private\\n        returns (bool)\\n    {\\n        bool ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            let success := call(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                0,                    // no value\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                // Check number of bytes returned from last function call\\n                switch returndatasize\\n\\n                // No bytes returned: assume success\\n                case 0 {\\n                    ret := 1\\n                }\\n\\n                // 32 bytes returned: check if non-zero\\n                case 0x20 {\\n                    // Only return success if returned data was true\\n                    // Already have output in ptr\\n                    ret := eq(mload(ptr), 1)\\n                }\\n\\n                // Not sure what was returned: don't mark as success\\n                default { }\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    function staticInvoke(address _addr, bytes memory _calldata)\\n        private\\n        view\\n        returns (bool, uint256)\\n    {\\n        bool success;\\n        uint256 ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            success := staticcall(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                ret := mload(ptr)\\n            }\\n        }\\n        return (success, ret);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferCallData = abi.encodeWithSelector(\\n            TRANSFER_SELECTOR,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferFromCallData = abi.encodeWithSelector(\\n            _token.transferFrom.selector,\\n            _from,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferFromCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\\n        bytes memory approveCallData = abi.encodeWithSelector(\\n            _token.approve.selector,\\n            _spender,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, approveCallData);\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.balanceOf().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\\n            _token.balanceOf.selector,\\n            _owner\\n        );\\n\\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\\n\\n        return tokenBalance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.allowance().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\\n        bytes memory allowanceCallData = abi.encodeWithSelector(\\n            _token.allowance.selector,\\n            _owner,\\n            _spender\\n        );\\n\\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return allowance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.totalSupply().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticTotalSupply(ERC20 _token) internal view returns (uint256) {\\n        bytes memory totalSupplyCallData = abi.encodeWithSelector(_token.totalSupply.selector);\\n\\n        (bool success, uint256 totalSupply) = staticInvoke(_token, totalSupplyCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return totalSupply;\\n    }\\n}\\n\",\"keccak256\":\"0xd251a1207e1faa4c41500bf927310bb739b1fbc0bf880f236f8e0a9236d6a03a\"},\"@aragon/os/contracts/common/TimeHelpers.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Uint256Helpers.sol\\\";\\n\\n\\ncontract TimeHelpers {\\n    using Uint256Helpers for uint256;\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n    * @dev Returns the current block number, converted to uint64.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber64() internal view returns (uint64) {\\n        return getBlockNumber().toUint64();\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp() internal view returns (uint256) {\\n        return block.timestamp; // solium-disable-line security/no-block-members\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp, converted to uint64.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp64() internal view returns (uint64) {\\n        return getTimestamp().toUint64();\\n    }\\n}\\n\",\"keccak256\":\"0xfaba85207f0bb4bb5d7b6685a963c39a3258641bda6e523175640c3f9aeb2045\"},\"@aragon/os/contracts/common/Uint256Helpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary Uint256Helpers {\\n    uint256 private constant MAX_UINT64 = uint64(-1);\\n\\n    string private constant ERROR_NUMBER_TOO_BIG = \\\"UINT64_NUMBER_TOO_BIG\\\";\\n\\n    function toUint64(uint256 a) internal pure returns (uint64) {\\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\\n        return uint64(a);\\n    }\\n}\\n\",\"keccak256\":\"0x83033025a3f4402be3b7bcc9a23ce96ae4fadc7f251da8f139d73a13a3400b0c\"},\"@aragon/os/contracts/common/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n}\\n\",\"keccak256\":\"0xe497dcb85bbbf10224623247f39a4aeed7d3b230de2a811f3b69cb0e7d0a64d4\"},\"@aragon/os/contracts/common/VaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\nimport \\\"./EtherTokenConstant.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\nimport \\\"./IVaultRecoverable.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\n\\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\\n    using SafeERC20 for ERC20;\\n\\n    string private constant ERROR_DISALLOWED = \\\"RECOVER_DISALLOWED\\\";\\n    string private constant ERROR_VAULT_NOT_CONTRACT = \\\"RECOVER_VAULT_NOT_CONTRACT\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \\\"RECOVER_TOKEN_TRANSFER_FAILED\\\";\\n\\n    /**\\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\\n     *         but in case it does, this function allows one to recover them.\\n     * @param _token Token balance to be sent to recovery vault.\\n     */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\\n        address vault = getRecoveryVault();\\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\\n\\n        uint256 balance;\\n        if (_token == ETH) {\\n            balance = address(this).balance;\\n            vault.transfer(balance);\\n        } else {\\n            ERC20 token = ERC20(_token);\\n            balance = token.staticBalanceOf(this);\\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\\n        }\\n\\n        emit RecoverToVault(vault, _token, balance);\\n    }\\n\\n    /**\\n    * @dev By default deriving from AragonApp makes it recoverable\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return true;\\n    }\\n\\n    // Cast non-implemented interface to be public so we can use it internally\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0xea4ded621a63f988b83ac27b4a23cad0a42c3d77bcf6ca7b88681ae4ea650cf4\"},\"@aragon/os/contracts/evmscript/EVMScriptRegistry.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../apps/AragonApp.sol\\\";\\nimport \\\"./ScriptHelpers.sol\\\";\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\n\\n/* solium-disable function-order */\\n// Allow public initialize() to be first\\ncontract EVMScriptRegistry is IEVMScriptRegistry, EVMScriptRegistryConstants, AragonApp {\\n    using ScriptHelpers for bytes;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant REGISTRY_ADD_EXECUTOR_ROLE = keccak256(\\\"REGISTRY_ADD_EXECUTOR_ROLE\\\");\\n    bytes32 public constant REGISTRY_MANAGER_ROLE = keccak256(\\\"REGISTRY_MANAGER_ROLE\\\");\\n    */\\n    bytes32 public constant REGISTRY_ADD_EXECUTOR_ROLE = 0xc4e90f38eea8c4212a009ca7b8947943ba4d4a58d19b683417f65291d1cd9ed2;\\n    // WARN: Manager can censor all votes and the like happening in an org\\n    bytes32 public constant REGISTRY_MANAGER_ROLE = 0xf7a450ef335e1892cb42c8ca72e7242359d7711924b75db5717410da3f614aa3;\\n\\n    uint256 internal constant SCRIPT_START_LOCATION = 4;\\n\\n    string private constant ERROR_INEXISTENT_EXECUTOR = \\\"EVMREG_INEXISTENT_EXECUTOR\\\";\\n    string private constant ERROR_EXECUTOR_ENABLED = \\\"EVMREG_EXECUTOR_ENABLED\\\";\\n    string private constant ERROR_EXECUTOR_DISABLED = \\\"EVMREG_EXECUTOR_DISABLED\\\";\\n    string private constant ERROR_SCRIPT_LENGTH_TOO_SHORT = \\\"EVMREG_SCRIPT_LENGTH_TOO_SHORT\\\";\\n\\n    struct ExecutorEntry {\\n        IEVMScriptExecutor executor;\\n        bool enabled;\\n    }\\n\\n    uint256 private executorsNextIndex;\\n    mapping (uint256 => ExecutorEntry) public executors;\\n\\n    event EnableExecutor(uint256 indexed executorId, address indexed executorAddress);\\n    event DisableExecutor(uint256 indexed executorId, address indexed executorAddress);\\n\\n    modifier executorExists(uint256 _executorId) {\\n        require(_executorId > 0 && _executorId < executorsNextIndex, ERROR_INEXISTENT_EXECUTOR);\\n        _;\\n    }\\n\\n    /**\\n    * @notice Initialize the registry\\n    */\\n    function initialize() public onlyInit {\\n        initialized();\\n        // Create empty record to begin executor IDs at 1\\n        executorsNextIndex = 1;\\n    }\\n\\n    /**\\n    * @notice Add a new script executor with address `_executor` to the registry\\n    * @param _executor Address of the IEVMScriptExecutor that will be added to the registry\\n    * @return id Identifier of the executor in the registry\\n    */\\n    function addScriptExecutor(IEVMScriptExecutor _executor) external auth(REGISTRY_ADD_EXECUTOR_ROLE) returns (uint256 id) {\\n        uint256 executorId = executorsNextIndex++;\\n        executors[executorId] = ExecutorEntry(_executor, true);\\n        emit EnableExecutor(executorId, _executor);\\n        return executorId;\\n    }\\n\\n    /**\\n    * @notice Disable script executor with ID `_executorId`\\n    * @param _executorId Identifier of the executor in the registry\\n    */\\n    function disableScriptExecutor(uint256 _executorId)\\n        external\\n        authP(REGISTRY_MANAGER_ROLE, arr(_executorId))\\n    {\\n        // Note that we don't need to check for an executor's existence in this case, as only\\n        // existing executors can be enabled\\n        ExecutorEntry storage executorEntry = executors[_executorId];\\n        require(executorEntry.enabled, ERROR_EXECUTOR_DISABLED);\\n        executorEntry.enabled = false;\\n        emit DisableExecutor(_executorId, executorEntry.executor);\\n    }\\n\\n    /**\\n    * @notice Enable script executor with ID `_executorId`\\n    * @param _executorId Identifier of the executor in the registry\\n    */\\n    function enableScriptExecutor(uint256 _executorId)\\n        external\\n        authP(REGISTRY_MANAGER_ROLE, arr(_executorId))\\n        executorExists(_executorId)\\n    {\\n        ExecutorEntry storage executorEntry = executors[_executorId];\\n        require(!executorEntry.enabled, ERROR_EXECUTOR_ENABLED);\\n        executorEntry.enabled = true;\\n        emit EnableExecutor(_executorId, executorEntry.executor);\\n    }\\n\\n    /**\\n    * @dev Get the script executor that can execute a particular script based on its first 4 bytes\\n    * @param _script EVMScript being inspected\\n    */\\n    function getScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        require(_script.length >= SCRIPT_START_LOCATION, ERROR_SCRIPT_LENGTH_TOO_SHORT);\\n        uint256 id = _script.getSpecId();\\n\\n        // Note that we don't need to check for an executor's existence in this case, as only\\n        // existing executors can be enabled\\n        ExecutorEntry storage entry = executors[id];\\n        return entry.enabled ? entry.executor : IEVMScriptExecutor(0);\\n    }\\n}\\n\",\"keccak256\":\"0x0a8a940995af70625b926c4a70f3d847841f7da2601087436e3bae9b41af76c4\"},\"@aragon/os/contracts/evmscript/EVMScriptRunner.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\nimport \\\"../kernel/KernelConstants.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\n\\n\\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \\\"EVMRUN_EXECUTOR_UNAVAILABLE\\\";\\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \\\"EVMRUN_PROTECTED_STATE_MODIFIED\\\";\\n\\n    /* This is manually crafted in assembly\\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\";\\n    */\\n\\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\\n\\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\\n    }\\n\\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n        return IEVMScriptRegistry(registryAddr);\\n    }\\n\\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\\n        internal\\n        isInitialized\\n        protectState\\n        returns (bytes)\\n    {\\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\\n\\n        bytes4 sig = executor.execScript.selector;\\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\\n\\n        bytes memory output;\\n        assembly {\\n            let success := delegatecall(\\n                gas,                // forward all gas\\n                executor,           // address\\n                add(data, 0x20),    // calldata start\\n                mload(data),        // calldata length\\n                0,                  // don't write output (we'll handle this ourselves)\\n                0                   // don't write output\\n            )\\n\\n            output := mload(0x40) // free mem ptr get\\n\\n            switch success\\n            case 0 {\\n                // If the call errored, forward its full error data\\n                returndatacopy(output, 0, returndatasize)\\n                revert(output, returndatasize)\\n            }\\n            default {\\n                switch gt(returndatasize, 0x3f)\\n                case 0 {\\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\\n                    // revert with \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\"\\n                    // See remix: doing a `revert(\\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\")` always results in\\n                    // this memory layout\\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\\n\\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\\n                }\\n                default {\\n                    // Copy result\\n                    //\\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\\n                    //    [ output length (32 bytes) ]\\n                    //    [ output content (N bytes) ]\\n                    //\\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\\n                    let copysize := sub(returndatasize, 0x20)\\n                    returndatacopy(output, 0x20, copysize)\\n\\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\\n                }\\n            }\\n        }\\n\\n        emit ScriptResult(address(executor), _script, _input, output);\\n\\n        return output;\\n    }\\n\\n    modifier protectState {\\n        address preKernel = address(kernel());\\n        bytes32 preAppId = appId();\\n        _; // exec\\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\\n    }\\n}\\n\",\"keccak256\":\"0xf8b4ccf7ee558224c155604a4a0b5cc35715367cda5010fb38e21d63ec5236c9\"},\"@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IEVMScriptExecutor {\\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\\n    function executorType() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x76ad18a278e36e14147f5b58a1157de67ce95f28813f3e1eacfedaaf53dd33b9\"},\"@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    */\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\\n}\\n\",\"keccak256\":\"0x66b255ac1537765d6e79cc0ed02df004e7bf214863773901e207baafd59dc2ce\"},\"@aragon/os/contracts/evmscript/ScriptHelpers.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\nlibrary ScriptHelpers {\\n    function getSpecId(bytes _script) internal pure returns (uint32) {\\n        return uint32At(_script, 0);\\n    }\\n\\n    function uint256At(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mload(add(_data, add(0x20, _location)))\\n        }\\n    }\\n\\n    function addressAt(bytes _data, uint256 _location) internal pure returns (address result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000),\\n            0x1000000000000000000000000)\\n        }\\n    }\\n\\n    function uint32At(bytes _data, uint256 _location) internal pure returns (uint32 result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000),\\n            0x100000000000000000000000000000000000000000000000000000000)\\n        }\\n    }\\n\\n    function locationOf(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := add(_data, add(0x20, _location))\\n        }\\n    }\\n\\n    function toBytes(bytes4 _sig) internal pure returns (bytes) {\\n        bytes memory payload = new bytes(4);\\n        assembly { mstore(add(payload, 0x20), _sig) }\\n        return payload;\\n    }\\n}\\n\",\"keccak256\":\"0x2a3c77b540a4f8fdd657a4a77614b4a3675588527ce4d935684ea93e5f60a0b7\"},\"@aragon/os/contracts/evmscript/executors/BaseEVMScriptExecutor.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../../common/Autopetrified.sol\\\";\\nimport \\\"../IEVMScriptExecutor.sol\\\";\\n\\n\\ncontract BaseEVMScriptExecutor is IEVMScriptExecutor, Autopetrified {\\n    uint256 internal constant SCRIPT_START_LOCATION = 4;\\n}\\n\",\"keccak256\":\"0x96b64e6c5ccd7e80171a6ae2d84dddf0a4d96225f70c5b7ce8c48bd35c3869b2\"},\"@aragon/os/contracts/evmscript/executors/CallsScript.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\n// Inspired by https://github.com/reverendus/tx-manager\\n\\nimport \\\"../ScriptHelpers.sol\\\";\\nimport \\\"./BaseEVMScriptExecutor.sol\\\";\\n\\n\\ncontract CallsScript is BaseEVMScriptExecutor {\\n    using ScriptHelpers for bytes;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant EXECUTOR_TYPE = keccak256(\\\"CALLS_SCRIPT\\\");\\n    */\\n    bytes32 internal constant EXECUTOR_TYPE = 0x2dc858a00f3e417be1394b87c07158e989ec681ce8cc68a9093680ac1a870302;\\n\\n    string private constant ERROR_BLACKLISTED_CALL = \\\"EVMCALLS_BLACKLISTED_CALL\\\";\\n    string private constant ERROR_INVALID_LENGTH = \\\"EVMCALLS_INVALID_LENGTH\\\";\\n\\n    /* This is manually crafted in assembly\\n    string private constant ERROR_CALL_REVERTED = \\\"EVMCALLS_CALL_REVERTED\\\";\\n    */\\n\\n    event LogScriptCall(address indexed sender, address indexed src, address indexed dst);\\n\\n    /**\\n    * @notice Executes a number of call scripts\\n    * @param _script [ specId (uint32) ] many calls with this structure ->\\n    *    [ to (address: 20 bytes) ] [ calldataLength (uint32: 4 bytes) ] [ calldata (calldataLength bytes) ]\\n    * @param _blacklist Addresses the script cannot call to, or will revert.\\n    * @return Always returns empty byte array\\n    */\\n    function execScript(bytes _script, bytes, address[] _blacklist) external isInitialized returns (bytes) {\\n        uint256 location = SCRIPT_START_LOCATION; // first 32 bits are spec id\\n        while (location < _script.length) {\\n            // Check there's at least address + calldataLength available\\n            require(_script.length - location >= 0x18, ERROR_INVALID_LENGTH);\\n\\n            address contractAddress = _script.addressAt(location);\\n            // Check address being called is not blacklist\\n            for (uint256 i = 0; i < _blacklist.length; i++) {\\n                require(contractAddress != _blacklist[i], ERROR_BLACKLISTED_CALL);\\n            }\\n\\n            // logged before execution to ensure event ordering in receipt\\n            // if failed entire execution is reverted regardless\\n            emit LogScriptCall(msg.sender, address(this), contractAddress);\\n\\n            uint256 calldataLength = uint256(_script.uint32At(location + 0x14));\\n            uint256 startOffset = location + 0x14 + 0x04;\\n            uint256 calldataStart = _script.locationOf(startOffset);\\n\\n            // compute end of script / next location\\n            location = startOffset + calldataLength;\\n            require(location <= _script.length, ERROR_INVALID_LENGTH);\\n\\n            bool success;\\n            assembly {\\n                success := call(\\n                    sub(gas, 5000),       // forward gas left - 5000\\n                    contractAddress,      // address\\n                    0,                    // no value\\n                    calldataStart,        // calldata start\\n                    calldataLength,       // calldata length\\n                    0,                    // don't write output\\n                    0                     // don't write output\\n                )\\n\\n                switch success\\n                case 0 {\\n                    let ptr := mload(0x40)\\n\\n                    switch returndatasize\\n                    case 0 {\\n                        // No error data was returned, revert with \\\"EVMCALLS_CALL_REVERTED\\\"\\n                        // See remix: doing a `revert(\\\"EVMCALLS_CALL_REVERTED\\\")` always results in\\n                        // this memory layout\\n                        mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\\n                        mstore(add(ptr, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\\n                        mstore(add(ptr, 0x24), 0x0000000000000000000000000000000000000000000000000000000000000016) // reason length\\n                        mstore(add(ptr, 0x44), 0x45564d43414c4c535f43414c4c5f524556455254454400000000000000000000) // reason\\n\\n                        revert(ptr, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\\n                    }\\n                    default {\\n                        // Forward the full error data\\n                        returndatacopy(ptr, 0, returndatasize)\\n                        revert(ptr, returndatasize)\\n                    }\\n                }\\n                default { }\\n            }\\n        }\\n        // No need to allocate empty bytes for the return as this can only be called via an delegatecall\\n        // (due to the isInitialized modifier)\\n    }\\n\\n    function executorType() external pure returns (bytes32) {\\n        return EXECUTOR_TYPE;\\n    }\\n}\\n\",\"keccak256\":\"0xc7078b505c6e458b5d4d7d47df87245b3bdb96f8c21d2b93669d6b5251456a2c\"},\"@aragon/os/contracts/factory/AppProxyFactory.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../apps/AppProxyUpgradeable.sol\\\";\\nimport \\\"../apps/AppProxyPinned.sol\\\";\\n\\n\\ncontract AppProxyFactory {\\n    event NewAppProxy(address proxy, bool isUpgradeable, bytes32 appId);\\n\\n    /**\\n    * @notice Create a new upgradeable app instance on `_kernel` with identifier `_appId`\\n    * @param _kernel App's Kernel reference\\n    * @param _appId Identifier for app\\n    * @return AppProxyUpgradeable\\n    */\\n    function newAppProxy(IKernel _kernel, bytes32 _appId) public returns (AppProxyUpgradeable) {\\n        return newAppProxy(_kernel, _appId, new bytes(0));\\n    }\\n\\n    /**\\n    * @notice Create a new upgradeable app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`\\n    * @param _kernel App's Kernel reference\\n    * @param _appId Identifier for app\\n    * @return AppProxyUpgradeable\\n    */\\n    function newAppProxy(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyUpgradeable) {\\n        AppProxyUpgradeable proxy = new AppProxyUpgradeable(_kernel, _appId, _initializePayload);\\n        emit NewAppProxy(address(proxy), true, _appId);\\n        return proxy;\\n    }\\n\\n    /**\\n    * @notice Create a new pinned app instance on `_kernel` with identifier `_appId`\\n    * @param _kernel App's Kernel reference\\n    * @param _appId Identifier for app\\n    * @return AppProxyPinned\\n    */\\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId) public returns (AppProxyPinned) {\\n        return newAppProxyPinned(_kernel, _appId, new bytes(0));\\n    }\\n\\n    /**\\n    * @notice Create a new pinned app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`\\n    * @param _kernel App's Kernel reference\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Proxy initialization payload\\n    * @return AppProxyPinned\\n    */\\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyPinned) {\\n        AppProxyPinned proxy = new AppProxyPinned(_kernel, _appId, _initializePayload);\\n        emit NewAppProxy(address(proxy), false, _appId);\\n        return proxy;\\n    }\\n}\\n\",\"keccak256\":\"0x94e88f4e8747be9487e32069eb22c1455ffc49cfd1299ef1eba212049c2db115\"},\"@aragon/os/contracts/factory/DAOFactory.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../kernel/IKernel.sol\\\";\\nimport \\\"../kernel/Kernel.sol\\\";\\nimport \\\"../kernel/KernelProxy.sol\\\";\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../acl/ACL.sol\\\";\\n\\nimport \\\"./EVMScriptRegistryFactory.sol\\\";\\n\\n\\ncontract DAOFactory {\\n    IKernel public baseKernel;\\n    IACL public baseACL;\\n    EVMScriptRegistryFactory public regFactory;\\n\\n    event DeployDAO(address dao);\\n    event DeployEVMScriptRegistry(address reg);\\n\\n    /**\\n    * @notice Create a new DAOFactory, creating DAOs with Kernels proxied to `_baseKernel`, ACLs proxied to `_baseACL`, and new EVMScriptRegistries created from `_regFactory`.\\n    * @param _baseKernel Base Kernel\\n    * @param _baseACL Base ACL\\n    * @param _regFactory EVMScriptRegistry factory\\n    */\\n    constructor(IKernel _baseKernel, IACL _baseACL, EVMScriptRegistryFactory _regFactory) public {\\n        // No need to init as it cannot be killed by devops199\\n        if (address(_regFactory) != address(0)) {\\n            regFactory = _regFactory;\\n        }\\n\\n        baseKernel = _baseKernel;\\n        baseACL = _baseACL;\\n    }\\n\\n    /**\\n    * @notice Create a new DAO with `_root` set as the initial admin\\n    * @param _root Address that will be granted control to setup DAO permissions\\n    * @return Newly created DAO\\n    */\\n    function newDAO(address _root) public returns (Kernel) {\\n        Kernel dao = Kernel(new KernelProxy(baseKernel));\\n\\n        if (address(regFactory) == address(0)) {\\n            dao.initialize(baseACL, _root);\\n        } else {\\n            dao.initialize(baseACL, this);\\n\\n            ACL acl = ACL(dao.acl());\\n            bytes32 permRole = acl.CREATE_PERMISSIONS_ROLE();\\n            bytes32 appManagerRole = dao.APP_MANAGER_ROLE();\\n\\n            acl.grantPermission(regFactory, acl, permRole);\\n\\n            acl.createPermission(regFactory, dao, appManagerRole, this);\\n\\n            EVMScriptRegistry reg = regFactory.newEVMScriptRegistry(dao);\\n            emit DeployEVMScriptRegistry(address(reg));\\n\\n            // Clean up permissions\\n            // First, completely reset the APP_MANAGER_ROLE\\n            acl.revokePermission(regFactory, dao, appManagerRole);\\n            acl.removePermissionManager(dao, appManagerRole);\\n\\n            // Then, make root the only holder and manager of CREATE_PERMISSIONS_ROLE\\n            acl.revokePermission(regFactory, acl, permRole);\\n            acl.revokePermission(this, acl, permRole);\\n            acl.grantPermission(_root, acl, permRole);\\n            acl.setPermissionManager(_root, acl, permRole);\\n        }\\n\\n        emit DeployDAO(address(dao));\\n\\n        return dao;\\n    }\\n}\\n\",\"keccak256\":\"0x606c9813487fba0c479b0e5b2bc077bab428d6c24b480936c5172bfb9d5598b6\"},\"@aragon/os/contracts/factory/EVMScriptRegistryFactory.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../evmscript/IEVMScriptExecutor.sol\\\";\\nimport \\\"../evmscript/EVMScriptRegistry.sol\\\";\\n\\nimport \\\"../evmscript/executors/CallsScript.sol\\\";\\n\\nimport \\\"../kernel/Kernel.sol\\\";\\nimport \\\"../acl/ACL.sol\\\";\\n\\n\\ncontract EVMScriptRegistryFactory is EVMScriptRegistryConstants {\\n    EVMScriptRegistry public baseReg;\\n    IEVMScriptExecutor public baseCallScript;\\n\\n    /**\\n    * @notice Create a new EVMScriptRegistryFactory.\\n    */\\n    constructor() public {\\n        baseReg = new EVMScriptRegistry();\\n        baseCallScript = IEVMScriptExecutor(new CallsScript());\\n    }\\n\\n    /**\\n    * @notice Install a new pinned instance of EVMScriptRegistry on `_dao`.\\n    * @param _dao Kernel\\n    * @return Installed EVMScriptRegistry\\n    */\\n    function newEVMScriptRegistry(Kernel _dao) public returns (EVMScriptRegistry reg) {\\n        bytes memory initPayload = abi.encodeWithSelector(reg.initialize.selector);\\n        reg = EVMScriptRegistry(_dao.newPinnedAppInstance(EVMSCRIPT_REGISTRY_APP_ID, baseReg, initPayload, true));\\n\\n        ACL acl = ACL(_dao.acl());\\n\\n        acl.createPermission(this, reg, reg.REGISTRY_ADD_EXECUTOR_ROLE(), this);\\n\\n        reg.addScriptExecutor(baseCallScript);     // spec 1 = CallsScript\\n\\n        // Clean up the permissions\\n        acl.revokePermission(this, reg, reg.REGISTRY_ADD_EXECUTOR_ROLE());\\n        acl.removePermissionManager(reg, reg.REGISTRY_ADD_EXECUTOR_ROLE());\\n\\n        return reg;\\n    }\\n}\\n\",\"keccak256\":\"0xf879b2069ae82e266b79c48bde64a6f1f051bdc5c566cf01e0cc2e8844c381a7\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\ninterface IKernelEvents {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\\n}\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IKernelEvents, IVaultRecoverable {\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\\n}\\n\",\"keccak256\":\"0x96e9fd607b156a96905ec0108bb4fbcc5ad85212bb98e03600069bb5727d2daa\"},\"@aragon/os/contracts/kernel/Kernel.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"./IKernel.sol\\\";\\nimport \\\"./KernelConstants.sol\\\";\\nimport \\\"./KernelStorage.sol\\\";\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/IsContract.sol\\\";\\nimport \\\"../common/Petrifiable.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../factory/AppProxyFactory.sol\\\";\\nimport \\\"../lib/misc/ERCProxy.sol\\\";\\n\\n\\n// solium-disable-next-line max-len\\ncontract Kernel is IKernel, KernelStorage, KernelAppIds, KernelNamespaceConstants, Petrifiable, IsContract, VaultRecoverable, AppProxyFactory, ACLSyntaxSugar {\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant APP_MANAGER_ROLE = keccak256(\\\"APP_MANAGER_ROLE\\\");\\n    */\\n    bytes32 public constant APP_MANAGER_ROLE = 0xb6d92708f3d4817afc106147d969e229ced5c46e65e0a5002a0d391287762bd0;\\n\\n    string private constant ERROR_APP_NOT_CONTRACT = \\\"KERNEL_APP_NOT_CONTRACT\\\";\\n    string private constant ERROR_INVALID_APP_CHANGE = \\\"KERNEL_INVALID_APP_CHANGE\\\";\\n    string private constant ERROR_AUTH_FAILED = \\\"KERNEL_AUTH_FAILED\\\";\\n\\n    /**\\n    * @dev Constructor that allows the deployer to choose if the base instance should be petrified immediately.\\n    * @param _shouldPetrify Immediately petrify this instance so that it can never be initialized\\n    */\\n    constructor(bool _shouldPetrify) public {\\n        if (_shouldPetrify) {\\n            petrify();\\n        }\\n    }\\n\\n    /**\\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\\n    * @notice Initialize this kernel instance along with its ACL and set `_permissionsCreator` as the entity that can create other permissions\\n    * @param _baseAcl Address of base ACL app\\n    * @param _permissionsCreator Entity that will be given permission over createPermission\\n    */\\n    function initialize(IACL _baseAcl, address _permissionsCreator) public onlyInit {\\n        initialized();\\n\\n        // Set ACL base\\n        _setApp(KERNEL_APP_BASES_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID, _baseAcl);\\n\\n        // Create ACL instance and attach it as the default ACL app\\n        IACL acl = IACL(newAppProxy(this, KERNEL_DEFAULT_ACL_APP_ID));\\n        acl.initialize(_permissionsCreator);\\n        _setApp(KERNEL_APP_ADDR_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID, acl);\\n\\n        recoveryVaultAppId = KERNEL_DEFAULT_VAULT_APP_ID;\\n    }\\n\\n    /**\\n    * @dev Create a new instance of an app linked to this kernel\\n    * @notice Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`\\n    * @param _appId Identifier for app\\n    * @param _appBase Address of the app's base implementation\\n    * @return AppProxy instance\\n    */\\n    function newAppInstance(bytes32 _appId, address _appBase)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\\n        returns (ERCProxy appProxy)\\n    {\\n        return newAppInstance(_appId, _appBase, new bytes(0), false);\\n    }\\n\\n    /**\\n    * @dev Create a new instance of an app linked to this kernel and set its base\\n    *      implementation if it was not already set\\n    * @notice Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`\\n    * @param _appId Identifier for app\\n    * @param _appBase Address of the app's base implementation\\n    * @param _initializePayload Payload for call made by the proxy during its construction to initialize\\n    * @param _setDefault Whether the app proxy app is the default one.\\n    *        Useful when the Kernel needs to know of an instance of a particular app,\\n    *        like Vault for escape hatch mechanism.\\n    * @return AppProxy instance\\n    */\\n    function newAppInstance(bytes32 _appId, address _appBase, bytes _initializePayload, bool _setDefault)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\\n        returns (ERCProxy appProxy)\\n    {\\n        _setAppIfNew(KERNEL_APP_BASES_NAMESPACE, _appId, _appBase);\\n        appProxy = newAppProxy(this, _appId, _initializePayload);\\n        // By calling setApp directly and not the internal functions, we make sure the params are checked\\n        // and it will only succeed if sender has permissions to set something to the namespace.\\n        if (_setDefault) {\\n            setApp(KERNEL_APP_ADDR_NAMESPACE, _appId, appProxy);\\n        }\\n    }\\n\\n    /**\\n    * @dev Create a new pinned instance of an app linked to this kernel\\n    * @notice Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`.\\n    * @param _appId Identifier for app\\n    * @param _appBase Address of the app's base implementation\\n    * @return AppProxy instance\\n    */\\n    function newPinnedAppInstance(bytes32 _appId, address _appBase)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\\n        returns (ERCProxy appProxy)\\n    {\\n        return newPinnedAppInstance(_appId, _appBase, new bytes(0), false);\\n    }\\n\\n    /**\\n    * @dev Create a new pinned instance of an app linked to this kernel and set\\n    *      its base implementation if it was not already set\\n    * @notice Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`\\n    * @param _appId Identifier for app\\n    * @param _appBase Address of the app's base implementation\\n    * @param _initializePayload Payload for call made by the proxy during its construction to initialize\\n    * @param _setDefault Whether the app proxy app is the default one.\\n    *        Useful when the Kernel needs to know of an instance of a particular app,\\n    *        like Vault for escape hatch mechanism.\\n    * @return AppProxy instance\\n    */\\n    function newPinnedAppInstance(bytes32 _appId, address _appBase, bytes _initializePayload, bool _setDefault)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\\n        returns (ERCProxy appProxy)\\n    {\\n        _setAppIfNew(KERNEL_APP_BASES_NAMESPACE, _appId, _appBase);\\n        appProxy = newAppProxyPinned(this, _appId, _initializePayload);\\n        // By calling setApp directly and not the internal functions, we make sure the params are checked\\n        // and it will only succeed if sender has permissions to set something to the namespace.\\n        if (_setDefault) {\\n            setApp(KERNEL_APP_ADDR_NAMESPACE, _appId, appProxy);\\n        }\\n    }\\n\\n    /**\\n    * @dev Set the resolving address of an app instance or base implementation\\n    * @notice Set the resolving address of `_appId` in namespace `_namespace` to `_app`\\n    * @param _namespace App namespace to use\\n    * @param _appId Identifier for app\\n    * @param _app Address of the app instance or base implementation\\n    * @return ID of app\\n    */\\n    function setApp(bytes32 _namespace, bytes32 _appId, address _app)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(_namespace, _appId))\\n    {\\n        _setApp(_namespace, _appId, _app);\\n    }\\n\\n    /**\\n    * @dev Set the default vault id for the escape hatch mechanism\\n    * @param _recoveryVaultAppId Identifier of the recovery vault app\\n    */\\n    function setRecoveryVaultAppId(bytes32 _recoveryVaultAppId)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_ADDR_NAMESPACE, _recoveryVaultAppId))\\n    {\\n        recoveryVaultAppId = _recoveryVaultAppId;\\n    }\\n\\n    // External access to default app id and namespace constants to mimic default getters for constants\\n    /* solium-disable function-order, mixedcase */\\n    function CORE_NAMESPACE() external pure returns (bytes32) { return KERNEL_CORE_NAMESPACE; }\\n    function APP_BASES_NAMESPACE() external pure returns (bytes32) { return KERNEL_APP_BASES_NAMESPACE; }\\n    function APP_ADDR_NAMESPACE() external pure returns (bytes32) { return KERNEL_APP_ADDR_NAMESPACE; }\\n    function KERNEL_APP_ID() external pure returns (bytes32) { return KERNEL_CORE_APP_ID; }\\n    function DEFAULT_ACL_APP_ID() external pure returns (bytes32) { return KERNEL_DEFAULT_ACL_APP_ID; }\\n    /* solium-enable function-order, mixedcase */\\n\\n    /**\\n    * @dev Get the address of an app instance or base implementation\\n    * @param _namespace App namespace to use\\n    * @param _appId Identifier for app\\n    * @return Address of the app\\n    */\\n    function getApp(bytes32 _namespace, bytes32 _appId) public view returns (address) {\\n        return apps[_namespace][_appId];\\n    }\\n\\n    /**\\n    * @dev Get the address of the recovery Vault instance (to recover funds)\\n    * @return Address of the Vault\\n    */\\n    function getRecoveryVault() public view returns (address) {\\n        return apps[KERNEL_APP_ADDR_NAMESPACE][recoveryVaultAppId];\\n    }\\n\\n    /**\\n    * @dev Get the installed ACL app\\n    * @return ACL app\\n    */\\n    function acl() public view returns (IACL) {\\n        return IACL(getApp(KERNEL_APP_ADDR_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID));\\n    }\\n\\n    /**\\n    * @dev Function called by apps to check ACL on kernel or to check permission status\\n    * @param _who Sender of the original call\\n    * @param _where Address of the app\\n    * @param _what Identifier for a group of actions in app\\n    * @param _how Extra data for ACL auth\\n    * @return Boolean indicating whether the ACL allows the role or not.\\n    *         Always returns false if the kernel hasn't been initialized yet.\\n    */\\n    function hasPermission(address _who, address _where, bytes32 _what, bytes _how) public view returns (bool) {\\n        IACL defaultAcl = acl();\\n        return address(defaultAcl) != address(0) && // Poor man's initialization check (saves gas)\\n            defaultAcl.hasPermission(_who, _where, _what, _how);\\n    }\\n\\n    function _setApp(bytes32 _namespace, bytes32 _appId, address _app) internal {\\n        require(isContract(_app), ERROR_APP_NOT_CONTRACT);\\n        apps[_namespace][_appId] = _app;\\n        emit SetApp(_namespace, _appId, _app);\\n    }\\n\\n    function _setAppIfNew(bytes32 _namespace, bytes32 _appId, address _app) internal {\\n        address app = getApp(_namespace, _appId);\\n        if (app != address(0)) {\\n            // The only way to set an app is if it passes the isContract check, so no need to check it again\\n            require(app == _app, ERROR_INVALID_APP_CHANGE);\\n        } else {\\n            _setApp(_namespace, _appId, _app);\\n        }\\n    }\\n\\n    modifier auth(bytes32 _role, uint256[] memory _params) {\\n        require(\\n            hasPermission(msg.sender, address(this), _role, ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)),\\n            ERROR_AUTH_FAILED\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x117b1e169c984a4ad9070d5d7784bf91f8b1b16d3e695694cde253181b5ade3e\"},\"@aragon/os/contracts/kernel/KernelConstants.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract KernelAppIds {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\\\"kernel\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\\\"acl\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\\\"vault\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\\n}\\n\\n\\ncontract KernelNamespaceConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\\\"core\\\");\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\\\"base\\\");\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n}\\n\",\"keccak256\":\"0x817f66cfc7bfafd19a4e6b1344850c5f7b72e39a1073fe862efebe608a07c0d3\"},\"@aragon/os/contracts/kernel/KernelProxy.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"./IKernel.sol\\\";\\nimport \\\"./KernelConstants.sol\\\";\\nimport \\\"./KernelStorage.sol\\\";\\nimport \\\"../common/DepositableDelegateProxy.sol\\\";\\nimport \\\"../common/IsContract.sol\\\";\\n\\n\\ncontract KernelProxy is IKernelEvents, KernelStorage, KernelAppIds, KernelNamespaceConstants, IsContract, DepositableDelegateProxy {\\n    /**\\n    * @dev KernelProxy is a proxy contract to a kernel implementation. The implementation\\n    *      can update the reference, which effectively upgrades the contract\\n    * @param _kernelImpl Address of the contract used as implementation for kernel\\n    */\\n    constructor(IKernel _kernelImpl) public {\\n        require(isContract(address(_kernelImpl)));\\n        apps[KERNEL_CORE_NAMESPACE][KERNEL_CORE_APP_ID] = _kernelImpl;\\n\\n        // Note that emitting this event is important for verifying that a KernelProxy instance\\n        // was never upgraded to a malicious Kernel logic contract over its lifespan.\\n        // This starts the \\\"chain of trust\\\", that can be followed through later SetApp() events\\n        // emitted during kernel upgrades.\\n        emit SetApp(KERNEL_CORE_NAMESPACE, KERNEL_CORE_APP_ID, _kernelImpl);\\n    }\\n\\n    /**\\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\\n     */\\n    function proxyType() public pure returns (uint256 proxyTypeId) {\\n        return UPGRADEABLE;\\n    }\\n\\n    /**\\n    * @dev ERC897, the address the proxy would delegate calls to\\n    */\\n    function implementation() public view returns (address) {\\n        return apps[KERNEL_CORE_NAMESPACE][KERNEL_CORE_APP_ID];\\n    }\\n}\\n\",\"keccak256\":\"0xb60dea1ebaf0e3e634b0782ef98fdd854b3de5bb639f56c2937ca34b676940ba\"},\"@aragon/os/contracts/kernel/KernelStorage.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\n\\ncontract KernelStorage {\\n    // namespace => app id => address\\n    mapping (bytes32 => mapping (bytes32 => address)) public apps;\\n    bytes32 public recoveryVaultAppId;\\n}\\n\",\"keccak256\":\"0x682eac86f7a617281098c15cadbaeec72a50cbe49101861a1454519df1718a4c\"},\"@aragon/os/contracts/lib/ens/AbstractENS.sol\":{\"content\":\"// See https://github.com/ensdomains/ens/blob/7e377df83f/contracts/AbstractENS.sol\\n\\npragma solidity ^0.4.15;\\n\\n\\ninterface AbstractENS {\\n    function owner(bytes32 _node) public constant returns (address);\\n    function resolver(bytes32 _node) public constant returns (address);\\n    function ttl(bytes32 _node) public constant returns (uint64);\\n    function setOwner(bytes32 _node, address _owner) public;\\n    function setSubnodeOwner(bytes32 _node, bytes32 label, address _owner) public;\\n    function setResolver(bytes32 _node, address _resolver) public;\\n    function setTTL(bytes32 _node, uint64 _ttl) public;\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed _node, bytes32 indexed _label, address _owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed _node, address _owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed _node, address _resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed _node, uint64 _ttl);\\n}\\n\",\"keccak256\":\"0x8deaa274dfc550c8251576dfa0dde1e58933728ced575de4f5b12391fd358c95\"},\"@aragon/os/contracts/lib/ens/ENS.sol\":{\"content\":\"// See https://github.com/ensdomains/ens/blob/7e377df83f/contracts/ENS.sol\\n\\npragma solidity ^0.4.0;\\n\\n\\nimport \\\"./AbstractENS.sol\\\";\\n\\n/**\\n * The ENS registry contract.\\n */\\ncontract ENS is AbstractENS {\\n    struct Record {\\n        address owner;\\n        address resolver;\\n        uint64 ttl;\\n    }\\n\\n    mapping(bytes32=>Record) records;\\n\\n    // Permits modifications only by the owner of the specified node.\\n    modifier only_owner(bytes32 node) {\\n        if (records[node].owner != msg.sender) throw;\\n        _;\\n    }\\n\\n    /**\\n     * Constructs a new ENS registrar.\\n     */\\n    function ENS() public {\\n        records[0].owner = msg.sender;\\n    }\\n\\n    /**\\n     * Returns the address that owns the specified node.\\n     */\\n    function owner(bytes32 node) public constant returns (address) {\\n        return records[node].owner;\\n    }\\n\\n    /**\\n     * Returns the address of the resolver for the specified node.\\n     */\\n    function resolver(bytes32 node) public constant returns (address) {\\n        return records[node].resolver;\\n    }\\n\\n    /**\\n     * Returns the TTL of a node, and any records associated with it.\\n     */\\n    function ttl(bytes32 node) public constant returns (uint64) {\\n        return records[node].ttl;\\n    }\\n\\n    /**\\n     * Transfers ownership of a node to a new address. May only be called by the current\\n     * owner of the node.\\n     * @param node The node to transfer ownership of.\\n     * @param owner The address of the new owner.\\n     */\\n    function setOwner(bytes32 node, address owner) only_owner(node) public {\\n        Transfer(node, owner);\\n        records[node].owner = owner;\\n    }\\n\\n    /**\\n     * Transfers ownership of a subnode keccak256(node, label) to a new address. May only be\\n     * called by the owner of the parent node.\\n     * @param node The parent node.\\n     * @param label The hash of the label specifying the subnode.\\n     * @param owner The address of the new owner.\\n     */\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) only_owner(node) public {\\n        var subnode = keccak256(node, label);\\n        NewOwner(node, label, owner);\\n        records[subnode].owner = owner;\\n    }\\n\\n    /**\\n     * Sets the resolver address for the specified node.\\n     * @param node The node to update.\\n     * @param resolver The address of the resolver.\\n     */\\n    function setResolver(bytes32 node, address resolver) only_owner(node) public {\\n        NewResolver(node, resolver);\\n        records[node].resolver = resolver;\\n    }\\n\\n    /**\\n     * Sets the TTL for the specified node.\\n     * @param node The node to update.\\n     * @param ttl The TTL in seconds.\\n     */\\n    function setTTL(bytes32 node, uint64 ttl) only_owner(node) public {\\n        NewTTL(node, ttl);\\n        records[node].ttl = ttl;\\n    }\\n}\\n\",\"keccak256\":\"0x919b4beefbead7971bfe6a2a01025919d10091fd412b4e7ffaccc8661d7e2863\"},\"@aragon/os/contracts/lib/ens/PublicResolver.sol\":{\"content\":\"// See https://github.com/ensdomains/ens/blob/7e377df83f/contracts/PublicResolver.sol\\n\\npragma solidity ^0.4.0;\\n\\nimport \\\"./AbstractENS.sol\\\";\\n\\n/**\\n * A simple resolver anyone can use; only allows the owner of a node to set its\\n * address.\\n */\\ncontract PublicResolver {\\n    bytes4 constant INTERFACE_META_ID = 0x01ffc9a7;\\n    bytes4 constant ADDR_INTERFACE_ID = 0x3b3b57de;\\n    bytes4 constant CONTENT_INTERFACE_ID = 0xd8389dc5;\\n    bytes4 constant NAME_INTERFACE_ID = 0x691f3431;\\n    bytes4 constant ABI_INTERFACE_ID = 0x2203ab56;\\n    bytes4 constant PUBKEY_INTERFACE_ID = 0xc8690233;\\n    bytes4 constant TEXT_INTERFACE_ID = 0x59d1d43c;\\n\\n    event AddrChanged(bytes32 indexed node, address a);\\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\\n    event NameChanged(bytes32 indexed node, string name);\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\\n\\n    struct PublicKey {\\n        bytes32 x;\\n        bytes32 y;\\n    }\\n\\n    struct Record {\\n        address addr;\\n        bytes32 content;\\n        string name;\\n        PublicKey pubkey;\\n        mapping(string=>string) text;\\n        mapping(uint256=>bytes) abis;\\n    }\\n\\n    AbstractENS ens;\\n    mapping(bytes32=>Record) records;\\n\\n    modifier only_owner(bytes32 node) {\\n        if (ens.owner(node) != msg.sender) throw;\\n        _;\\n    }\\n\\n    /**\\n     * Constructor.\\n     * @param ensAddr The ENS registrar contract.\\n     */\\n    function PublicResolver(AbstractENS ensAddr) public {\\n        ens = ensAddr;\\n    }\\n\\n    /**\\n     * Returns true if the resolver implements the interface specified by the provided hash.\\n     * @param interfaceID The ID of the interface to check for.\\n     * @return True if the contract implements the requested interface.\\n     */\\n    function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n        return interfaceID == ADDR_INTERFACE_ID ||\\n               interfaceID == CONTENT_INTERFACE_ID ||\\n               interfaceID == NAME_INTERFACE_ID ||\\n               interfaceID == ABI_INTERFACE_ID ||\\n               interfaceID == PUBKEY_INTERFACE_ID ||\\n               interfaceID == TEXT_INTERFACE_ID ||\\n               interfaceID == INTERFACE_META_ID;\\n    }\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) public constant returns (address ret) {\\n        ret = records[node].addr;\\n    }\\n\\n    /**\\n     * Sets the address associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param addr The address to set.\\n     */\\n    function setAddr(bytes32 node, address addr) only_owner(node) public {\\n        records[node].addr = addr;\\n        AddrChanged(node, addr);\\n    }\\n\\n    /**\\n     * Returns the content hash associated with an ENS node.\\n     * Note that this resource type is not standardized, and will likely change\\n     * in future to a resource type based on multihash.\\n     * @param node The ENS node to query.\\n     * @return The associated content hash.\\n     */\\n    function content(bytes32 node) public constant returns (bytes32 ret) {\\n        ret = records[node].content;\\n    }\\n\\n    /**\\n     * Sets the content hash associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * Note that this resource type is not standardized, and will likely change\\n     * in future to a resource type based on multihash.\\n     * @param node The node to update.\\n     * @param hash The content hash to set\\n     */\\n    function setContent(bytes32 node, bytes32 hash) only_owner(node) public {\\n        records[node].content = hash;\\n        ContentChanged(node, hash);\\n    }\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) public constant returns (string ret) {\\n        ret = records[node].name;\\n    }\\n\\n    /**\\n     * Sets the name associated with an ENS node, for reverse records.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param name The name to set.\\n     */\\n    function setName(bytes32 node, string name) only_owner(node) public {\\n        records[node].name = name;\\n        NameChanged(node, name);\\n    }\\n\\n    /**\\n     * Returns the ABI associated with an ENS node.\\n     * Defined in EIP205.\\n     * @param node The ENS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(bytes32 node, uint256 contentTypes) public constant returns (uint256 contentType, bytes data) {\\n        var record = records[node];\\n        for(contentType = 1; contentType <= contentTypes; contentType <<= 1) {\\n            if ((contentType & contentTypes) != 0 && record.abis[contentType].length > 0) {\\n                data = record.abis[contentType];\\n                return;\\n            }\\n        }\\n        contentType = 0;\\n    }\\n\\n    /**\\n     * Sets the ABI associated with an ENS node.\\n     * Nodes may have one ABI of each content type. To remove an ABI, set it to\\n     * the empty string.\\n     * @param node The node to update.\\n     * @param contentType The content type of the ABI\\n     * @param data The ABI data.\\n     */\\n    function setABI(bytes32 node, uint256 contentType, bytes data) only_owner(node) public {\\n        // Content types must be powers of 2\\n        if (((contentType - 1) & contentType) != 0) throw;\\n\\n        records[node].abis[contentType] = data;\\n        ABIChanged(node, contentType);\\n    }\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an ENS node.\\n     * Defined in EIP 619.\\n     * @param node The ENS node to query\\n     * @return x, y the X and Y coordinates of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) public constant returns (bytes32 x, bytes32 y) {\\n        return (records[node].pubkey.x, records[node].pubkey.y);\\n    }\\n\\n    /**\\n     * Sets the SECP256k1 public key associated with an ENS node.\\n     * @param node The ENS node to query\\n     * @param x the X coordinate of the curve point for the public key.\\n     * @param y the Y coordinate of the curve point for the public key.\\n     */\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) only_owner(node) public {\\n        records[node].pubkey = PublicKey(x, y);\\n        PubkeyChanged(node, x, y);\\n    }\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(bytes32 node, string key) public constant returns (string ret) {\\n        ret = records[node].text[key];\\n    }\\n\\n    /**\\n     * Sets the text data associated with an ENS node and key.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param key The key to set.\\n     * @param value The text data value to set.\\n     */\\n    function setText(bytes32 node, string key, string value) only_owner(node) public {\\n        records[node].text[key] = value;\\n        TextChanged(node, key, key);\\n    }\\n}\\n\",\"keccak256\":\"0x8c538f586fdf66528c5c6e2e916c79f00762a2fba3ec0e7be78dc0e3fda4ac2c\"},\"@aragon/os/contracts/lib/math/SafeMath.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\\n// Adapted to use pragma ^0.4.24 and satisfy our linter rules\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (_a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = _a * _b;\\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint256 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint256 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        uint256 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x2e11c8dcead82c452ef452f4dbced40e20ae105fa4145d920dac6e077b31d846\"},\"@aragon/os/contracts/lib/math/SafeMath64.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\\n// Adapted for uint64, pragma ^0.4.24, and satisfying our linter rules\\n// Also optimized the mul() implementation, see https://github.com/aragon/aragonOS/pull/417\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath64\\n * @dev Math operations for uint64 with safety checks that revert on error\\n */\\nlibrary SafeMath64 {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH64_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH64_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH64_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH64_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        uint256 c = uint256(_a) * uint256(_b);\\n        require(c < 0x010000000000000000, ERROR_MUL_OVERFLOW); // 2**64 (less gas this way)\\n\\n        return uint64(c);\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint64 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint64 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        uint64 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x34f18573e7b2180645c67faaff60ebc713ab22c697606d3b3ce4fe0e745955f4\"},\"@aragon/os/contracts/lib/misc/ERCProxy.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ERCProxy {\\n    uint256 internal constant FORWARDING = 1;\\n    uint256 internal constant UPGRADEABLE = 2;\\n\\n    function proxyType() public pure returns (uint256 proxyTypeId);\\n    function implementation() public view returns (address codeAddr);\\n}\\n\",\"keccak256\":\"0xa976d3230857b541c68222d1dc50d8805c598897ae959f7b2d2ab5df35d85ae2\"},\"@aragon/os/contracts/lib/token/ERC20.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 {\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address _who) public view returns (uint256);\\n\\n    function allowance(address _owner, address _spender)\\n        public view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) public returns (bool);\\n\\n    function approve(address _spender, uint256 _value)\\n        public returns (bool);\\n\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        public returns (bool);\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0xa2e319fde92f9e70912f09bf6e99bbf8b9b798961d54ffcba59d347d37bde1b7\"},\"contracts/DBTemplate.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport {DBVoting} from './apps/DBVoting.sol';\\nimport {VotesForwarder} from './apps/VotesForwarder.sol';\\nimport {IVotingToken} from './interfaces/IVotingToken.sol';\\nimport '@aragon/apps-agent/contracts/Agent.sol';\\nimport '@aragon/os/contracts/acl/ACL.sol';\\nimport '@aragon/os/contracts/apm/Repo.sol';\\nimport '@aragon/os/contracts/apm/APMNamehash.sol';\\nimport '@aragon/os/contracts/kernel/Kernel.sol';\\nimport '@aragon/os/contracts/lib/ens/ENS.sol';\\nimport '@aragon/os/contracts/lib/ens/PublicResolver.sol';\\nimport '@aragon/os/contracts/factory/DAOFactory.sol';\\nimport '@aragon/os/contracts/common/IsContract.sol';\\nimport '@aragon/id/contracts/IFIFSResolvingRegistrar.sol';\\n\\ncontract DBTemplate is APMNamehash, IsContract {\\n    /* ====================================================================== //\\n                                        APP IDS\\n    // ====================================================================== */\\n\\n    // keccak256(abi.encodePacked(apmNamehash('open'), keccak256('db-voting')));\\n    // keccak256(abi.encodePacked(apmNamehash('open'), keccak256('votes-forwarder')));\\n    // apmNamehash('agent');\\n    bytes32 internal VOTING_APP_ID = 0x83db27ec048876d414097dca45d6d5aebef29349eb9e8634f31d32595f530779;\\n    bytes32 internal VOTES_FORWARDER_APP_ID = 0xbb8e3a480e6426147fffada9d3aae63d7757e5fea58ece97b535c7b021badc94;\\n    bytes32 internal AGENT_APP_ID = 0x9ac98dc5f995bf0211ed589ef022719d1487e5cb2bab505676f0d084c07cf89a;\\n\\n    /* ====================================================================== //\\n                                        STORAGE\\n    // ====================================================================== */\\n\\n    ENS internal ens;\\n    DAOFactory internal daoFactory;\\n    IFIFSResolvingRegistrar internal aragonID;\\n    DBVoting public votingBase;\\n    VotesForwarder public votesForwarderBase;\\n    Agent public agentBase;\\n\\n    struct DAO {\\n        string aragonId;\\n        Kernel kernel;\\n        ACL acl;\\n        Agent agent;\\n        DBVoting voting;\\n        VotesForwarder forwarder;\\n        IVotingToken token;\\n    }\\n    uint256 public daoId;\\n    mapping(uint256 => DAO) internal daos;\\n\\n    /* ====================================================================== //\\n                                        EVENTS\\n    // ====================================================================== */\\n\\n    event SetupDao(address dao);\\n    event InstalledApp(address appProxy, bytes32 appId);\\n    event CompleteDAO(Kernel dao, ACL acl, Agent agent, DBVoting voting, VotesForwarder votesForwarder);\\n\\n    /* ====================================================================== //\\n                                    EXTERNAL FUNCTIONS\\n    // ====================================================================== */\\n\\n    constructor(\\n        DBVoting _votingBase,\\n        VotesForwarder _votesForwarderBase,\\n        Agent _agentBase,\\n        DAOFactory _daoFactory,\\n        ENS _ens,\\n        IFIFSResolvingRegistrar _aragonID\\n    ) public {\\n        ens = _ens;\\n        aragonID = _aragonID;\\n        daoFactory = _daoFactory;\\n        votingBase = _votingBase;\\n        votesForwarderBase = _votesForwarderBase;\\n        agentBase = _agentBase;\\n    }\\n\\n    function getDAO(uint256 id)\\n        external\\n        view\\n        returns (\\n            string aragonId,\\n            Kernel kernel,\\n            ACL acl,\\n            Agent agent,\\n            DBVoting voting,\\n            VotesForwarder forwarder,\\n            IVotingToken token\\n        )\\n    {\\n        DAO storage dao_ = daos[id];\\n        aragonId = dao_.aragonId;\\n        kernel = dao_.kernel;\\n        acl = dao_.acl;\\n        agent = dao_.agent;\\n        voting = dao_.voting;\\n        forwarder = dao_.forwarder;\\n        token = dao_.token;\\n    }\\n\\n    function newDAO(address _token, string _id) external {\\n        uint64 votingSupport = 50 * 10**16;\\n        uint64 votingMinQuorum = 5 * 10**16;\\n        uint64 votingTime = 3 days;\\n        newDAO(_token, _id, [votingSupport, votingMinQuorum, votingTime]);\\n    }\\n\\n    function newDAO(\\n        address _token,\\n        string memory _id,\\n        uint64[3] memory _votingSettings\\n    ) public {\\n        // Create & Setup DAO\\n        Kernel dao = daoFactory.newDAO(this);\\n        ACL acl = ACL(dao.acl());\\n        acl.createPermission(address(this), dao, dao.APP_MANAGER_ROLE(), address(this));\\n\\n        // install Apps\\n        Agent agent = _installAgentApp(dao);\\n        DBVoting voting = _installDaoBoxVoting(dao, _token, _votingSettings);\\n        VotesForwarder forwarder = VotesForwarder(_installVotesForwarder(dao, _token));\\n\\n        // voting permissions\\n        acl.createPermission(voting, voting, voting.MODIFY_QUORUM_ROLE(), voting);\\n        acl.createPermission(voting, voting, voting.MODIFY_SUPPORT_ROLE(), voting);\\n        acl.createPermission(forwarder, voting, voting.CREATE_VOTES_ROLE(), voting);\\n\\n        // agent permissions\\n        acl.createPermission(voting, agent, agent.EXECUTE_ROLE(), voting);\\n        acl.createPermission(voting, agent, agent.RUN_SCRIPT_ROLE(), voting);\\n\\n        // votesForwarder permissions <-- HACK used to setup votesForwarder\\n        acl.createPermission(address(0), forwarder, forwarder.FANTOM_ROLE(), address(0));\\n\\n        // finalise DAO\\n        _transferRootPermissionsFromTemplateAndFinalizeDAO(dao, voting, voting);\\n        _registerID(_id, dao);\\n\\n        // save DAO\\n        daos[daoId] = DAO(_id, dao, acl, agent, voting, forwarder, IVotingToken(_token));\\n        daoId++;\\n\\n        emit CompleteDAO(dao, acl, agent, voting, forwarder);\\n    }\\n\\n    /* ====================================================================== //\\n                                INTERNAL FUNCTIONS\\n    // ====================================================================== */\\n    function _installAgentApp(Kernel _dao) internal returns (Agent) {\\n        bytes memory initializeData = abi.encodeWithSelector(Agent(0).initialize.selector);\\n        Agent agent = Agent(_dao.newAppInstance(AGENT_APP_ID, agentBase, initializeData, true));\\n        _dao.setRecoveryVaultAppId(AGENT_APP_ID);\\n        return agent;\\n    }\\n\\n    function _installDaoBoxVoting(\\n        Kernel dao,\\n        address token,\\n        uint64[3] memory _votingSettings\\n    ) internal returns (DBVoting) {\\n        DBVoting voting = DBVoting(dao.newAppInstance(VOTING_APP_ID, votingBase));\\n        voting.initialize(IVotingToken(token), _votingSettings[0], _votingSettings[1], _votingSettings[2]);\\n        emit InstalledApp(address(voting), VOTING_APP_ID);\\n        return voting;\\n    }\\n\\n    function _installVotesForwarder(Kernel _dao, address token) internal returns (address) {\\n        VotesForwarder forwarder = VotesForwarder(_dao.newAppInstance(VOTES_FORWARDER_APP_ID, votesForwarderBase));\\n        forwarder.initialize(token);\\n        emit InstalledApp(address(forwarder), VOTES_FORWARDER_APP_ID);\\n        return forwarder;\\n    }\\n\\n    function _transferRootPermissionsFromTemplateAndFinalizeDAO(\\n        Kernel _dao,\\n        address _to,\\n        address _manager\\n    ) internal {\\n        ACL _acl = ACL(_dao.acl());\\n        _transferPermissionFromTemplate(_acl, _dao, _to, _dao.APP_MANAGER_ROLE(), _manager);\\n        _transferPermissionFromTemplate(_acl, _acl, _to, _acl.CREATE_PERMISSIONS_ROLE(), _manager);\\n        emit SetupDao(_dao);\\n    }\\n\\n    function _transferPermissionFromTemplate(\\n        ACL _acl,\\n        address _app,\\n        address _to,\\n        bytes32 _permission,\\n        address _manager\\n    ) internal {\\n        _acl.grantPermission(_to, _app, _permission);\\n        _acl.revokePermission(address(this), _app, _permission);\\n        _acl.setPermissionManager(_manager, _app, _permission);\\n    }\\n\\n    function _registerID(string memory _name, address _owner) internal {\\n        aragonID.register(keccak256(abi.encodePacked(_name)), _owner);\\n    }\\n}\\n\",\"keccak256\":\"0x6b4de146b0117d51fa8470666b5e72e684ddc957a67856069204eb18e50e238e\"},\"contracts/apps/DBVoting.sol\":{\"content\":\"// SPDX-License-Identitifer: GPL-3.0-or-later\\n\\npragma solidity 0.4.24;\\n\\nimport '@aragon/os/contracts/apps/AragonApp.sol';\\nimport '@aragon/os/contracts/common/IForwarder.sol';\\n\\nimport '@aragon/os/contracts/lib/math/SafeMath.sol';\\nimport '@aragon/os/contracts/lib/math/SafeMath64.sol';\\nimport '../interfaces/IVotingToken.sol';\\n\\ncontract DBVoting is IForwarder, AragonApp {\\n    using SafeMath for uint256;\\n    using SafeMath64 for uint64;\\n\\n    bytes32 public constant CREATE_VOTES_ROLE = keccak256('CREATE_VOTES_ROLE');\\n    bytes32 public constant MODIFY_SUPPORT_ROLE = keccak256('MODIFY_SUPPORT_ROLE');\\n    bytes32 public constant MODIFY_QUORUM_ROLE = keccak256('MODIFY_QUORUM_ROLE');\\n\\n    uint64 public constant PCT_BASE = 10**18; // 0% = 0; 1% = 10^16; 100% = 10^18\\n\\n    string private constant ERROR_NO_VOTE = 'VOTING_NO_VOTE';\\n    string private constant ERROR_INIT_PCTS = 'VOTING_INIT_PCTS';\\n    string private constant ERROR_CHANGE_SUPPORT_PCTS = 'VOTING_CHANGE_SUPPORT_PCTS';\\n    string private constant ERROR_CHANGE_QUORUM_PCTS = 'VOTING_CHANGE_QUORUM_PCTS';\\n    string private constant ERROR_INIT_SUPPORT_TOO_BIG = 'VOTING_INIT_SUPPORT_TOO_BIG';\\n    string private constant ERROR_CHANGE_SUPPORT_TOO_BIG = 'VOTING_CHANGE_SUPP_TOO_BIG';\\n    string private constant ERROR_CAN_NOT_VOTE = 'VOTING_CAN_NOT_VOTE';\\n    string private constant ERROR_CAN_NOT_EXECUTE = 'VOTING_CAN_NOT_EXECUTE';\\n    string private constant ERROR_CAN_NOT_FORWARD = 'VOTING_CAN_NOT_FORWARD';\\n    string private constant ERROR_NO_VOTING_POWER = 'VOTING_NO_VOTING_POWER';\\n\\n    enum VoterState {\\n        Absent,\\n        Yea,\\n        Nay\\n    }\\n\\n    struct Vote {\\n        bool executed;\\n        uint64 startDate;\\n        uint64 snapshotBlock;\\n        uint64 supportRequiredPct;\\n        uint64 minAcceptQuorumPct;\\n        uint256 yea;\\n        uint256 nay;\\n        uint256 votingPower;\\n        bytes executionScript;\\n        mapping(address => VoterState) voters;\\n    }\\n\\n    address public token;\\n    uint64 public supportRequiredPct;\\n    uint64 public minAcceptQuorumPct;\\n    uint64 public voteTime;\\n\\n    // We are mimicing an array, we use a mapping instead to make app upgrade more graceful\\n    mapping(uint256 => Vote) internal votes;\\n    uint256 public votesLength;\\n\\n    event StartVote(uint256 indexed voteId, address indexed creator, string metadata);\\n    event CastVote(uint256 indexed voteId, address indexed voter, bool supports, uint256 stake);\\n    event ExecuteVote(uint256 indexed voteId);\\n    event ChangeSupportRequired(uint64 supportRequiredPct);\\n    event ChangeMinQuorum(uint64 minAcceptQuorumPct);\\n\\n    modifier voteExists(uint256 _voteId) {\\n        require(_voteId < votesLength, ERROR_NO_VOTE);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize Voting app with `_token.symbol(): string` for governance, minimum support of `@formatPct(_supportRequiredPct)`%, minimum acceptance quorum of `@formatPct(_minAcceptQuorumPct)`%, and a voting duration of `@transformTime(_voteTime)`\\n     * @param _token IVotingToken Address that will be used as governance token\\n     * @param _supportRequiredPct Percentage of yeas in casted votes for a vote to succeed (expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%)\\n     * @param _minAcceptQuorumPct Percentage of yeas in total possible votes for a vote to succeed (expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%)\\n     * @param _voteTime Seconds that a vote will be open for token holders to vote (unless enough yeas or nays have been cast to make an early decision)\\n     */\\n    function initialize(\\n        address _token,\\n        uint64 _supportRequiredPct,\\n        uint64 _minAcceptQuorumPct,\\n        uint64 _voteTime\\n    ) external onlyInit {\\n        initialized();\\n\\n        require(_minAcceptQuorumPct <= _supportRequiredPct, ERROR_INIT_PCTS);\\n        require(_supportRequiredPct < PCT_BASE, ERROR_INIT_SUPPORT_TOO_BIG);\\n\\n        token = _token;\\n        supportRequiredPct = _supportRequiredPct;\\n        minAcceptQuorumPct = _minAcceptQuorumPct;\\n        voteTime = _voteTime;\\n    }\\n\\n    /**\\n     * @notice Change required support to `@formatPct(_supportRequiredPct)`%\\n     * @param _supportRequiredPct New required support\\n     */\\n    function changeSupportRequiredPct(uint64 _supportRequiredPct)\\n        external\\n        authP(MODIFY_SUPPORT_ROLE, arr(uint256(_supportRequiredPct), uint256(supportRequiredPct)))\\n    {\\n        require(minAcceptQuorumPct <= _supportRequiredPct, ERROR_CHANGE_SUPPORT_PCTS);\\n        require(_supportRequiredPct < PCT_BASE, ERROR_CHANGE_SUPPORT_TOO_BIG);\\n        supportRequiredPct = _supportRequiredPct;\\n\\n        emit ChangeSupportRequired(_supportRequiredPct);\\n    }\\n\\n    /**\\n     * @notice Change minimum acceptance quorum to `@formatPct(_minAcceptQuorumPct)`%\\n     * @param _minAcceptQuorumPct New acceptance quorum\\n     */\\n    function changeMinAcceptQuorumPct(uint64 _minAcceptQuorumPct)\\n        external\\n        authP(MODIFY_QUORUM_ROLE, arr(uint256(_minAcceptQuorumPct), uint256(minAcceptQuorumPct)))\\n    {\\n        require(_minAcceptQuorumPct <= supportRequiredPct, ERROR_CHANGE_QUORUM_PCTS);\\n        minAcceptQuorumPct = _minAcceptQuorumPct;\\n\\n        emit ChangeMinQuorum(_minAcceptQuorumPct);\\n    }\\n\\n    /**\\n     * @notice Create a new vote about \\\"`_metadata`\\\"\\n     * @param _executionScript EVM script to be executed on approval\\n     * @param _metadata Vote metadata\\n     * @return voteId Id for newly created vote\\n     */\\n    function newVote(bytes _executionScript, string _metadata)\\n        external\\n        auth(CREATE_VOTES_ROLE)\\n        returns (uint256 voteId)\\n    {\\n        return _newVote(_executionScript, _metadata, true, true);\\n    }\\n\\n    /**\\n     * @notice Create a new vote about \\\"`_metadata`\\\"\\n     * @param _executionScript EVM script to be executed on approval\\n     * @param _metadata Vote metadata\\n     * @param _castVote Whether to also cast newly created vote\\n     * @param _executesIfDecided Whether to also immediately execute newly created vote if decided\\n     * @return voteId id for newly created vote\\n     */\\n    function newVote(\\n        bytes _executionScript,\\n        string _metadata,\\n        bool _castVote,\\n        bool _executesIfDecided\\n    ) external auth(CREATE_VOTES_ROLE) returns (uint256 voteId) {\\n        return _newVote(_executionScript, _metadata, _castVote, _executesIfDecided);\\n    }\\n\\n    /**\\n     * @notice Vote `_supports ? 'yes' : 'no'` in vote #`_voteId`\\n     * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\\n     *      created via `newVote(),` which requires initialization\\n     * @param _voteId Id for vote\\n     * @param _supports Whether voter supports the vote\\n     * @param _executesIfDecided Whether the vote should execute its action if it becomes decided\\n     */\\n    function vote(\\n        uint256 _voteId,\\n        bool _supports,\\n        bool _executesIfDecided\\n    ) external voteExists(_voteId) {\\n        require(_canVote(_voteId, msg.sender), ERROR_CAN_NOT_VOTE);\\n        _vote(_voteId, _supports, msg.sender, _executesIfDecided);\\n    }\\n\\n    /**\\n     * @notice Execute vote #`_voteId`\\n     * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\\n     *      created via `newVote(),` which requires initialization\\n     * @param _voteId Id for vote\\n     */\\n    function executeVote(uint256 _voteId) external voteExists(_voteId) {\\n        _executeVote(_voteId);\\n    }\\n\\n    // Forwarding fns\\n\\n    /**\\n     * @notice Tells whether the Voting app is a forwarder or not\\n     * @dev IForwarder interface conformance\\n     * @return Always true\\n     */\\n    function isForwarder() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Creates a vote to execute the desired action, and casts a support vote if possible\\n     * @dev IForwarder interface conformance\\n     * @param _evmScript Start vote with script\\n     */\\n    function forward(bytes _evmScript) public {\\n        require(canPerform(msg.sender, CREATE_VOTES_ROLE, arr()), ERROR_CAN_NOT_FORWARD);\\n        _newVote(_evmScript, '', true, true);\\n    }\\n\\n    /**\\n     * @notice Tells whether `_sender` can forward actions or not\\n     * @dev IForwarder interface conformance\\n     * @param _sender Address of the account intending to forward an action\\n     * @return True if the given address can create votes, false otherwise\\n     */\\n    function canForward(address _sender, bytes) public view returns (bool) {\\n        // Note that `canPerform()` implicitly does an initialization check itself\\n        return canPerform(_sender, CREATE_VOTES_ROLE, arr());\\n    }\\n\\n    // Getter fns\\n\\n    /**\\n     * @notice Tells whether a vote #`_voteId` can be executed or not\\n     * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\\n     *      created via `newVote(),` which requires initialization\\n     * @return True if the given vote can be executed, false otherwise\\n     */\\n    function canExecute(uint256 _voteId) public view voteExists(_voteId) returns (bool) {\\n        return _canExecute(_voteId);\\n    }\\n\\n    /**\\n     * @notice Tells whether `_sender` can participate in the vote #`_voteId` or not\\n     * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\\n     *      created via `newVote(),` which requires initialization\\n     * @return True if the given voter can participate a certain vote, false otherwise\\n     */\\n    function canVote(uint256 _voteId, address _voter) public view voteExists(_voteId) returns (bool) {\\n        return _canVote(_voteId, _voter);\\n    }\\n\\n    /**\\n     * @dev Return all information for a vote by its ID\\n     * @param _voteId Vote identifier\\n     * @return Vote open status\\n     * @return Vote executed status\\n     * @return Vote start date\\n     * @return Vote snapshot block\\n     * @return Vote support required\\n     * @return Vote minimum acceptance quorum\\n     * @return Vote yeas amount\\n     * @return Vote nays amount\\n     * @return Vote power\\n     * @return Vote script\\n     */\\n    function getVote(uint256 _voteId)\\n        public\\n        view\\n        voteExists(_voteId)\\n        returns (\\n            bool open,\\n            bool executed,\\n            uint64 startDate,\\n            uint64 snapshotBlock,\\n            uint64 supportRequired,\\n            uint64 minAcceptQuorum,\\n            uint256 yea,\\n            uint256 nay,\\n            uint256 votingPower,\\n            bytes script\\n        )\\n    {\\n        Vote storage vote_ = votes[_voteId];\\n\\n        open = _isVoteOpen(vote_);\\n        executed = vote_.executed;\\n        startDate = vote_.startDate;\\n        snapshotBlock = vote_.snapshotBlock;\\n        supportRequired = vote_.supportRequiredPct;\\n        minAcceptQuorum = vote_.minAcceptQuorumPct;\\n        yea = vote_.yea;\\n        nay = vote_.nay;\\n        votingPower = vote_.votingPower;\\n        script = vote_.executionScript;\\n    }\\n\\n    /**\\n     * @dev Return the state of a voter for a given vote by its ID\\n     * @param _voteId Vote identifier\\n     * @return VoterState of the requested voter for a certain vote\\n     */\\n    function getVoterState(uint256 _voteId, address _voter) public view voteExists(_voteId) returns (VoterState) {\\n        return votes[_voteId].voters[_voter];\\n    }\\n\\n    // Internal fns\\n\\n    /**\\n     * @dev Internal function to create a new vote\\n     * @return voteId id for newly created vote\\n     */\\n    function _newVote(\\n        bytes _executionScript,\\n        string _metadata,\\n        bool _castVote,\\n        bool _executesIfDecided\\n    ) internal returns (uint256 voteId) {\\n        uint64 snapshotBlock = getBlockNumber64() - 1; // avoid double voting in this very block\\n        uint256 votingPower = IVotingToken(token).getDelegatedSupplyByBlockNumber(snapshotBlock);\\n        require(votingPower > 0, ERROR_NO_VOTING_POWER);\\n\\n        voteId = votesLength++;\\n\\n        Vote storage vote_ = votes[voteId];\\n        vote_.startDate = getTimestamp64();\\n        vote_.snapshotBlock = snapshotBlock;\\n        vote_.supportRequiredPct = supportRequiredPct;\\n        vote_.minAcceptQuorumPct = minAcceptQuorumPct;\\n        vote_.votingPower = votingPower;\\n        vote_.executionScript = _executionScript;\\n\\n        emit StartVote(voteId, msg.sender, _metadata);\\n\\n        if (_castVote && _canVote(voteId, msg.sender)) {\\n            _vote(voteId, true, msg.sender, _executesIfDecided);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to cast a vote. It assumes the queried vote exists.\\n     */\\n    function _vote(\\n        uint256 _voteId,\\n        bool _supports,\\n        address _voter,\\n        bool _executesIfDecided\\n    ) internal {\\n        Vote storage vote_ = votes[_voteId];\\n\\n        // This could re-enter, though we can assume the governance token is not malicious\\n        uint256 voterStake = IVotingToken(token).getPowerByBlockNumber(_voter, vote_.snapshotBlock);\\n        VoterState state = vote_.voters[_voter];\\n\\n        // If voter had previously voted, decrease count\\n        if (state == VoterState.Yea) {\\n            vote_.yea = vote_.yea.sub(voterStake);\\n        } else if (state == VoterState.Nay) {\\n            vote_.nay = vote_.nay.sub(voterStake);\\n        }\\n\\n        if (_supports) {\\n            vote_.yea = vote_.yea.add(voterStake);\\n        } else {\\n            vote_.nay = vote_.nay.add(voterStake);\\n        }\\n\\n        vote_.voters[_voter] = _supports ? VoterState.Yea : VoterState.Nay;\\n\\n        emit CastVote(_voteId, _voter, _supports, voterStake);\\n\\n        if (_executesIfDecided && _canExecute(_voteId)) {\\n            // We've already checked if the vote can be executed with `_canExecute()`\\n            _unsafeExecuteVote(_voteId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to execute a vote. It assumes the queried vote exists.\\n     */\\n    function _executeVote(uint256 _voteId) internal {\\n        require(_canExecute(_voteId), ERROR_CAN_NOT_EXECUTE);\\n        _unsafeExecuteVote(_voteId);\\n    }\\n\\n    /**\\n     * @dev Unsafe version of _executeVote that assumes you have already checked if the vote can be executed and exists\\n     */\\n    function _unsafeExecuteVote(uint256 _voteId) internal {\\n        Vote storage vote_ = votes[_voteId];\\n\\n        vote_.executed = true;\\n\\n        bytes memory input = new bytes(0); // TODO: Consider input for voting scripts\\n        runScript(vote_.executionScript, input, new address[](0));\\n\\n        emit ExecuteVote(_voteId);\\n    }\\n\\n    /**\\n     * @dev Internal function to check if a vote can be executed. It assumes the queried vote exists.\\n     * @return True if the given vote can be executed, false otherwise\\n     */\\n    function _canExecute(uint256 _voteId) internal view returns (bool) {\\n        Vote storage vote_ = votes[_voteId];\\n\\n        if (vote_.executed) {\\n            return false;\\n        }\\n\\n        // Voting is already decided\\n        if (_isValuePct(vote_.yea, vote_.votingPower, vote_.supportRequiredPct)) {\\n            return true;\\n        }\\n\\n        // Vote ended?\\n        if (_isVoteOpen(vote_)) {\\n            return false;\\n        }\\n        // Has enough support?\\n        uint256 totalVotes = vote_.yea.add(vote_.nay);\\n        if (!_isValuePct(vote_.yea, totalVotes, vote_.supportRequiredPct)) {\\n            return false;\\n        }\\n        // Has min quorum?\\n        if (!_isValuePct(vote_.yea, vote_.votingPower, vote_.minAcceptQuorumPct)) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Internal function to check if a voter can participate on a vote. It assumes the queried vote exists.\\n     * @return True if the given voter can participate a certain vote, false otherwise\\n     */\\n    function _canVote(uint256 _voteId, address _voter) internal view returns (bool) {\\n        Vote storage vote_ = votes[_voteId];\\n        return _isVoteOpen(vote_) && IVotingToken(token).getPowerByBlockNumber(_voter, vote_.snapshotBlock) > 0;\\n    }\\n\\n    /**\\n     * @dev Internal function to check if a vote is still open\\n     * @return True if the given vote is open, false otherwise\\n     */\\n    function _isVoteOpen(Vote storage vote_) internal view returns (bool) {\\n        return getTimestamp64() < vote_.startDate.add(voteTime) && !vote_.executed;\\n    }\\n\\n    /**\\n     * @dev Calculates whether `_value` is more than a percentage `_pct` of `_total`\\n     */\\n    function _isValuePct(\\n        uint256 _value,\\n        uint256 _total,\\n        uint256 _pct\\n    ) internal pure returns (bool) {\\n        if (_total == 0) {\\n            return false;\\n        }\\n\\n        uint256 computedPct = _value.mul(PCT_BASE) / _total;\\n        return computedPct > _pct;\\n    }\\n}\\n\",\"keccak256\":\"0x99bfaffba1f1810b7e3f16eb4470ac3c0185df6e18afb3609ae6bf1e360d76ac\"},\"contracts/apps/VotesForwarder.sol\":{\"content\":\"// SPDX-License-Identitifer: GPL-3.0-or-later\\n\\npragma solidity 0.4.24;\\n\\nimport '@aragon/os/contracts/apps/AragonApp.sol';\\nimport '@aragon/os/contracts/common/IForwarder.sol';\\nimport '@aragon/os/contracts/lib/math/SafeMath.sol';\\nimport '../interfaces/IVotingToken.sol';\\n\\ncontract VotesForwarder is IForwarder, AragonApp {\\n    using SafeMath for uint256;\\n\\n    bytes32 public constant FANTOM_ROLE = keccak256('FANTOM_ROLE');\\n\\n    string private constant ERROR_CALLER_NOT_TOKEN = 'VF_CALLER_NOT_TOKEN';\\n    string private constant ERROR_CAN_NOT_FORWARD = 'VF_CAN_NOT_FORWARD';\\n\\n    IVotingToken public token;\\n\\n    modifier onlyToken() {\\n        require(msg.sender == address(token), ERROR_CALLER_NOT_TOKEN);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize VotesForwarder for `_token.symbol(): string`\\n     * @param _token IVotingToken address for the managed token\\n     */\\n    function initialize(address _token) external onlyInit {\\n        initialized();\\n        token = IVotingToken(_token);\\n    }\\n\\n    function isForwarder() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Execute desired action as a token holder\\n     * @dev IForwarder interface conformance. Forwards any token holder action.\\n     * @param _evmScript Script being executed\\n     */\\n    function forward(bytes _evmScript) public {\\n        require(hasInitialized() && token.getPowerByBlockNumber(msg.sender, block.number) > 0, ERROR_CAN_NOT_FORWARD);\\n        bytes memory input = new bytes(0); // TODO: Consider input for this\\n\\n        // Add the managed token to the blacklist to disallow a token holder from executing actions\\n        // on the token controller's (this contract) behalf\\n        address[] memory blacklist = new address[](1);\\n        blacklist[0] = address(token);\\n\\n        runScript(_evmScript, input, blacklist);\\n    }\\n\\n    function canForward(address _sender, bytes) public view returns (bool) {\\n        return hasInitialized() && token.getPowerByBlockNumber(_sender, block.number) > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x16b5e790d481825ad79c5c8307af993022428a11fdbfcfb4645a37555123f8fd\"},\"contracts/interfaces/IVotingToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.4.24;\\n\\n/**\\n * @title IVotingToken\\n * @author Lens Protocol\\n *\\n * @notice This is the interface for the FollowNFT *** this has been downgraded to 0.4.24 to fit Aragon Classic\\n */\\ninterface IVotingToken {\\n    /**\\n     * @notice Initializes the follow NFT, setting the hub as the privileged minter and storing the associated profile ID.\\n     *\\n     * @param profileId The token ID of the profile in the hub associated with this followNFT, used for transfer hooks.\\n     */\\n    function initialize(uint256 profileId) external;\\n\\n    /**\\n     * @notice Mints a follow NFT to the specified address. This can only be called by the hub, and is called\\n     * upon follow.\\n     *\\n     * @param to The address to mint the NFT to.\\n     *\\n     * @return uint256 An interger representing the minted token ID.\\n     */\\n    function mint(address to) external returns (uint256);\\n\\n    /**\\n     * @notice Delegates the caller's governance power to the given delegatee address.\\n     *\\n     * @param delegatee The delegatee address to delegate governance power to.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @notice Delegates the delegator's governance power via meta-tx to the given delegatee address.\\n     *\\n     * @param delegator The delegator address, who is the signer.\\n     * @param delegatee The delegatee address, who is receiving the governance power delegation.\\n     * @param sig The EIP712Signature struct containing the necessary parameters to recover the delegator's signature.\\n     */\\n    // function delegateBySig(\\n    //     address delegator,\\n    //     address delegatee,\\n    //     EIP712Signature sig\\n    // ) external;\\n\\n    /**\\n     * @notice Returns the governance power for a given user at a specified block number.\\n     *\\n     * @param user The user to query governance power for.\\n     * @param blockNumber The block number to query the user's governance power at.\\n     *\\n     * @return uint256 The power of the given user at the given block number.\\n     */\\n    function getPowerByBlockNumber(address user, uint256 blockNumber) external returns (uint256);\\n\\n    /**\\n     * @notice Returns the total delegated supply at a specified block number. This is the sum of all\\n     * current available voting power at a given block.\\n     *\\n     * @param blockNumber The block number to query the delegated supply at.\\n     *\\n     * @return uint256 The delegated supply at the given block number.\\n     */\\n    function getDelegatedSupplyByBlockNumber(uint256 blockNumber) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xfc65444b8e9cab24057f8be9a44600f694b130d6c7f8c0748b5050751f9001f9\"}},\"version\":1}",
  "bytecode": "0x60806040527f83db27ec048876d414097dca45d6d5aebef29349eb9e8634f31d32595f5307796000557fbb8e3a480e6426147fffada9d3aae63d7757e5fea58ece97b535c7b021badc946001557f9ac98dc5f995bf0211ed589ef022719d1487e5cb2bab505676f0d084c07cf89a60025534801561007c57600080fd5b5060405160c080611e4283398101604090815281516020830151918301516060840151608085015160a09095015160038054600160a060020a0319908116600160a060020a0398891617909155600580548216928816929092179091556004805482169287169290921790915560068054821693861693909317909255600780548316938516939093179092556008805490911692909116919091179055611d19806101296000396000f3006080604052600436106100825763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632b0ea80481146100875780635a29426c146100c557806363bf7135146101a457806372af8193146101b9578063b4e0bdef146101f5578063bf53b5e11461028f578063cac2699b146102a4575b600080fd5b34801561009357600080fd5b5061009c6102cb565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156100d157600080fd5b506100dd6004356102e7565b6040805173ffffffffffffffffffffffffffffffffffffffff808916602080840191909152888216938301939093528681166060830152858116608083015284811660a0830152831660c082015260e08082528951908201528851909182916101008301918b019080838360005b8381101561016357818101518382015260200161014b565b50505050905090810190601f1680156101905780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156101b057600080fd5b5061009c6104a1565b3480156101c557600080fd5b506101f36004803573ffffffffffffffffffffffffffffffffffffffff1690602480359081019101356104bd565b005b34801561020157600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101f395833573ffffffffffffffffffffffffffffffffffffffff1695369560449491939091019190819084018382808284375050604080516060818101909252959897968181019695509350600392508491508390808284375093965061054095505050505050565b34801561029b57600080fd5b5061009c611151565b3480156102b057600080fd5b506102b961116d565b60408051918252519081900360200190f35b60085473ffffffffffffffffffffffffffffffffffffffff1681565b6000818152600a602090815260408083208054825160026001831615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190921691909104601f8101859004850282018501909352828152606094938493849384938493849383918301828280156103a45780601f10610379576101008083540402835291602001916103a4565b820191906000526020600020905b81548152906001019060200180831161038757829003601f168201915b505050505097508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1696508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1695508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1694508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693508060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692508060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919395979092949650565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b604080516020601f84018190048102820181019092528281526706f05b59d3b200009166b1a2bc2ec50000916203f48091610538918891889088908190840183828082843750506040805160608101825267ffffffffffffffff808d1682528b811660208301528a1691810191909152935061054092505050565b505050505050565b60048054604080517f21687444000000000000000000000000000000000000000000000000000000008152309381019390935251600092839283928392839273ffffffffffffffffffffffffffffffffffffffff169163216874449160248082019260209290919082900301818787803b1580156105bd57600080fd5b505af11580156105d1573d6000803e3d6000fd5b505050506040513d60208110156105e757600080fd5b5051604080517fde287359000000000000000000000000000000000000000000000000000000008152905191965073ffffffffffffffffffffffffffffffffffffffff87169163de287359916004808201926020929091908290030181600087803b15801561065557600080fd5b505af1158015610669573d6000803e3d6000fd5b505050506040513d602081101561067f57600080fd5b5051604080517f8ea8dc9d000000000000000000000000000000000000000000000000000000008152905191955073ffffffffffffffffffffffffffffffffffffffff8087169263be0384789230928a9290831691638ea8dc9d9160048083019260209291908290030181600087803b1580156106fb57600080fd5b505af115801561070f573d6000803e3d6000fd5b505050506040513d602081101561072557600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff871602815273ffffffffffffffffffffffffffffffffffffffff948516600482015292909316602483015260448201523060648201529051608480830192600092919082900301818387803b1580156107a657600080fd5b505af11580156107ba573d6000803e3d6000fd5b505050506107c785611173565b92506107d485898861137f565b91506107e0858961153b565b90508373ffffffffffffffffffffffffffffffffffffffff1663be03847883848573ffffffffffffffffffffffffffffffffffffffff16633c624c756040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561086457600080fd5b505af1158015610878573d6000803e3d6000fd5b505050506040513d602081101561088e57600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff871602815273ffffffffffffffffffffffffffffffffffffffff94851660048201529284166024840152604483019190915291861660648201529051608480830192600092919082900301818387803b15801561091357600080fd5b505af1158015610927573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663be03847883848573ffffffffffffffffffffffffffffffffffffffff166362de7e5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156109ad57600080fd5b505af11580156109c1573d6000803e3d6000fd5b505050506040513d60208110156109d757600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff871602815273ffffffffffffffffffffffffffffffffffffffff94851660048201529284166024840152604483019190915291861660648201529051608480830192600092919082900301818387803b158015610a5c57600080fd5b505af1158015610a70573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663be03847882848573ffffffffffffffffffffffffffffffffffffffff1663be2c64d46040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610af657600080fd5b505af1158015610b0a573d6000803e3d6000fd5b505050506040513d6020811015610b2057600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff871602815273ffffffffffffffffffffffffffffffffffffffff94851660048201529284166024840152604483019190915291861660648201529051608480830192600092919082900301818387803b158015610ba557600080fd5b505af1158015610bb9573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663be03847883858673ffffffffffffffffffffffffffffffffffffffff16635fa5e4e66040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610c3f57600080fd5b505af1158015610c53573d6000803e3d6000fd5b505050506040513d6020811015610c6957600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff871602815273ffffffffffffffffffffffffffffffffffffffff94851660048201529284166024840152604483019190915291861660648201529051608480830192600092919082900301818387803b158015610cee57600080fd5b505af1158015610d02573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663be03847883858673ffffffffffffffffffffffffffffffffffffffff1663368c3c346040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610d8857600080fd5b505af1158015610d9c573d6000803e3d6000fd5b505050506040513d6020811015610db257600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff871602815273ffffffffffffffffffffffffffffffffffffffff94851660048201529284166024840152604483019190915291861660648201529051608480830192600092919082900301818387803b158015610e3757600080fd5b505af1158015610e4b573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663be0384786000838473ffffffffffffffffffffffffffffffffffffffff1663cb668ec86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ed257600080fd5b505af1158015610ee6573d6000803e3d6000fd5b505050506040513d6020811015610efc57600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff871602815273ffffffffffffffffffffffffffffffffffffffff9485166004820152929093166024830152604482015260006064820181905291516084808301939282900301818387803b158015610f7c57600080fd5b505af1158015610f90573d6000803e3d6000fd5b50505050610f9f8583846116cf565b610fa987866118c2565b6040805160e08101825288815273ffffffffffffffffffffffffffffffffffffffff808816602080840191909152878216838501528682166060840152858216608084015284821660a0840152908b1660c08301526009546000908152600a82529290922081518051929391926110239284920190611c52565b50602082810151600183810180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff9485161790915560408087015160028701805484169186169190911790556060808801516003880180548516918716919091179055608080890151600489018054861691881691909117905560a0808a015160058a018054871691891691909117905560c09099015160069098018054909416978616979097179092556009805490930190925581518b841681528a84169481019490945288831684830152878316908401529085169282019290925290517f13c9f0d046ea61d3735d697d30734cb27c5f45e1440fa7fe84c3e862310e1b6b929181900390910190a15050505050505050565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b604080516004808252602480830184526020830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f8129fc1c0000000000000000000000000000000000000000000000000000000017815260025460085495517f397edd4100000000000000000000000000000000000000000000000000000000815293840181815273ffffffffffffffffffffffffffffffffffffffff9687169385018490526001606486018190526080604487019081528751608488015287516000998a98908c169763397edd419790958b95949093909260a40191908083838e5b8381101561126f578181015183820152602001611257565b50505050905090810190601f16801561129c5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156112be57600080fd5b505af11580156112d2573d6000803e3d6000fd5b505050506040513d60208110156112e857600080fd5b5051600254604080517f8c61757d00000000000000000000000000000000000000000000000000000000815260048101929092525191925073ffffffffffffffffffffffffffffffffffffffff861691638c61757d9160248082019260009290919082900301818387803b15801561135f57600080fd5b505af1158015611373573d6000803e3d6000fd5b50929695505050505050565b60008054600654604080517f80cd5ac3000000000000000000000000000000000000000000000000000000008152600481019390935273ffffffffffffffffffffffffffffffffffffffff9182166024840152518392918716916380cd5ac391604480830192602092919082900301818787803b1580156113ff57600080fd5b505af1158015611413573d6000803e3d6000fd5b505050506040513d602081101561142957600080fd5b50518351602085015160408087015181517fdf3d330500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a8116600483015267ffffffffffffffff95861660248301529385166044820152931660648401525192935083169163df3d33059160848082019260009290919082900301818387803b1580156114c857600080fd5b505af11580156114dc573d6000803e3d6000fd5b50506000546040805173ffffffffffffffffffffffffffffffffffffffff86168152602081019290925280517f2b183a501d4b1bbd30e6611ebac40ab18a00390e6c6bed324bf92a265c9ce6e3945091829003019150a1949350505050565b600154600754604080517f80cd5ac3000000000000000000000000000000000000000000000000000000008152600481019390935273ffffffffffffffffffffffffffffffffffffffff91821660248401525160009283928616916380cd5ac39160448082019260209290919082900301818787803b1580156115bd57600080fd5b505af11580156115d1573d6000803e3d6000fd5b505050506040513d60208110156115e757600080fd5b5051604080517fc4d66de800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015291519293509083169163c4d66de89160248082019260009290919082900301818387803b15801561165d57600080fd5b505af1158015611671573d6000803e3d6000fd5b50506001546040805173ffffffffffffffffffffffffffffffffffffffff86168152602081019290925280517f2b183a501d4b1bbd30e6611ebac40ab18a00390e6c6bed324bf92a265c9ce6e3945091829003019150a19392505050565b60008373ffffffffffffffffffffffffffffffffffffffff1663de2873596040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561173557600080fd5b505af1158015611749573d6000803e3d6000fd5b505050506040513d602081101561175f57600080fd5b5051604080517f8ea8dc9d00000000000000000000000000000000000000000000000000000000815290519192506118099183918791879173ffffffffffffffffffffffffffffffffffffffff841691638ea8dc9d916004808201926020929091908290030181600087803b1580156117d757600080fd5b505af11580156117eb573d6000803e3d6000fd5b505050506040513d602081101561180157600080fd5b505186611a85565b6118738182858473ffffffffffffffffffffffffffffffffffffffff16633d6ab68f6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156117d757600080fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8616815290517f17592627a66846ce06d92a1708275bc653b2a3f34aec855584b819872a8ba4139181900360200190a150505050565b600554604051835173ffffffffffffffffffffffffffffffffffffffff9092169163d22057a99185916020918201918291908401908083835b6020831061193857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016118fb565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106119b957805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161197c565b5181516020939093036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01801990911692169190911790526040805191909301819003812063ffffffff87167c0100000000000000000000000000000000000000000000000000000000028252600482015273ffffffffffffffffffffffffffffffffffffffff88166024820152915160448084019550600094509092839003019050818387803b158015611a7157600080fd5b505af1158015610538573d6000803e3d6000fd5b604080517f0a8ed3db00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152868116602483015260448201859052915191871691630a8ed3db9160648082019260009290919082900301818387803b158015611b0557600080fd5b505af1158015611b19573d6000803e3d6000fd5b5050604080517f9d0effdb00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff88811660248301526044820187905291519189169350639d0effdb925060648082019260009290919082900301818387803b158015611b9b57600080fd5b505af1158015611baf573d6000803e3d6000fd5b5050604080517fafd925df00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528881166024830152604482018790529151918916935063afd925df925060648082019260009290919082900301818387803b158015611c3357600080fd5b505af1158015611c47573d6000803e3d6000fd5b505050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611c9357805160ff1916838001178555611cc0565b82800160010185558215611cc0579182015b82811115611cc0578251825591602001919060010190611ca5565b50611ccc929150611cd0565b5090565b611cea91905b80821115611ccc5760008155600101611cd6565b905600a165627a7a723058205d87abac061316e01b917fc1eb763f7b2ba2b4445805000d7a238eb6f6ca21a20029",
  "deployedBytecode": "0x6080604052600436106100825763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632b0ea80481146100875780635a29426c146100c557806363bf7135146101a457806372af8193146101b9578063b4e0bdef146101f5578063bf53b5e11461028f578063cac2699b146102a4575b600080fd5b34801561009357600080fd5b5061009c6102cb565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156100d157600080fd5b506100dd6004356102e7565b6040805173ffffffffffffffffffffffffffffffffffffffff808916602080840191909152888216938301939093528681166060830152858116608083015284811660a0830152831660c082015260e08082528951908201528851909182916101008301918b019080838360005b8381101561016357818101518382015260200161014b565b50505050905090810190601f1680156101905780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156101b057600080fd5b5061009c6104a1565b3480156101c557600080fd5b506101f36004803573ffffffffffffffffffffffffffffffffffffffff1690602480359081019101356104bd565b005b34801561020157600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101f395833573ffffffffffffffffffffffffffffffffffffffff1695369560449491939091019190819084018382808284375050604080516060818101909252959897968181019695509350600392508491508390808284375093965061054095505050505050565b34801561029b57600080fd5b5061009c611151565b3480156102b057600080fd5b506102b961116d565b60408051918252519081900360200190f35b60085473ffffffffffffffffffffffffffffffffffffffff1681565b6000818152600a602090815260408083208054825160026001831615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190921691909104601f8101859004850282018501909352828152606094938493849384938493849383918301828280156103a45780601f10610379576101008083540402835291602001916103a4565b820191906000526020600020905b81548152906001019060200180831161038757829003601f168201915b505050505097508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1696508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1695508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1694508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693508060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692508060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919395979092949650565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b604080516020601f84018190048102820181019092528281526706f05b59d3b200009166b1a2bc2ec50000916203f48091610538918891889088908190840183828082843750506040805160608101825267ffffffffffffffff808d1682528b811660208301528a1691810191909152935061054092505050565b505050505050565b60048054604080517f21687444000000000000000000000000000000000000000000000000000000008152309381019390935251600092839283928392839273ffffffffffffffffffffffffffffffffffffffff169163216874449160248082019260209290919082900301818787803b1580156105bd57600080fd5b505af11580156105d1573d6000803e3d6000fd5b505050506040513d60208110156105e757600080fd5b5051604080517fde287359000000000000000000000000000000000000000000000000000000008152905191965073ffffffffffffffffffffffffffffffffffffffff87169163de287359916004808201926020929091908290030181600087803b15801561065557600080fd5b505af1158015610669573d6000803e3d6000fd5b505050506040513d602081101561067f57600080fd5b5051604080517f8ea8dc9d000000000000000000000000000000000000000000000000000000008152905191955073ffffffffffffffffffffffffffffffffffffffff8087169263be0384789230928a9290831691638ea8dc9d9160048083019260209291908290030181600087803b1580156106fb57600080fd5b505af115801561070f573d6000803e3d6000fd5b505050506040513d602081101561072557600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff871602815273ffffffffffffffffffffffffffffffffffffffff948516600482015292909316602483015260448201523060648201529051608480830192600092919082900301818387803b1580156107a657600080fd5b505af11580156107ba573d6000803e3d6000fd5b505050506107c785611173565b92506107d485898861137f565b91506107e0858961153b565b90508373ffffffffffffffffffffffffffffffffffffffff1663be03847883848573ffffffffffffffffffffffffffffffffffffffff16633c624c756040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561086457600080fd5b505af1158015610878573d6000803e3d6000fd5b505050506040513d602081101561088e57600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff871602815273ffffffffffffffffffffffffffffffffffffffff94851660048201529284166024840152604483019190915291861660648201529051608480830192600092919082900301818387803b15801561091357600080fd5b505af1158015610927573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663be03847883848573ffffffffffffffffffffffffffffffffffffffff166362de7e5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156109ad57600080fd5b505af11580156109c1573d6000803e3d6000fd5b505050506040513d60208110156109d757600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff871602815273ffffffffffffffffffffffffffffffffffffffff94851660048201529284166024840152604483019190915291861660648201529051608480830192600092919082900301818387803b158015610a5c57600080fd5b505af1158015610a70573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663be03847882848573ffffffffffffffffffffffffffffffffffffffff1663be2c64d46040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610af657600080fd5b505af1158015610b0a573d6000803e3d6000fd5b505050506040513d6020811015610b2057600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff871602815273ffffffffffffffffffffffffffffffffffffffff94851660048201529284166024840152604483019190915291861660648201529051608480830192600092919082900301818387803b158015610ba557600080fd5b505af1158015610bb9573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663be03847883858673ffffffffffffffffffffffffffffffffffffffff16635fa5e4e66040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610c3f57600080fd5b505af1158015610c53573d6000803e3d6000fd5b505050506040513d6020811015610c6957600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff871602815273ffffffffffffffffffffffffffffffffffffffff94851660048201529284166024840152604483019190915291861660648201529051608480830192600092919082900301818387803b158015610cee57600080fd5b505af1158015610d02573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663be03847883858673ffffffffffffffffffffffffffffffffffffffff1663368c3c346040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610d8857600080fd5b505af1158015610d9c573d6000803e3d6000fd5b505050506040513d6020811015610db257600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff871602815273ffffffffffffffffffffffffffffffffffffffff94851660048201529284166024840152604483019190915291861660648201529051608480830192600092919082900301818387803b158015610e3757600080fd5b505af1158015610e4b573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663be0384786000838473ffffffffffffffffffffffffffffffffffffffff1663cb668ec86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ed257600080fd5b505af1158015610ee6573d6000803e3d6000fd5b505050506040513d6020811015610efc57600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff871602815273ffffffffffffffffffffffffffffffffffffffff9485166004820152929093166024830152604482015260006064820181905291516084808301939282900301818387803b158015610f7c57600080fd5b505af1158015610f90573d6000803e3d6000fd5b50505050610f9f8583846116cf565b610fa987866118c2565b6040805160e08101825288815273ffffffffffffffffffffffffffffffffffffffff808816602080840191909152878216838501528682166060840152858216608084015284821660a0840152908b1660c08301526009546000908152600a82529290922081518051929391926110239284920190611c52565b50602082810151600183810180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff9485161790915560408087015160028701805484169186169190911790556060808801516003880180548516918716919091179055608080890151600489018054861691881691909117905560a0808a015160058a018054871691891691909117905560c09099015160069098018054909416978616979097179092556009805490930190925581518b841681528a84169481019490945288831684830152878316908401529085169282019290925290517f13c9f0d046ea61d3735d697d30734cb27c5f45e1440fa7fe84c3e862310e1b6b929181900390910190a15050505050505050565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b604080516004808252602480830184526020830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f8129fc1c0000000000000000000000000000000000000000000000000000000017815260025460085495517f397edd4100000000000000000000000000000000000000000000000000000000815293840181815273ffffffffffffffffffffffffffffffffffffffff9687169385018490526001606486018190526080604487019081528751608488015287516000998a98908c169763397edd419790958b95949093909260a40191908083838e5b8381101561126f578181015183820152602001611257565b50505050905090810190601f16801561129c5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156112be57600080fd5b505af11580156112d2573d6000803e3d6000fd5b505050506040513d60208110156112e857600080fd5b5051600254604080517f8c61757d00000000000000000000000000000000000000000000000000000000815260048101929092525191925073ffffffffffffffffffffffffffffffffffffffff861691638c61757d9160248082019260009290919082900301818387803b15801561135f57600080fd5b505af1158015611373573d6000803e3d6000fd5b50929695505050505050565b60008054600654604080517f80cd5ac3000000000000000000000000000000000000000000000000000000008152600481019390935273ffffffffffffffffffffffffffffffffffffffff9182166024840152518392918716916380cd5ac391604480830192602092919082900301818787803b1580156113ff57600080fd5b505af1158015611413573d6000803e3d6000fd5b505050506040513d602081101561142957600080fd5b50518351602085015160408087015181517fdf3d330500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a8116600483015267ffffffffffffffff95861660248301529385166044820152931660648401525192935083169163df3d33059160848082019260009290919082900301818387803b1580156114c857600080fd5b505af11580156114dc573d6000803e3d6000fd5b50506000546040805173ffffffffffffffffffffffffffffffffffffffff86168152602081019290925280517f2b183a501d4b1bbd30e6611ebac40ab18a00390e6c6bed324bf92a265c9ce6e3945091829003019150a1949350505050565b600154600754604080517f80cd5ac3000000000000000000000000000000000000000000000000000000008152600481019390935273ffffffffffffffffffffffffffffffffffffffff91821660248401525160009283928616916380cd5ac39160448082019260209290919082900301818787803b1580156115bd57600080fd5b505af11580156115d1573d6000803e3d6000fd5b505050506040513d60208110156115e757600080fd5b5051604080517fc4d66de800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015291519293509083169163c4d66de89160248082019260009290919082900301818387803b15801561165d57600080fd5b505af1158015611671573d6000803e3d6000fd5b50506001546040805173ffffffffffffffffffffffffffffffffffffffff86168152602081019290925280517f2b183a501d4b1bbd30e6611ebac40ab18a00390e6c6bed324bf92a265c9ce6e3945091829003019150a19392505050565b60008373ffffffffffffffffffffffffffffffffffffffff1663de2873596040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561173557600080fd5b505af1158015611749573d6000803e3d6000fd5b505050506040513d602081101561175f57600080fd5b5051604080517f8ea8dc9d00000000000000000000000000000000000000000000000000000000815290519192506118099183918791879173ffffffffffffffffffffffffffffffffffffffff841691638ea8dc9d916004808201926020929091908290030181600087803b1580156117d757600080fd5b505af11580156117eb573d6000803e3d6000fd5b505050506040513d602081101561180157600080fd5b505186611a85565b6118738182858473ffffffffffffffffffffffffffffffffffffffff16633d6ab68f6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156117d757600080fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8616815290517f17592627a66846ce06d92a1708275bc653b2a3f34aec855584b819872a8ba4139181900360200190a150505050565b600554604051835173ffffffffffffffffffffffffffffffffffffffff9092169163d22057a99185916020918201918291908401908083835b6020831061193857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016118fb565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106119b957805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161197c565b5181516020939093036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01801990911692169190911790526040805191909301819003812063ffffffff87167c0100000000000000000000000000000000000000000000000000000000028252600482015273ffffffffffffffffffffffffffffffffffffffff88166024820152915160448084019550600094509092839003019050818387803b158015611a7157600080fd5b505af1158015610538573d6000803e3d6000fd5b604080517f0a8ed3db00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152868116602483015260448201859052915191871691630a8ed3db9160648082019260009290919082900301818387803b158015611b0557600080fd5b505af1158015611b19573d6000803e3d6000fd5b5050604080517f9d0effdb00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff88811660248301526044820187905291519189169350639d0effdb925060648082019260009290919082900301818387803b158015611b9b57600080fd5b505af1158015611baf573d6000803e3d6000fd5b5050604080517fafd925df00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528881166024830152604482018790529151918916935063afd925df925060648082019260009290919082900301818387803b158015611c3357600080fd5b505af1158015611c47573d6000803e3d6000fd5b505050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611c9357805160ff1916838001178555611cc0565b82800160010185558215611cc0579182015b82811115611cc0578251825591602001919060010190611ca5565b50611ccc929150611cd0565b5090565b611cea91905b80821115611ccc5760008155600101611cd6565b905600a165627a7a723058205d87abac061316e01b917fc1eb763f7b2ba2b4445805000d7a238eb6f6ca21a20029",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}