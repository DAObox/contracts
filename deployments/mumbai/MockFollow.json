{
  "address": "0x376777A9056BF77594F8d0e6b4a6b16436df2699",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BlockNumberInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Initialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwnerOrApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SignatureExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SignatureInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroSpender",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "HUB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.EIP712Signature",
          "name": "sig",
          "type": "tuple"
        }
      ],
      "name": "burnWithSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.EIP712Signature",
          "name": "sig",
          "type": "tuple"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getDelegatedSupplyByBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPowerByBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "profileId",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "mintTimestampOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.EIP712Signature",
          "name": "sig",
          "type": "tuple"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.EIP712Signature",
          "name": "sig",
          "type": "tuple"
        }
      ],
      "name": "permitForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sigNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenDataOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "mintTimestamp",
              "type": "uint96"
            }
          ],
          "internalType": "struct IERC721Time.TokenData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa9cab0066585c336bae9fadcf3a6271e7362d6d4d05d5dd60fdef03f297a8a2b",
  "receipt": {
    "to": null,
    "from": "0x0533F9d586ABd3334a0E90cA162602D6574F0493",
    "contractAddress": "0x376777A9056BF77594F8d0e6b4a6b16436df2699",
    "transactionIndex": 38,
    "gasUsed": "3060691",
    "logsBloom": "0x
    "blockHash": "0xce643c1f9ce0996c3a882c0203f22f03d0ea74b78ca1fa8d97ba253e37e185bd",
    "transactionHash": "0xa9cab0066585c336bae9fadcf3a6271e7362d6d4d05d5dd60fdef03f297a8a2b",
    "logs": [
      {
        "transactionIndex": 38,
        "blockNumber": 28420381,
        "transactionHash": "0xa9cab0066585c336bae9fadcf3a6271e7362d6d4d05d5dd60fdef03f297a8a2b",
        "address": "0x376777A9056BF77594F8d0e6b4a6b16436df2699",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000533f9d586abd3334a0e90ca162602d6574f0493",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 193,
        "blockHash": "0xce643c1f9ce0996c3a882c0203f22f03d0ea74b78ca1fa8d97ba253e37e185bd"
      },
      {
        "transactionIndex": 38,
        "blockNumber": 28420381,
        "transactionHash": "0xa9cab0066585c336bae9fadcf3a6271e7362d6d4d05d5dd60fdef03f297a8a2b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000533f9d586abd3334a0e90ca162602d6574f0493",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001d6b1f94b8378b000000000000000000000000000000000000000000000000094487691084c74800000000000000000000000000000000000000000000000005845a3b3b1e75ae00000000000000000000000000000000000000000000000009271c497bcc8fbd00000000000000000000000000000000000000000000000005a1c55acfd6ad39",
        "logIndex": 194,
        "blockHash": "0xce643c1f9ce0996c3a882c0203f22f03d0ea74b78ca1fa8d97ba253e37e185bd"
      }
    ],
    "blockNumber": 28420381,
    "cumulativeGasUsed": "11070752",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9c0d46321f1cdde8d30917d7642b05a6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BlockNumberInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Initialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerOrApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HUB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.EIP712Signature\",\"name\":\"sig\",\"type\":\"tuple\"}],\"name\":\"burnWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.EIP712Signature\",\"name\":\"sig\",\"type\":\"tuple\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getDelegatedSupplyByBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPowerByBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mintTimestampOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.EIP712Signature\",\"name\":\"sig\",\"type\":\"tuple\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.EIP712Signature\",\"name\":\"sig\",\"type\":\"tuple\"}],\"name\":\"permitForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sigNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenDataOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"mintTimestamp\",\"type\":\"uint96\"}],\"internalType\":\"struct IERC721Time.TokenData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Lens Protocol\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"params\":{\"tokenId\":\"The token ID of the token to burn.\"}},\"burnWithSig(uint256,(uint8,bytes32,bytes32,uint256))\":{\"params\":{\"sig\":\"The EIP712 signature struct.\",\"tokenId\":\"The token ID of the token to burn.\"}},\"delegate(address)\":{\"params\":{\"delegatee\":\"The delegatee address to delegate governance power to.\"}},\"delegateBySig(address,address,(uint8,bytes32,bytes32,uint256))\":{\"params\":{\"delegatee\":\"The delegatee address, who is receiving the governance power delegation.\",\"delegator\":\"The delegator address, who is the signer.\",\"sig\":\"The EIP712Signature struct containing the necessary parameters to recover the delegator's signature.\"}},\"exists(uint256)\":{\"details\":\"See {IERC721Time-exists}\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getDelegatedSupplyByBlockNumber(uint256)\":{\"params\":{\"blockNumber\":\"The block number to query the delegated supply at.\"},\"returns\":{\"_0\":\"uint256 The delegated supply at the given block number.\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"bytes32 The domain separator.\"}},\"getPowerByBlockNumber(address,uint256)\":{\"params\":{\"blockNumber\":\"The block number to query the user's governance power at.\",\"user\":\"The user to query governance power for.\"},\"returns\":{\"_0\":\"uint256 The power of the given user at the given block number.\"}},\"initialize(uint256)\":{\"params\":{\"profileId\":\"The token ID of the profile in the hub associated with this followNFT, used for transfer hooks.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(address)\":{\"params\":{\"to\":\"The address to mint the NFT to.\"},\"returns\":{\"_0\":\"uint256 An interger representing the minted token ID.\"}},\"mintTimestampOf(uint256)\":{\"details\":\"See {IERC721Time-mintTimestampOf}\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"permit(address,uint256,(uint8,bytes32,bytes32,uint256))\":{\"params\":{\"sig\":\"The EIP712 signature struct.\",\"spender\":\"The NFT spender.\",\"tokenId\":\"The NFT token ID to approve.\"}},\"permitForAll(address,address,bool,(uint8,bytes32,bytes32,uint256))\":{\"params\":{\"approved\":\"Whether to approve or revoke approval from the operator.\",\"operator\":\"The operator to approve.\",\"owner\":\"The owner to set operator approvals for.\",\"sig\":\"The EIP712 signature struct.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenDataOf(uint256)\":{\"details\":\"See {IERC721Time-mintTimestampOf}\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"This returns the follow NFT URI fetched from the hub.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"title\":\"FollowNFT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Burns an NFT, removing it from circulation and essentially destroying it. This function can only be called by the NFT to burn's owner.\"},\"burnWithSig(uint256,(uint8,bytes32,bytes32,uint256))\":{\"notice\":\"Implementation of an EIP-712 permit-style function for token burning. Allows anyone to burn a token on behalf of the owner with a signature.\"},\"delegate(address)\":{\"notice\":\"Delegates the caller's governance power to the given delegatee address.\"},\"delegateBySig(address,address,(uint8,bytes32,bytes32,uint256))\":{\"notice\":\"Delegates the delegator's governance power via meta-tx to the given delegatee address.\"},\"getDelegatedSupplyByBlockNumber(uint256)\":{\"notice\":\"Returns the total delegated supply at a specified block number. This is the sum of all current available voting power at a given block.\"},\"getDomainSeparator()\":{\"notice\":\"Returns the domain separator for this NFT contract.\"},\"getPowerByBlockNumber(address,uint256)\":{\"notice\":\"Returns the governance power for a given user at a specified block number.\"},\"initialize(uint256)\":{\"notice\":\"Initializes the follow NFT, setting the hub as the privileged minter and storing the associated profile ID.\"},\"mint(address)\":{\"notice\":\"Mints a follow NFT to the specified address. This can only be called by the hub, and is called upon follow.\"},\"permit(address,uint256,(uint8,bytes32,bytes32,uint256))\":{\"notice\":\"Implementation of an EIP-712 permit function for an ERC-721 NFT. We don't need to check if the tokenId exists, since the function calls ownerOf(tokenId), which reverts if the tokenId does not exist.\"},\"permitForAll(address,address,bool,(uint8,bytes32,bytes32,uint256))\":{\"notice\":\"Implementation of an EIP-712 permit-style function for ERC-721 operator approvals. Allows an operator address to control all NFTs a given owner owns.\"}},\"notice\":\"This contract is the NFT that is minted upon following a given profile. It is cloned upon first follow for a given profile, and includes built-in governance power and delegation mechanisms. NOTE: This contract assumes total NFT supply for this follow NFT will never exceed 2^128 - 1\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/MockFollow.sol\":\"MockFollow\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/lens/core/base/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport './ERC721Time.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n *\\n * NOTE: Modified from Openzeppelin to inherit from a modified ERC721 contract.\\n */\\nabstract contract ERC721Enumerable is ERC721Time, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165, ERC721Time)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(index < ERC721Time.balanceOf(owner), 'ERC721Enumerable: owner index out of bounds');\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(\\n            index < ERC721Enumerable.totalSupply(),\\n            'ERC721Enumerable: global index out of bounds'\\n        );\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Time.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Time.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xd08595c71e21dd97c7b71e713dd802ae6ba0c10e65b8a7fd888053d7e69ab658\",\"license\":\"MIT\"},\"contracts/lens/core/base/ERC721Time.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport './IERC721Time.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n *\\n * Modifications:\\n * 1. Refactored _operatorApprovals setter into an internal function to allow meta-transactions.\\n * 2. Constructor replaced with an initializer.\\n * 3. Mint timestamp is now stored in a TokenData struct alongside the owner address.\\n */\\nabstract contract ERC721Time is Context, ERC165, IERC721Time, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to token Data (owner address and mint timestamp uint96), this\\n    // replaces the original mapping(uint256 => address) private _owners;\\n    mapping(uint256 => IERC721Time.TokenData) private _tokenData;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the ERC721 name and symbol.\\n     *\\n     * @param name The name to set.\\n     * @param symbol The symbol to set.\\n     */\\n    function __ERC721_Init(string calldata name, string calldata symbol) internal {\\n        _name = name;\\n        _symbol = symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), 'ERC721: balance query for the zero address');\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _tokenData[tokenId].owner;\\n        require(owner != address(0), 'ERC721: owner query for nonexistent token');\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Time-mintTimestampOf}\\n     */\\n    function mintTimestampOf(uint256 tokenId) public view virtual override returns (uint256) {\\n        uint96 mintTimestamp = _tokenData[tokenId].mintTimestamp;\\n        require(mintTimestamp != 0, 'ERC721: mint timestamp query for nonexistent token');\\n        return mintTimestamp;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Time-mintTimestampOf}\\n     */\\n    function tokenDataOf(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (IERC721Time.TokenData memory)\\n    {\\n        require(_exists(tokenId), 'ERC721: token data query for nonexistent token');\\n        return _tokenData[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Time-exists}\\n     */\\n    function exists(uint256 tokenId) public view virtual override returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), 'ERC721Metadata: URI query for nonexistent token');\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Time.ownerOf(tokenId);\\n        require(to != owner, 'ERC721: approval to current owner');\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            'ERC721: approve caller is not owner nor approved for all'\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), 'ERC721: approved query for nonexistent token');\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), 'ERC721: approve to caller');\\n\\n        _setOperatorApproval(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            'ERC721: transfer caller is not owner nor approved'\\n        );\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            'ERC721: transfer caller is not owner nor approved'\\n        );\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, _data),\\n            'ERC721: transfer to non ERC721Receiver implementer'\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _tokenData[tokenId].owner != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        require(_exists(tokenId), 'ERC721: operator query for nonexistent token');\\n        address owner = ERC721Time.ownerOf(tokenId);\\n        return (spender == owner ||\\n            getApproved(tokenId) == spender ||\\n            isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            'ERC721: transfer to non ERC721Receiver implementer'\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), 'ERC721: mint to the zero address');\\n        require(!_exists(tokenId), 'ERC721: token already minted');\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _tokenData[tokenId].owner = to;\\n        _tokenData[tokenId].mintTimestamp = uint96(block.timestamp);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Time.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _tokenData[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Time.ownerOf(tokenId) == from, 'ERC721: transfer of token that is not own');\\n        require(to != address(0), 'ERC721: transfer to the zero address');\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _tokenData[tokenId].owner = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Time.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Refactored from the original OZ ERC721 implementation: approve or revoke approval from\\n     * `operator` to operate on all tokens owned by `owner`.\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setOperatorApproval(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (\\n                bytes4 retval\\n            ) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert('ERC721: transfer to non ERC721Receiver implementer');\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x337fd56e6d2aa083620573520316837a31fe16dcc93592459b4ebeaff725efac\",\"license\":\"MIT\"},\"contracts/lens/core/base/IERC721Time.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/**\\n * @title IERC721Time\\n * @author Lens Protocol\\n *\\n * @notice This is an expansion of the IERC721 interface that includes a struct for token data,\\n * which contains the token owner and the mint timestamp as well as associated getters.\\n */\\ninterface IERC721Time is IERC721 {\\n    /**\\n     * @notice Contains the owner address and the mint timestamp for every NFT.\\n     *\\n     * Note: Instead of the owner address in the _tokenOwners private mapping, we now store it in the\\n     * _tokenData mapping, alongside the unchanging mintTimestamp.\\n     *\\n     * @param owner The token owner.\\n     * @param mintTimestamp The mint timestamp.\\n     */\\n    struct TokenData {\\n        address owner;\\n        uint96 mintTimestamp;\\n    }\\n\\n    /**\\n     * @notice Returns the mint timestamp associated with a given NFT, stored only once upon initial mint.\\n     *\\n     * @param tokenId The token ID of the NFT to query the mint timestamp for.\\n     *\\n     * @return uint256 mint timestamp, this is stored as a uint96 but returned as a uint256 to reduce unnecessary\\n     * padding.\\n     */\\n    function mintTimestampOf(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the token data associated with a given NFT. This allows fetching the token owner and\\n     * mint timestamp in a single call.\\n     *\\n     * @param tokenId The token ID of the NFT to query the token data for.\\n     *\\n     * @return TokenData token data struct containing both the owner address and the mint timestamp.\\n     */\\n    function tokenDataOf(uint256 tokenId) external view returns (TokenData memory);\\n\\n    /**\\n     * @notice Returns whether a token with the given token ID exists.\\n     *\\n     * @param tokenId The token ID of the NFT to check existence for.\\n     *\\n     * @return bool True if the token exists.\\n     */\\n    function exists(uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7057c3e378b91935d558f286a4f1f42d48dd51303c5b184803ed140888c378cf\",\"license\":\"MIT\"},\"contracts/lens/core/base/LensNFTBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {ILensNFTBase} from '../../interfaces/ILensNFTBase.sol';\\nimport {Errors} from '../../libraries/Errors.sol';\\nimport {DataTypes} from '../../libraries/DataTypes.sol';\\nimport {Events} from '../../libraries/Events.sol';\\nimport {ERC721Time} from './ERC721Time.sol';\\nimport {ERC721Enumerable} from './ERC721Enumerable.sol';\\n\\n/**\\n * @title LensNFTBase\\n * @author Lens Protocol\\n *\\n * @notice This is an abstract base contract to be inherited by other Lens Protocol NFTs, it includes\\n * the slightly modified ERC721Enumerable, which itself inherits from the ERC721Time-- which adds an\\n * internal operator approval setter, stores the mint timestamp for each token, and replaces the\\n * constructor with an initializer.\\n */\\nabstract contract LensNFTBase is ERC721Enumerable, ILensNFTBase {\\n    bytes32 internal constant EIP712_REVISION_HASH = keccak256('1');\\n    bytes32 internal constant PERMIT_TYPEHASH =\\n        keccak256('Permit(address spender,uint256 tokenId,uint256 nonce,uint256 deadline)');\\n    bytes32 internal constant PERMIT_FOR_ALL_TYPEHASH =\\n        keccak256(\\n            'PermitForAll(address owner,address operator,bool approved,uint256 nonce,uint256 deadline)'\\n        );\\n    bytes32 internal constant BURN_WITH_SIG_TYPEHASH =\\n        keccak256('BurnWithSig(uint256 tokenId,uint256 nonce,uint256 deadline)');\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\n            'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'\\n        );\\n\\n    mapping(address => uint256) public sigNonces;\\n\\n    /**\\n     * @notice Initializer sets the name, symbol and the cached domain separator.\\n     *\\n     * NOTE: Inheritor contracts *must* call this function to initialize the name & symbol in the\\n     * inherited ERC721 contract.\\n     *\\n     * @param name The name to set in the ERC721 contract.\\n     * @param symbol The symbol to set in the ERC721 contract.\\n     */\\n    function _initialize(string calldata name, string calldata symbol) internal {\\n        ERC721Time.__ERC721_Init(name, symbol);\\n\\n        emit Events.BaseInitialized(name, symbol, block.timestamp);\\n    }\\n\\n    /// @inheritdoc ILensNFTBase\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        DataTypes.EIP712Signature calldata sig\\n    ) external override {\\n        if (spender == address(0)) revert Errors.ZeroSpender();\\n        address owner = ownerOf(tokenId);\\n        unchecked {\\n            _validateRecoveredAddress(\\n                _calculateDigest(\\n                    keccak256(\\n                        abi.encode(\\n                            PERMIT_TYPEHASH,\\n                            spender,\\n                            tokenId,\\n                            sigNonces[owner]++,\\n                            sig.deadline\\n                        )\\n                    )\\n                ),\\n                owner,\\n                sig\\n            );\\n        }\\n        _approve(spender, tokenId);\\n    }\\n\\n    /// @inheritdoc ILensNFTBase\\n    function permitForAll(\\n        address owner,\\n        address operator,\\n        bool approved,\\n        DataTypes.EIP712Signature calldata sig\\n    ) external override {\\n        if (operator == address(0)) revert Errors.ZeroSpender();\\n        unchecked {\\n            _validateRecoveredAddress(\\n                _calculateDigest(\\n                    keccak256(\\n                        abi.encode(\\n                            PERMIT_FOR_ALL_TYPEHASH,\\n                            owner,\\n                            operator,\\n                            approved,\\n                            sigNonces[owner]++,\\n                            sig.deadline\\n                        )\\n                    )\\n                ),\\n                owner,\\n                sig\\n            );\\n        }\\n        _setOperatorApproval(owner, operator, approved);\\n    }\\n\\n    /// @inheritdoc ILensNFTBase\\n    function getDomainSeparator() external view override returns (bytes32) {\\n        return _calculateDomainSeparator();\\n    }\\n\\n    /// @inheritdoc ILensNFTBase\\n    function burn(uint256 tokenId) public virtual override {\\n        if (!_isApprovedOrOwner(msg.sender, tokenId)) revert Errors.NotOwnerOrApproved();\\n        _burn(tokenId);\\n    }\\n\\n    /// @inheritdoc ILensNFTBase\\n    function burnWithSig(uint256 tokenId, DataTypes.EIP712Signature calldata sig)\\n        public\\n        virtual\\n        override\\n    {\\n        address owner = ownerOf(tokenId);\\n        unchecked {\\n            _validateRecoveredAddress(\\n                _calculateDigest(\\n                    keccak256(\\n                        abi.encode(\\n                            BURN_WITH_SIG_TYPEHASH,\\n                            tokenId,\\n                            sigNonces[owner]++,\\n                            sig.deadline\\n                        )\\n                    )\\n                ),\\n                owner,\\n                sig\\n            );\\n        }\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @dev Wrapper for ecrecover to reduce code size, used in meta-tx specific functions.\\n     */\\n    function _validateRecoveredAddress(\\n        bytes32 digest,\\n        address expectedAddress,\\n        DataTypes.EIP712Signature calldata sig\\n    ) internal view {\\n        if (sig.deadline < block.timestamp) revert Errors.SignatureExpired();\\n        address recoveredAddress = ecrecover(digest, sig.v, sig.r, sig.s);\\n        if (recoveredAddress == address(0) || recoveredAddress != expectedAddress)\\n            revert Errors.SignatureInvalid();\\n    }\\n\\n    /**\\n     * @dev Calculates EIP712 DOMAIN_SEPARATOR based on the current contract and chain ID.\\n     */\\n    function _calculateDomainSeparator() internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    EIP712_DOMAIN_TYPEHASH,\\n                    keccak256(bytes(name())),\\n                    EIP712_REVISION_HASH,\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculates EIP712 digest based on the current DOMAIN_SEPARATOR.\\n     *\\n     * @param hashedMessage The message hash from which the digest should be calculated.\\n     *\\n     * @return bytes32 A 32-byte output representing the EIP712 digest.\\n     */\\n    function _calculateDigest(bytes32 hashedMessage) internal view returns (bytes32) {\\n        bytes32 digest;\\n        unchecked {\\n            digest = keccak256(\\n                abi.encodePacked('\\\\x19\\\\x01', _calculateDomainSeparator(), hashedMessage)\\n            );\\n        }\\n        return digest;\\n    }\\n}\\n\",\"keccak256\":\"0xf9df6693df8e525c900cedb85631e75d237a733b61c8c11f089bc627dcf01b3d\",\"license\":\"MIT\"},\"contracts/lens/interfaces/IFollowModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IFollowModule\\n * @author Lens Protocol\\n *\\n * @notice This is the standard interface for all Lens-compatible FollowModules.\\n */\\ninterface IFollowModule {\\n    /**\\n     * @notice Initializes a follow module for a given Lens profile. This can only be called by the hub contract.\\n     *\\n     * @param profileId The token ID of the profile to initialize this follow module for.\\n     * @param data Arbitrary data passed by the profile creator.\\n     *\\n     * @return bytes The encoded data to emit in the hub.\\n     */\\n    function initializeFollowModule(uint256 profileId, bytes calldata data)\\n        external\\n        returns (bytes memory);\\n\\n    /**\\n     * @notice Processes a given follow, this can only be called from the LensHub contract.\\n     *\\n     * @param follower The follower address.\\n     * @param profileId The token ID of the profile being followed.\\n     * @param data Arbitrary data passed by the follower.\\n     */\\n    function processFollow(\\n        address follower,\\n        uint256 profileId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice This is a transfer hook that is called upon follow NFT transfer in `beforeTokenTransfer. This can\\n     * only be called from the LensHub contract.\\n     *\\n     * NOTE: Special care needs to be taken here: It is possible that follow NFTs were issued before this module\\n     * was initialized if the profile's follow module was previously different. This transfer hook should take this\\n     * into consideration, especially when the module holds state associated with individual follow NFTs.\\n     *\\n     * @param profileId The token ID of the profile associated with the follow NFT being transferred.\\n     * @param from The address sending the follow NFT.\\n     * @param to The address receiving the follow NFT.\\n     * @param followNFTTokenId The token ID of the follow NFT being transferred.\\n     */\\n    function followModuleTransferHook(\\n        uint256 profileId,\\n        address from,\\n        address to,\\n        uint256 followNFTTokenId\\n    ) external;\\n\\n    /**\\n     * @notice This is a helper function that could be used in conjunction with specific collect modules.\\n     *\\n     * NOTE: This function IS meant to replace a check on follower NFT ownership.\\n     *\\n     * NOTE: It is assumed that not all collect modules are aware of the token ID to pass. In these cases,\\n     * this should receive a `followNFTTokenId` of 0, which is impossible regardless.\\n     *\\n     * One example of a use case for this would be a subscription-based following system:\\n     *      1. The collect module:\\n     *          - Decodes a follower NFT token ID from user-passed data.\\n     *          - Fetches the follow module from the hub.\\n     *          - Calls `isFollowing` passing the profile ID, follower & follower token ID and checks it returned true.\\n     *      2. The follow module:\\n     *          - Validates the subscription status for that given NFT, reverting on an invalid subscription.\\n     *\\n     * @param profileId The token ID of the profile to validate the follow for.\\n     * @param follower The follower address to validate the follow for.\\n     * @param followNFTTokenId The followNFT token ID to validate the follow for.\\n     *\\n     * @return true if the given address is following the given profile ID, false otherwise.\\n     */\\n    function isFollowing(\\n        uint256 profileId,\\n        address follower,\\n        uint256 followNFTTokenId\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x19bb582b366e62594605037070b2a3fed56c8077a32f8cea96af9ff6aa7b1900\",\"license\":\"MIT\"},\"contracts/lens/interfaces/IFollowNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {DataTypes} from '../libraries/DataTypes.sol';\\n\\n/**\\n * @title IFollowNFT\\n * @author Lens Protocol\\n *\\n * @notice This is the interface for the FollowNFT contract, which is cloned upon the first follow for any profile.\\n */\\ninterface IFollowNFT {\\n    /**\\n     * @notice Initializes the follow NFT, setting the hub as the privileged minter and storing the associated profile ID.\\n     *\\n     * @param profileId The token ID of the profile in the hub associated with this followNFT, used for transfer hooks.\\n     */\\n    function initialize(uint256 profileId) external;\\n\\n    /**\\n     * @notice Mints a follow NFT to the specified address. This can only be called by the hub, and is called\\n     * upon follow.\\n     *\\n     * @param to The address to mint the NFT to.\\n     *\\n     * @return uint256 An interger representing the minted token ID.\\n     */\\n    function mint(address to) external returns (uint256);\\n\\n    /**\\n     * @notice Delegates the caller's governance power to the given delegatee address.\\n     *\\n     * @param delegatee The delegatee address to delegate governance power to.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @notice Delegates the delegator's governance power via meta-tx to the given delegatee address.\\n     *\\n     * @param delegator The delegator address, who is the signer.\\n     * @param delegatee The delegatee address, who is receiving the governance power delegation.\\n     * @param sig The EIP712Signature struct containing the necessary parameters to recover the delegator's signature.\\n     */\\n    function delegateBySig(\\n        address delegator,\\n        address delegatee,\\n        DataTypes.EIP712Signature calldata sig\\n    ) external;\\n\\n    /**\\n     * @notice Returns the governance power for a given user at a specified block number.\\n     *\\n     * @param user The user to query governance power for.\\n     * @param blockNumber The block number to query the user's governance power at.\\n     *\\n     * @return uint256 The power of the given user at the given block number.\\n     */\\n    function getPowerByBlockNumber(address user, uint256 blockNumber) external returns (uint256);\\n\\n    /**\\n     * @notice Returns the total delegated supply at a specified block number. This is the sum of all\\n     * current available voting power at a given block.\\n     *\\n     * @param blockNumber The block number to query the delegated supply at.\\n     *\\n     * @return uint256 The delegated supply at the given block number.\\n     */\\n    function getDelegatedSupplyByBlockNumber(uint256 blockNumber) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x7886767765b72859702995eb04c013620d7bc59ad0d3d12521770548f7281351\",\"license\":\"MIT\"},\"contracts/lens/interfaces/ILensHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {DataTypes} from '../libraries/DataTypes.sol';\\n\\n/**\\n * @title ILensHub\\n * @author Lens Protocol\\n *\\n * @notice This is the interface for the LensHub contract, the main entry point for the Lens Protocol.\\n * You'll find all the events and external functions, as well as the reasoning behind them here.\\n */\\ninterface ILensHub {\\n    /**\\n     * @notice Initializes the LensHub NFT, setting the initial governance address as well as the name and symbol in\\n     * the LensNFTBase contract.\\n     *\\n     * @param name The name to set for the hub NFT.\\n     * @param symbol The symbol to set for the hub NFT.\\n     * @param newGovernance The governance address to set.\\n     */\\n    function initialize(\\n        string calldata name,\\n        string calldata symbol,\\n        address newGovernance\\n    ) external;\\n\\n    /**\\n     * @notice Sets the privileged governance role. This function can only be called by the current governance\\n     * address.\\n     *\\n     * @param newGovernance The new governance address to set.\\n     */\\n    function setGovernance(address newGovernance) external;\\n\\n    /**\\n     * @notice Sets the emergency admin, which is a permissioned role able to set the protocol state. This function\\n     * can only be called by the governance address.\\n     *\\n     * @param newEmergencyAdmin The new emergency admin address to set.\\n     */\\n    function setEmergencyAdmin(address newEmergencyAdmin) external;\\n\\n    /**\\n     * @notice Sets the protocol state to either a global pause, a publishing pause or an unpaused state. This function\\n     * can only be called by the governance address or the emergency admin address.\\n     *\\n     * Note that this reverts if the emergency admin calls it if:\\n     *      1. The emergency admin is attempting to unpause.\\n     *      2. The emergency admin is calling while the protocol is already paused.\\n     *\\n     * @param newState The state to set, as a member of the ProtocolState enum.\\n     */\\n    function setState(DataTypes.ProtocolState newState) external;\\n\\n    /**\\n     * @notice Adds or removes a profile creator from the whitelist. This function can only be called by the current\\n     * governance address.\\n     *\\n     * @param profileCreator The profile creator address to add or remove from the whitelist.\\n     * @param whitelist Whether or not the profile creator should be whitelisted.\\n     */\\n    function whitelistProfileCreator(address profileCreator, bool whitelist) external;\\n\\n    /**\\n     * @notice Adds or removes a follow module from the whitelist. This function can only be called by the current\\n     * governance address.\\n     *\\n     * @param followModule The follow module contract address to add or remove from the whitelist.\\n     * @param whitelist Whether or not the follow module should be whitelisted.\\n     */\\n    function whitelistFollowModule(address followModule, bool whitelist) external;\\n\\n    /**\\n     * @notice Adds or removes a reference module from the whitelist. This function can only be called by the current\\n     * governance address.\\n     *\\n     * @param referenceModule The reference module contract to add or remove from the whitelist.\\n     * @param whitelist Whether or not the reference module should be whitelisted.\\n     */\\n    function whitelistReferenceModule(address referenceModule, bool whitelist) external;\\n\\n    /**\\n     * @notice Adds or removes a collect module from the whitelist. This function can only be called by the current\\n     * governance address.\\n     *\\n     * @param collectModule The collect module contract address to add or remove from the whitelist.\\n     * @param whitelist Whether or not the collect module should be whitelisted.\\n     */\\n    function whitelistCollectModule(address collectModule, bool whitelist) external;\\n\\n    /**\\n     * @notice Creates a profile with the specified parameters, minting a profile NFT to the given recipient. This\\n     * function must be called by a whitelisted profile creator.\\n     *\\n     * @param vars A CreateProfileData struct containing the following params:\\n     *      to: The address receiving the profile.\\n     *      handle: The handle to set for the profile, must be unique and non-empty.\\n     *      imageURI: The URI to set for the profile image.\\n     *      followModule: The follow module to use, can be the zero address.\\n     *      followModuleInitData: The follow module initialization data, if any.\\n     */\\n    function createProfile(DataTypes.CreateProfileData calldata vars) external returns (uint256);\\n\\n    /**\\n     * @notice Sets the mapping between wallet and its main profile identity.\\n     *\\n     * @param profileId The token ID of the profile to set as the main profile identity.\\n     */\\n    function setDefaultProfile(uint256 profileId) external;\\n\\n    /**\\n     * @notice Sets the mapping between wallet and its main profile identity via signature with the specified parameters.\\n     *\\n     * @param vars A SetDefaultProfileWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setDefaultProfileWithSig(DataTypes.SetDefaultProfileWithSigData calldata vars)\\n        external;\\n\\n    /**\\n     * @notice Sets a profile's follow module, must be called by the profile owner.\\n     *\\n     * @param profileId The token ID of the profile to set the follow module for.\\n     * @param followModule The follow module to set for the given profile, must be whitelisted.\\n     * @param followModuleInitData The data to be passed to the follow module for initialization.\\n     */\\n    function setFollowModule(\\n        uint256 profileId,\\n        address followModule,\\n        bytes calldata followModuleInitData\\n    ) external;\\n\\n    /**\\n     * @notice Sets a profile's follow module via signature with the specified parameters.\\n     *\\n     * @param vars A SetFollowModuleWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setFollowModuleWithSig(DataTypes.SetFollowModuleWithSigData calldata vars) external;\\n\\n    /**\\n     * @notice Sets a profile's dispatcher, giving that dispatcher rights to publish to that profile.\\n     *\\n     * @param profileId The token ID of the profile of the profile to set the dispatcher for.\\n     * @param dispatcher The dispatcher address to set for the given profile ID.\\n     */\\n    function setDispatcher(uint256 profileId, address dispatcher) external;\\n\\n    /**\\n     * @notice Sets a profile's dispatcher via signature with the specified parameters.\\n     *\\n     * @param vars A SetDispatcherWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setDispatcherWithSig(DataTypes.SetDispatcherWithSigData calldata vars) external;\\n\\n    /**\\n     * @notice Sets a profile's URI, which is reflected in the `tokenURI()` function.\\n     *\\n     * @param profileId The token ID of the profile of the profile to set the URI for.\\n     * @param imageURI The URI to set for the given profile.\\n     */\\n    function setProfileImageURI(uint256 profileId, string calldata imageURI) external;\\n\\n    /**\\n     * @notice Sets a profile's URI via signature with the specified parameters.\\n     *\\n     * @param vars A SetProfileImageURIWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setProfileImageURIWithSig(DataTypes.SetProfileImageURIWithSigData calldata vars)\\n        external;\\n\\n    /**\\n     * @notice Sets a followNFT URI for a given profile's follow NFT.\\n     *\\n     * @param profileId The token ID of the profile for which to set the followNFT URI.\\n     * @param followNFTURI The follow NFT URI to set.\\n     */\\n    function setFollowNFTURI(uint256 profileId, string calldata followNFTURI) external;\\n\\n    /**\\n     * @notice Sets a followNFT URI via signature with the specified parameters.\\n     *\\n     * @param vars A SetFollowNFTURIWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setFollowNFTURIWithSig(DataTypes.SetFollowNFTURIWithSigData calldata vars) external;\\n\\n    /**\\n     * @notice Publishes a post to a given profile, must be called by the profile owner.\\n     *\\n     * @param vars A PostData struct containing the needed parameters.\\n     *\\n     * @return uint256 An integer representing the post's publication ID.\\n     */\\n    function post(DataTypes.PostData calldata vars) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a post to a given profile via signature with the specified parameters.\\n     *\\n     * @param vars A PostWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n     *\\n     * @return uint256 An integer representing the post's publication ID.\\n     */\\n    function postWithSig(DataTypes.PostWithSigData calldata vars) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a comment to a given profile, must be called by the profile owner.\\n     *\\n     * @param vars A CommentData struct containing the needed parameters.\\n     *\\n     * @return uint256 An integer representing the comment's publication ID.\\n     */\\n    function comment(DataTypes.CommentData calldata vars) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a comment to a given profile via signature with the specified parameters.\\n     *\\n     * @param vars A CommentWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n     *\\n     * @return uint256 An integer representing the comment's publication ID.\\n     */\\n    function commentWithSig(DataTypes.CommentWithSigData calldata vars) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a mirror to a given profile, must be called by the profile owner.\\n     *\\n     * @param vars A MirrorData struct containing the necessary parameters.\\n     *\\n     * @return uint256 An integer representing the mirror's publication ID.\\n     */\\n    function mirror(DataTypes.MirrorData calldata vars) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a mirror to a given profile via signature with the specified parameters.\\n     *\\n     * @param vars A MirrorWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n     *\\n     * @return uint256 An integer representing the mirror's publication ID.\\n     */\\n    function mirrorWithSig(DataTypes.MirrorWithSigData calldata vars) external returns (uint256);\\n\\n    /**\\n     * @notice Follows the given profiles, executing each profile's follow module logic (if any) and minting followNFTs to the caller.\\n     *\\n     * NOTE: Both the `profileIds` and `datas` arrays must be of the same length, regardless if the profiles do not have a follow module set.\\n     *\\n     * @param profileIds The token ID array of the profiles to follow.\\n     * @param datas The arbitrary data array to pass to the follow module for each profile if needed.\\n     *\\n     * @return uint256[] An array of integers representing the minted follow NFTs token IDs.\\n     */\\n    function follow(uint256[] calldata profileIds, bytes[] calldata datas)\\n        external\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Follows a given profile via signature with the specified parameters.\\n     *\\n     * @param vars A FollowWithSigData struct containing the regular parameters as well as the signing follower's address\\n     * and an EIP712Signature struct.\\n     *\\n     * @return uint256[] An array of integers representing the minted follow NFTs token IDs.\\n     */\\n    function followWithSig(DataTypes.FollowWithSigData calldata vars)\\n        external\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Collects a given publication, executing collect module logic and minting a collectNFT to the caller.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to collect.\\n     * @param pubId The publication to collect's publication ID.\\n     * @param data The arbitrary data to pass to the collect module if needed.\\n     *\\n     * @return uint256 An integer representing the minted token ID.\\n     */\\n    function collect(\\n        uint256 profileId,\\n        uint256 pubId,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Collects a given publication via signature with the specified parameters.\\n     *\\n     * @param vars A CollectWithSigData struct containing the regular parameters as well as the collector's address and\\n     * an EIP712Signature struct.\\n     *\\n     * @return uint256 An integer representing the minted token ID.\\n     */\\n    function collectWithSig(DataTypes.CollectWithSigData calldata vars) external returns (uint256);\\n\\n    /**\\n     * @dev Helper function to emit a detailed followNFT transfer event from the hub, to be consumed by frontends to track\\n     * followNFT transfers.\\n     *\\n     * @param profileId The token ID of the profile associated with the followNFT being transferred.\\n     * @param followNFTId The followNFT being transferred's token ID.\\n     * @param from The address the followNFT is being transferred from.\\n     * @param to The address the followNFT is being transferred to.\\n     */\\n    function emitFollowNFTTransferEvent(\\n        uint256 profileId,\\n        uint256 followNFTId,\\n        address from,\\n        address to\\n    ) external;\\n\\n    /**\\n     * @dev Helper function to emit a detailed collectNFT transfer event from the hub, to be consumed by frontends to track\\n     * collectNFT transfers.\\n     *\\n     * @param profileId The token ID of the profile associated with the collect NFT being transferred.\\n     * @param pubId The publication ID associated with the collect NFT being transferred.\\n     * @param collectNFTId The collectNFT being transferred's token ID.\\n     * @param from The address the collectNFT is being transferred from.\\n     * @param to The address the collectNFT is being transferred to.\\n     */\\n    function emitCollectNFTTransferEvent(\\n        uint256 profileId,\\n        uint256 pubId,\\n        uint256 collectNFTId,\\n        address from,\\n        address to\\n    ) external;\\n\\n    /// ************************\\n    /// *****VIEW FUNCTIONS*****\\n    /// ************************\\n\\n    /**\\n     * @notice Returns whether or not a profile creator is whitelisted.\\n     *\\n     * @param profileCreator The address of the profile creator to check.\\n     *\\n     * @return bool True if the profile creator is whitelisted, false otherwise.\\n     */\\n    function isProfileCreatorWhitelisted(address profileCreator) external view returns (bool);\\n\\n    /**\\n     * @notice Returns default profile for a given wallet address\\n     *\\n     * @param wallet The address to find the default mapping\\n     *\\n     * @return uint256 The default profile id, which will be 0 if not mapped.\\n     */\\n    function defaultProfile(address wallet) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns whether or not a follow module is whitelisted.\\n     *\\n     * @param followModule The address of the follow module to check.\\n     *\\n     * @return bool True if the the follow module is whitelisted, false otherwise.\\n     */\\n    function isFollowModuleWhitelisted(address followModule) external view returns (bool);\\n\\n    /**\\n     * @notice Returns whether or not a reference module is whitelisted.\\n     *\\n     * @param referenceModule The address of the reference module to check.\\n     *\\n     * @return bool True if the the reference module is whitelisted, false otherwise.\\n     */\\n    function isReferenceModuleWhitelisted(address referenceModule) external view returns (bool);\\n\\n    /**\\n     * @notice Returns whether or not a collect module is whitelisted.\\n     *\\n     * @param collectModule The address of the collect module to check.\\n     *\\n     * @return bool True if the the collect module is whitelisted, false otherwise.\\n     */\\n    function isCollectModuleWhitelisted(address collectModule) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the currently configured governance address.\\n     *\\n     * @return address The address of the currently configured governance.\\n     */\\n    function getGovernance() external view returns (address);\\n\\n    /**\\n     * @notice Returns the dispatcher associated with a profile.\\n     *\\n     * @param profileId The token ID of the profile to query the dispatcher for.\\n     *\\n     * @return address The dispatcher address associated with the profile.\\n     */\\n    function getDispatcher(uint256 profileId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the publication count for a given profile.\\n     *\\n     * @param profileId The token ID of the profile to query.\\n     *\\n     * @return uint256 The number of publications associated with the queried profile.\\n     */\\n    function getPubCount(uint256 profileId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the followNFT associated with a given profile, if any.\\n     *\\n     * @param profileId The token ID of the profile to query the followNFT for.\\n     *\\n     * @return address The followNFT associated with the given profile.\\n     */\\n    function getFollowNFT(uint256 profileId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the followNFT URI associated with a given profile.\\n     *\\n     * @param profileId The token ID of the profile to query the followNFT URI for.\\n     *\\n     * @return string The followNFT URI associated with the given profile.\\n     */\\n    function getFollowNFTURI(uint256 profileId) external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the collectNFT associated with a given publication, if any.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return address The address of the collectNFT associated with the queried publication.\\n     */\\n    function getCollectNFT(uint256 profileId, uint256 pubId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the follow module associated witha  given profile, if any.\\n     *\\n     * @param profileId The token ID of the profile to query the follow module for.\\n     *\\n     * @return address The address of the follow module associated with the given profile.\\n     */\\n    function getFollowModule(uint256 profileId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the collect module associated with a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return address The address of the collect module associated with the queried publication.\\n     */\\n    function getCollectModule(uint256 profileId, uint256 pubId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the reference module associated witha  given profile, if any.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to querythe reference module for.\\n     * @param pubId The publication ID of the publication to query the reference module for.\\n     *\\n     * @return address The address of the reference module associated with the given profile.\\n     */\\n    function getReferenceModule(uint256 profileId, uint256 pubId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the handle associated with a profile.\\n     *\\n     * @param profileId The token ID of the profile to query the handle for.\\n     *\\n     * @return string The handle associated with the profile.\\n     */\\n    function getHandle(uint256 profileId) external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the publication pointer (profileId & pubId) associated with a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query the pointer for.\\n     * @param pubId The publication ID of the publication to query the pointer for.\\n     *\\n     * @return tuple First, the profile ID of the profile the current publication is pointing to, second, the\\n     * publication ID of the publication the current publication is pointing to.\\n     */\\n    function getPubPointer(uint256 profileId, uint256 pubId)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    /**\\n     * @notice Returns the URI associated with a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return string The URI associated with a given publication.\\n     */\\n    function getContentURI(uint256 profileId, uint256 pubId) external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the profile token ID according to a given handle.\\n     *\\n     * @param handle The handle to resolve the profile token ID with.\\n     *\\n     * @return uint256 The profile ID the passed handle points to.\\n     */\\n    function getProfileIdByHandle(string calldata handle) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the full profile struct associated with a given profile token ID.\\n     *\\n     * @param profileId The token ID of the profile to query.\\n     *\\n     * @return ProfileStruct The profile struct of the given profile.\\n     */\\n    function getProfile(uint256 profileId) external view returns (DataTypes.ProfileStruct memory);\\n\\n    /**\\n     * @notice Returns the full publication struct for a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return PublicationStruct The publication struct associated with the queried publication.\\n     */\\n    function getPub(uint256 profileId, uint256 pubId)\\n        external\\n        view\\n        returns (DataTypes.PublicationStruct memory);\\n\\n    /**\\n     * @notice Returns the publication type associated with a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return PubType The publication type, as a member of an enum (either \\\"post,\\\" \\\"comment\\\" or \\\"mirror\\\").\\n     */\\n    function getPubType(uint256 profileId, uint256 pubId) external view returns (DataTypes.PubType);\\n\\n    /**\\n     * @notice Returns the follow NFT implementation address.\\n     *\\n     * @return address The follow NFT implementation address.\\n     */\\n    function getFollowNFTImpl() external view returns (address);\\n\\n    /**\\n     * @notice Returns the collect NFT implementation address.\\n     *\\n     * @return address The collect NFT implementation address.\\n     */\\n    function getCollectNFTImpl() external view returns (address);\\n}\\n\",\"keccak256\":\"0x789b8bad742032bb7d9f5499aec3f6f899f5265e26aa4b38cadaef5d9fcb0ec3\",\"license\":\"MIT\"},\"contracts/lens/interfaces/ILensNFTBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {DataTypes} from '../libraries/DataTypes.sol';\\n\\n/**\\n * @title ILensNFTBase\\n * @author Lens Protocol\\n *\\n * @notice This is the interface for the LensNFTBase contract, from which all Lens NFTs inherit.\\n * It is an expansion of a very slightly modified ERC721Enumerable contract, which allows expanded\\n * meta-transaction functionality.\\n */\\ninterface ILensNFTBase {\\n    /**\\n     * @notice Implementation of an EIP-712 permit function for an ERC-721 NFT. We don't need to check\\n     * if the tokenId exists, since the function calls ownerOf(tokenId), which reverts if the tokenId does\\n     * not exist.\\n     *\\n     * @param spender The NFT spender.\\n     * @param tokenId The NFT token ID to approve.\\n     * @param sig The EIP712 signature struct.\\n     */\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        DataTypes.EIP712Signature calldata sig\\n    ) external;\\n\\n    /**\\n     * @notice Implementation of an EIP-712 permit-style function for ERC-721 operator approvals. Allows\\n     * an operator address to control all NFTs a given owner owns.\\n     *\\n     * @param owner The owner to set operator approvals for.\\n     * @param operator The operator to approve.\\n     * @param approved Whether to approve or revoke approval from the operator.\\n     * @param sig The EIP712 signature struct.\\n     */\\n    function permitForAll(\\n        address owner,\\n        address operator,\\n        bool approved,\\n        DataTypes.EIP712Signature calldata sig\\n    ) external;\\n\\n    /**\\n     * @notice Burns an NFT, removing it from circulation and essentially destroying it. This function can only\\n     * be called by the NFT to burn's owner.\\n     *\\n     * @param tokenId The token ID of the token to burn.\\n     */\\n    function burn(uint256 tokenId) external;\\n\\n    /**\\n     * @notice Implementation of an EIP-712 permit-style function for token burning. Allows anyone to burn\\n     * a token on behalf of the owner with a signature.\\n     *\\n     * @param tokenId The token ID of the token to burn.\\n     * @param sig The EIP712 signature struct.\\n     */\\n    function burnWithSig(uint256 tokenId, DataTypes.EIP712Signature calldata sig) external;\\n\\n    /**\\n     * @notice Returns the domain separator for this NFT contract.\\n     *\\n     * @return bytes32 The domain separator.\\n     */\\n    function getDomainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3685787259ec432ca984bf6fe030326f6e72d3da44e64d7320f855cae32c3086\",\"license\":\"MIT\"},\"contracts/lens/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nlibrary Constants {\\n    string internal constant FOLLOW_NFT_NAME_SUFFIX = '-Follower';\\n    string internal constant FOLLOW_NFT_SYMBOL_SUFFIX = '-Fl';\\n    string internal constant COLLECT_NFT_NAME_INFIX = '-Collect-';\\n    string internal constant COLLECT_NFT_SYMBOL_INFIX = '-Cl-';\\n    uint8 internal constant MAX_HANDLE_LENGTH = 31;\\n    uint16 internal constant MAX_PROFILE_IMAGE_URI_LENGTH = 6000;\\n}\\n\",\"keccak256\":\"0xb2cf2599fffa8fa773fc7ed12272302e2e1c6957a24d2a8d9838510890d322d1\",\"license\":\"MIT\"},\"contracts/lens/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title DataTypes\\n * @author Lens Protocol\\n *\\n * @notice A standard library of data types used throughout the Lens Protocol.\\n */\\nlibrary DataTypes {\\n    /**\\n     * @notice An enum containing the different states the protocol can be in, limiting certain actions.\\n     *\\n     * @param Unpaused The fully unpaused state.\\n     * @param PublishingPaused The state where only publication creation functions are paused.\\n     * @param Paused The fully paused state.\\n     */\\n    enum ProtocolState {\\n        Unpaused,\\n        PublishingPaused,\\n        Paused\\n    }\\n\\n    /**\\n     * @notice An enum specifically used in a helper function to easily retrieve the publication type for integrations.\\n     *\\n     * @param Post A standard post, having a URI, a collect module but no pointer to another publication.\\n     * @param Comment A comment, having a URI, a collect module and a pointer to another publication.\\n     * @param Mirror A mirror, having a pointer to another publication, but no URI or collect module.\\n     * @param Nonexistent An indicator showing the queried publication does not exist.\\n     */\\n    enum PubType {\\n        Post,\\n        Comment,\\n        Mirror,\\n        Nonexistent\\n    }\\n\\n    /**\\n     * @notice A struct containing the necessary information to reconstruct an EIP-712 typed data signature.\\n     *\\n     * @param v The signature's recovery parameter.\\n     * @param r The signature's r parameter.\\n     * @param s The signature's s parameter\\n     * @param deadline The signature's deadline\\n     */\\n    struct EIP712Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @notice A struct containing profile data.\\n     *\\n     * @param pubCount The number of publications made to this profile.\\n     * @param followModule The address of the current follow module in use by this profile, can be empty.\\n     * @param followNFT The address of the followNFT associated with this profile, can be empty..\\n     * @param handle The profile's associated handle.\\n     * @param imageURI The URI to be used for the profile's image.\\n     * @param followNFTURI The URI to be used for the follow NFT.\\n     */\\n    struct ProfileStruct {\\n        uint256 pubCount;\\n        address followModule;\\n        address followNFT;\\n        string handle;\\n        string imageURI;\\n        string followNFTURI;\\n    }\\n\\n    /**\\n     * @notice A struct containing data associated with each new publication.\\n     *\\n     * @param profileIdPointed The profile token ID this publication points to, for mirrors and comments.\\n     * @param pubIdPointed The publication ID this publication points to, for mirrors and comments.\\n     * @param contentURI The URI associated with this publication.\\n     * @param referenceModule The address of the current reference module in use by this profile, can be empty.\\n     * @param collectModule The address of the collect module associated with this publication, this exists for all publication.\\n     * @param collectNFT The address of the collectNFT associated with this publication, if any.\\n     */\\n    struct PublicationStruct {\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        string contentURI;\\n        address referenceModule;\\n        address collectModule;\\n        address collectNFT;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `createProfile()` function.\\n     *\\n     * @param to The address receiving the profile.\\n     * @param handle The handle to set for the profile, must be unique and non-empty.\\n     * @param imageURI The URI to set for the profile image.\\n     * @param followModule The follow module to use, can be the zero address.\\n     * @param followModuleInitData The follow module initialization data, if any.\\n     * @param followNFTURI The URI to use for the follow NFT.\\n     */\\n    struct CreateProfileData {\\n        address to;\\n        string handle;\\n        string imageURI;\\n        address followModule;\\n        bytes followModuleInitData;\\n        string followNFTURI;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setDefaultProfileWithSig()` function. Parameters are\\n     * the same as the regular `setDefaultProfile()` function, with an added EIP712Signature.\\n     *\\n     * @param wallet The address of the wallet setting the default profile.\\n     * @param profileId The token ID of the profile which will be set as default, or zero.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetDefaultProfileWithSigData {\\n        address wallet;\\n        uint256 profileId;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setFollowModuleWithSig()` function. Parameters are\\n     * the same as the regular `setFollowModule()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to change the followModule for.\\n     * @param followModule The followModule to set for the given profile, must be whitelisted.\\n     * @param followModuleInitData The data to be passed to the followModule for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetFollowModuleWithSigData {\\n        uint256 profileId;\\n        address followModule;\\n        bytes followModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setDispatcherWithSig()` function. Parameters are the same\\n     * as the regular `setDispatcher()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to set the dispatcher for.\\n     * @param dispatcher The dispatcher address to set for the profile.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetDispatcherWithSigData {\\n        uint256 profileId;\\n        address dispatcher;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setProfileImageURIWithSig()` function. Parameters are the same\\n     * as the regular `setProfileImageURI()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to set the URI for.\\n     * @param imageURI The URI to set for the given profile image.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetProfileImageURIWithSigData {\\n        uint256 profileId;\\n        string imageURI;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setFollowNFTURIWithSig()` function. Parameters are the same\\n     * as the regular `setFollowNFTURI()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile for which to set the followNFT URI.\\n     * @param followNFTURI The follow NFT URI to set.\\n     * @param sig The EIP712Signature struct containing the followNFT's associated profile owner's signature.\\n     */\\n    struct SetFollowNFTURIWithSigData {\\n        uint256 profileId;\\n        string followNFTURI;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `post()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param collectModule The collect module to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collect module's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct PostData {\\n        uint256 profileId;\\n        string contentURI;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `postWithSig()` function. Parameters are the same as\\n     * the regular `post()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param collectModule The collectModule to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collectModule's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct PostWithSigData {\\n        uint256 profileId;\\n        string contentURI;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `comment()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param profileIdPointed The profile token ID to point the comment to.\\n     * @param pubIdPointed The publication ID to point the comment to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param collectModule The collect module to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collect module's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct CommentData {\\n        uint256 profileId;\\n        string contentURI;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `commentWithSig()` function. Parameters are the same as\\n     * the regular `comment()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param profileIdPointed The profile token ID to point the comment to.\\n     * @param pubIdPointed The publication ID to point the comment to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param collectModule The collectModule to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collectModule's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct CommentWithSigData {\\n        uint256 profileId;\\n        string contentURI;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `mirror()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param profileIdPointed The profile token ID to point the mirror to.\\n     * @param pubIdPointed The publication ID to point the mirror to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct MirrorData {\\n        uint256 profileId;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `mirrorWithSig()` function. Parameters are the same as\\n     * the regular `mirror()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param profileIdPointed The profile token ID to point the mirror to.\\n     * @param pubIdPointed The publication ID to point the mirror to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct MirrorWithSigData {\\n        uint256 profileId;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `followWithSig()` function. Parameters are the same\\n     * as the regular `follow()` function, with the follower's (signer) address and an EIP712Signature added.\\n     *\\n     * @param follower The follower which is the message signer.\\n     * @param profileIds The array of token IDs of the profiles to follow.\\n     * @param datas The array of arbitrary data to pass to the followModules if needed.\\n     * @param sig The EIP712Signature struct containing the follower's signature.\\n     */\\n    struct FollowWithSigData {\\n        address follower;\\n        uint256[] profileIds;\\n        bytes[] datas;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `collectWithSig()` function. Parameters are the same as\\n     * the regular `collect()` function, with the collector's (signer) address and an EIP712Signature added.\\n     *\\n     * @param collector The collector which is the message signer.\\n     * @param profileId The token ID of the profile that published the publication to collect.\\n     * @param pubId The publication to collect's publication ID.\\n     * @param data The arbitrary data to pass to the collectModule if needed.\\n     * @param sig The EIP712Signature struct containing the collector's signature.\\n     */\\n    struct CollectWithSigData {\\n        address collector;\\n        uint256 profileId;\\n        uint256 pubId;\\n        bytes data;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setProfileMetadataWithSig()` function.\\n     *\\n     * @param profileId The profile ID for which to set the metadata.\\n     * @param metadata The metadata string to set for the profile and user.\\n     * @param sig The EIP712Signature struct containing the user's signature.\\n     */\\n    struct SetProfileMetadataWithSigData {\\n        uint256 profileId;\\n        string metadata;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `toggleFollowWithSig()` function.\\n     *\\n     * @param follower The follower which is the message signer.\\n     * @param profileIds The token ID array of the profiles.\\n     * @param enables The array of booleans to enable/disable follows.\\n     * @param sig The EIP712Signature struct containing the follower's signature.\\n     */\\n    struct ToggleFollowWithSigData {\\n        address follower;\\n        uint256[] profileIds;\\n        bool[] enables;\\n        EIP712Signature sig;\\n    }\\n}\\n\",\"keccak256\":\"0xe45a4de8ccf54234021dd34333ab17dcf813ceeadd9d4146214a96a1984f14c2\",\"license\":\"MIT\"},\"contracts/lens/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nlibrary Errors {\\n    error CannotInitImplementation();\\n    error Initialized();\\n    error SignatureExpired();\\n    error ZeroSpender();\\n    error SignatureInvalid();\\n    error NotOwnerOrApproved();\\n    error NotHub();\\n    error TokenDoesNotExist();\\n    error NotGovernance();\\n    error NotGovernanceOrEmergencyAdmin();\\n    error EmergencyAdminCannotUnpause();\\n    error CallerNotWhitelistedModule();\\n    error CollectModuleNotWhitelisted();\\n    error FollowModuleNotWhitelisted();\\n    error ReferenceModuleNotWhitelisted();\\n    error ProfileCreatorNotWhitelisted();\\n    error NotProfileOwner();\\n    error NotProfileOwnerOrDispatcher();\\n    error NotDispatcher();\\n    error PublicationDoesNotExist();\\n    error HandleTaken();\\n    error HandleLengthInvalid();\\n    error HandleContainsInvalidCharacters();\\n    error HandleFirstCharInvalid();\\n    error ProfileImageURILengthInvalid();\\n    error CallerNotFollowNFT();\\n    error CallerNotCollectNFT();\\n    error BlockNumberInvalid();\\n    error ArrayMismatch();\\n    error CannotCommentOnSelf();\\n    error NotWhitelisted();\\n\\n    // Module Errors\\n    error InitParamsInvalid();\\n    error CollectExpired();\\n    error FollowInvalid();\\n    error ModuleDataMismatch();\\n    error FollowNotApproved();\\n    error MintLimitExceeded();\\n    error CollectNotAllowed();\\n\\n    // MultiState Errors\\n    error Paused();\\n    error PublishingPaused();\\n}\\n\",\"keccak256\":\"0x06a0ba7e0619f8a745c902a45bf8e623b6091beb2f98d39f94157e4707b1c9b6\",\"license\":\"MIT\"},\"contracts/lens/libraries/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {DataTypes} from './DataTypes.sol';\\n\\nlibrary Events {\\n    /**\\n     * @dev Emitted when the NFT contract's name and symbol are set at initialization.\\n     *\\n     * @param name The NFT name set.\\n     * @param symbol The NFT symbol set.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event BaseInitialized(string name, string symbol, uint256 timestamp);\\n\\n    /**\\n     * @dev Emitted when the hub state is set.\\n     *\\n     * @param caller The caller who set the state.\\n     * @param prevState The previous protocol state, an enum of either `Paused`, `PublishingPaused` or `Unpaused`.\\n     * @param newState The newly set state, an enum of either `Paused`, `PublishingPaused` or `Unpaused`.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event StateSet(\\n        address indexed caller,\\n        DataTypes.ProtocolState indexed prevState,\\n        DataTypes.ProtocolState indexed newState,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when the governance address is changed. We emit the caller even though it should be the previous\\n     * governance address, as we cannot guarantee this will always be the case due to upgradeability.\\n     *\\n     * @param caller The caller who set the governance address.\\n     * @param prevGovernance The previous governance address.\\n     * @param newGovernance The new governance address set.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event GovernanceSet(\\n        address indexed caller,\\n        address indexed prevGovernance,\\n        address indexed newGovernance,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when the emergency admin is changed. We emit the caller even though it should be the previous\\n     * governance address, as we cannot guarantee this will always be the case due to upgradeability.\\n     *\\n     * @param caller The caller who set the emergency admin address.\\n     * @param oldEmergencyAdmin The previous emergency admin address.\\n     * @param newEmergencyAdmin The new emergency admin address set.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event EmergencyAdminSet(\\n        address indexed caller,\\n        address indexed oldEmergencyAdmin,\\n        address indexed newEmergencyAdmin,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a profile creator is added to or removed from the whitelist.\\n     *\\n     * @param profileCreator The address of the profile creator.\\n     * @param whitelisted Whether or not the profile creator is being added to the whitelist.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event ProfileCreatorWhitelisted(\\n        address indexed profileCreator,\\n        bool indexed whitelisted,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a follow module is added to or removed from the whitelist.\\n     *\\n     * @param followModule The address of the follow module.\\n     * @param whitelisted Whether or not the follow module is being added to the whitelist.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event FollowModuleWhitelisted(\\n        address indexed followModule,\\n        bool indexed whitelisted,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a reference module is added to or removed from the whitelist.\\n     *\\n     * @param referenceModule The address of the reference module.\\n     * @param whitelisted Whether or not the reference module is being added to the whitelist.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event ReferenceModuleWhitelisted(\\n        address indexed referenceModule,\\n        bool indexed whitelisted,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a collect module is added to or removed from the whitelist.\\n     *\\n     * @param collectModule The address of the collect module.\\n     * @param whitelisted Whether or not the collect module is being added to the whitelist.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event CollectModuleWhitelisted(\\n        address indexed collectModule,\\n        bool indexed whitelisted,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a profile is created.\\n     *\\n     * @param profileId The newly created profile's token ID.\\n     * @param creator The profile creator, who created the token with the given profile ID.\\n     * @param to The address receiving the profile with the given profile ID.\\n     * @param handle The handle set for the profile.\\n     * @param imageURI The image uri set for the profile.\\n     * @param followModule The profile's newly set follow module. This CAN be the zero address.\\n     * @param followModuleReturnData The data returned from the follow module's initialization. This is abi encoded\\n     * and totally depends on the follow module chosen.\\n     * @param followNFTURI The URI set for the profile's follow NFT.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event ProfileCreated(\\n        uint256 indexed profileId,\\n        address indexed creator,\\n        address indexed to,\\n        string handle,\\n        string imageURI,\\n        address followModule,\\n        bytes followModuleReturnData,\\n        string followNFTURI,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a a default profile is set for a wallet as its main identity\\n     *\\n     * @param wallet The wallet which set or unset its default profile.\\n     * @param profileId The token ID of the profile being set as default, or zero.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event DefaultProfileSet(address indexed wallet, uint256 indexed profileId, uint256 timestamp);\\n\\n    /**\\n     * @dev Emitted when a dispatcher is set for a specific profile.\\n     *\\n     * @param profileId The token ID of the profile for which the dispatcher is set.\\n     * @param dispatcher The dispatcher set for the given profile.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event DispatcherSet(uint256 indexed profileId, address indexed dispatcher, uint256 timestamp);\\n\\n    /**\\n     * @dev Emitted when a profile's URI is set.\\n     *\\n     * @param profileId The token ID of the profile for which the URI is set.\\n     * @param imageURI The URI set for the given profile.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event ProfileImageURISet(uint256 indexed profileId, string imageURI, uint256 timestamp);\\n\\n    /**\\n     * @dev Emitted when a follow NFT's URI is set.\\n     *\\n     * @param profileId The token ID of the profile for which the followNFT URI is set.\\n     * @param followNFTURI The follow NFT URI set.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event FollowNFTURISet(uint256 indexed profileId, string followNFTURI, uint256 timestamp);\\n\\n    /**\\n     * @dev Emitted when a profile's follow module is set.\\n     *\\n     * @param profileId The profile's token ID.\\n     * @param followModule The profile's newly set follow module. This CAN be the zero address.\\n     * @param followModuleReturnData The data returned from the follow module's initialization. This is abi encoded\\n     * and totally depends on the follow module chosen.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event FollowModuleSet(\\n        uint256 indexed profileId,\\n        address followModule,\\n        bytes followModuleReturnData,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a \\\"post\\\" is published.\\n     *\\n     * @param profileId The profile's token ID.\\n     * @param pubId The new publication's ID.\\n     * @param contentURI The URI mapped to this new publication.\\n     * @param collectModule The collect module mapped to this new publication. This CANNOT be the zero address.\\n     * @param collectModuleReturnData The data returned from the collect module's initialization for this given\\n     * publication. This is abi encoded and totally depends on the collect module chosen.\\n     * @param referenceModule The reference module set for this publication.\\n     * @param referenceModuleReturnData The data returned from the reference module at initialization. This is abi\\n     * encoded and totally depends on the reference module chosen.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event PostCreated(\\n        uint256 indexed profileId,\\n        uint256 indexed pubId,\\n        string contentURI,\\n        address collectModule,\\n        bytes collectModuleReturnData,\\n        address referenceModule,\\n        bytes referenceModuleReturnData,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a \\\"comment\\\" is published.\\n     *\\n     * @param profileId The profile's token ID.\\n     * @param pubId The new publication's ID.\\n     * @param contentURI The URI mapped to this new publication.\\n     * @param profileIdPointed The profile token ID that this comment points to.\\n     * @param pubIdPointed The publication ID that this comment points to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param collectModule The collect module mapped to this new publication. This CANNOT be the zero address.\\n     * @param collectModuleReturnData The data returned from the collect module's initialization for this given\\n     * publication. This is abi encoded and totally depends on the collect module chosen.\\n     * @param referenceModule The reference module set for this publication.\\n     * @param referenceModuleReturnData The data returned from the reference module at initialization. This is abi\\n     * encoded and totally depends on the reference module chosen.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event CommentCreated(\\n        uint256 indexed profileId,\\n        uint256 indexed pubId,\\n        string contentURI,\\n        uint256 profileIdPointed,\\n        uint256 pubIdPointed,\\n        bytes referenceModuleData,\\n        address collectModule,\\n        bytes collectModuleReturnData,\\n        address referenceModule,\\n        bytes referenceModuleReturnData,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a \\\"mirror\\\" is published.\\n     *\\n     * @param profileId The profile's token ID.\\n     * @param pubId The new publication's ID.\\n     * @param profileIdPointed The profile token ID that this mirror points to.\\n     * @param pubIdPointed The publication ID that this mirror points to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param referenceModule The reference module set for this publication.\\n     * @param referenceModuleReturnData The data returned from the reference module at initialization. This is abi\\n     * encoded and totally depends on the reference module chosen.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event MirrorCreated(\\n        uint256 indexed profileId,\\n        uint256 indexed pubId,\\n        uint256 profileIdPointed,\\n        uint256 pubIdPointed,\\n        bytes referenceModuleData,\\n        address referenceModule,\\n        bytes referenceModuleReturnData,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a followNFT clone is deployed using a lazy deployment pattern.\\n     *\\n     * @param profileId The token ID of the profile to which this followNFT is associated.\\n     * @param followNFT The address of the newly deployed followNFT clone.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event FollowNFTDeployed(\\n        uint256 indexed profileId,\\n        address indexed followNFT,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a collectNFT clone is deployed using a lazy deployment pattern.\\n     *\\n     * @param profileId The publisher's profile token ID.\\n     * @param pubId The publication associated with the newly deployed collectNFT clone's ID.\\n     * @param collectNFT The address of the newly deployed collectNFT clone.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event CollectNFTDeployed(\\n        uint256 indexed profileId,\\n        uint256 indexed pubId,\\n        address indexed collectNFT,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted upon a successful collect action.\\n     *\\n     * @param collector The address collecting the publication.\\n     * @param profileId The token ID of the profile that the collect was initiated towards, useful to differentiate mirrors.\\n     * @param pubId The publication ID that the collect was initiated towards, useful to differentiate mirrors.\\n     * @param rootProfileId The profile token ID of the profile whose publication is being collected.\\n     * @param rootPubId The publication ID of the publication being collected.\\n     * @param collectModuleData The data passed to the collect module.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event Collected(\\n        address indexed collector,\\n        uint256 indexed profileId,\\n        uint256 indexed pubId,\\n        uint256 rootProfileId,\\n        uint256 rootPubId,\\n        bytes collectModuleData,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted upon a successful follow action.\\n     *\\n     * @param follower The address following the given profiles.\\n     * @param profileIds The token ID array of the profiles being followed.\\n     * @param followModuleDatas The array of data parameters passed to each follow module.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event Followed(\\n        address indexed follower,\\n        uint256[] profileIds,\\n        bytes[] followModuleDatas,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted via callback when a followNFT is transferred.\\n     *\\n     * @param profileId The token ID of the profile associated with the followNFT being transferred.\\n     * @param followNFTId The followNFT being transferred's token ID.\\n     * @param from The address the followNFT is being transferred from.\\n     * @param to The address the followNFT is being transferred to.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event FollowNFTTransferred(\\n        uint256 indexed profileId,\\n        uint256 indexed followNFTId,\\n        address from,\\n        address to,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted via callback when a collectNFT is transferred.\\n     *\\n     * @param profileId The token ID of the profile associated with the collectNFT being transferred.\\n     * @param pubId The publication ID associated with the collectNFT being transferred.\\n     * @param collectNFTId The collectNFT being transferred's token ID.\\n     * @param from The address the collectNFT is being transferred from.\\n     * @param to The address the collectNFT is being transferred to.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event CollectNFTTransferred(\\n        uint256 indexed profileId,\\n        uint256 indexed pubId,\\n        uint256 indexed collectNFTId,\\n        address from,\\n        address to,\\n        uint256 timestamp\\n    );\\n\\n    // Collect/Follow NFT-Specific\\n\\n    /**\\n     * @dev Emitted when a newly deployed follow NFT is initialized.\\n     *\\n     * @param profileId The token ID of the profile connected to this follow NFT.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event FollowNFTInitialized(uint256 indexed profileId, uint256 timestamp);\\n\\n    /**\\n     * @dev Emitted when delegation power in a FollowNFT is changed.\\n     *\\n     * @param delegate The delegate whose power has been changed.\\n     * @param newPower The new governance power mapped to the delegate.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event FollowNFTDelegatedPowerChanged(\\n        address indexed delegate,\\n        uint256 indexed newPower,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a newly deployed collect NFT is initialized.\\n     *\\n     * @param profileId The token ID of the profile connected to the publication mapped to this collect NFT.\\n     * @param pubId The publication ID connected to the publication mapped to this collect NFT.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event CollectNFTInitialized(\\n        uint256 indexed profileId,\\n        uint256 indexed pubId,\\n        uint256 timestamp\\n    );\\n\\n    // Module-Specific\\n\\n    /**\\n     * @notice Emitted when the ModuleGlobals governance address is set.\\n     *\\n     * @param prevGovernance The previous governance address.\\n     * @param newGovernance The new governance address set.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event ModuleGlobalsGovernanceSet(\\n        address indexed prevGovernance,\\n        address indexed newGovernance,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when the ModuleGlobals treasury address is set.\\n     *\\n     * @param prevTreasury The previous treasury address.\\n     * @param newTreasury The new treasury address set.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event ModuleGlobalsTreasurySet(\\n        address indexed prevTreasury,\\n        address indexed newTreasury,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when the ModuleGlobals treasury fee is set.\\n     *\\n     * @param prevTreasuryFee The previous treasury fee in BPS.\\n     * @param newTreasuryFee The new treasury fee in BPS.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event ModuleGlobalsTreasuryFeeSet(\\n        uint16 indexed prevTreasuryFee,\\n        uint16 indexed newTreasuryFee,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when a currency is added to or removed from the ModuleGlobals whitelist.\\n     *\\n     * @param currency The currency address.\\n     * @param prevWhitelisted Whether or not the currency was previously whitelisted.\\n     * @param whitelisted Whether or not the currency is whitelisted.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event ModuleGlobalsCurrencyWhitelisted(\\n        address indexed currency,\\n        bool indexed prevWhitelisted,\\n        bool indexed whitelisted,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when a module inheriting from the `FeeModuleBase` is constructed.\\n     *\\n     * @param moduleGlobals The ModuleGlobals contract address used.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event FeeModuleBaseConstructed(address indexed moduleGlobals, uint256 timestamp);\\n\\n    /**\\n     * @notice Emitted when a module inheriting from the `ModuleBase` is constructed.\\n     *\\n     * @param hub The LensHub contract address used.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event ModuleBaseConstructed(address indexed hub, uint256 timestamp);\\n\\n    /**\\n     * @notice Emitted when one or multiple addresses are approved (or disapproved) for following in\\n     * the `ApprovalFollowModule`.\\n     *\\n     * @param owner The profile owner who executed the approval.\\n     * @param profileId The profile ID that the follow approvals are granted/revoked for.\\n     * @param addresses The addresses that have had the follow approvals grnated/revoked.\\n     * @param approved Whether each corresponding address is now approved or disapproved.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event FollowsApproved(\\n        address indexed owner,\\n        uint256 indexed profileId,\\n        address[] addresses,\\n        bool[] approved,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when the user wants to enable or disable follows in the `LensPeriphery`.\\n     *\\n     * @param owner The profile owner who executed the toggle.\\n     * @param profileIds The array of token IDs of the profiles each followNFT is associated with.\\n     * @param enabled The array of whether each FollowNFT's follow is enabled/disabled.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event FollowsToggled(\\n        address indexed owner,\\n        uint256[] profileIds,\\n        bool[] enabled,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when the metadata associated with a profile is set in the `LensPeriphery`.\\n     *\\n     * @param profileId The profile ID the metadata is set for.\\n     * @param metadata The metadata set for the profile and user.\\n     * @param timestamp The current block timestamp.\\n     */\\n    event ProfileMetadataSet(uint256 indexed profileId, string metadata, uint256 timestamp);\\n}\\n\",\"keccak256\":\"0x01169d2dbfe115a42915a85b6471064dd77cb164b8cb7ecc4110299633dba7a3\",\"license\":\"MIT\"},\"contracts/mocks/MockFollow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IFollowNFT} from '../lens/interfaces/IFollowNFT.sol';\\nimport {IFollowModule} from '../lens/interfaces/IFollowModule.sol';\\nimport {ILensHub} from '../lens/interfaces/ILensHub.sol';\\nimport {Errors} from '../lens/libraries/Errors.sol';\\nimport {Events} from '../lens/libraries/Events.sol';\\nimport {DataTypes} from '../lens/libraries/DataTypes.sol';\\nimport {Constants} from '../lens/libraries/Constants.sol';\\nimport {LensNFTBase} from '../lens/core/base/LensNFTBase.sol';\\n\\n/**\\n * @title FollowNFT\\n * @author Lens Protocol\\n *\\n * @notice This contract is the NFT that is minted upon following a given profile. It is cloned upon first follow for a\\n * given profile, and includes built-in governance power and delegation mechanisms.\\n *\\n * NOTE: This contract assumes total NFT supply for this follow NFT will never exceed 2^128 - 1\\n */\\ncontract MockFollow is LensNFTBase, IFollowNFT {\\n    struct Snapshot {\\n        uint128 blockNumber;\\n        uint128 value;\\n    }\\n\\n    address public HUB; // immutable\\n\\n    bytes32 internal constant DELEGATE_BY_SIG_TYPEHASH =\\n        keccak256('DelegateBySig(address delegator,address delegatee,uint256 nonce,uint256 deadline)');\\n\\n    mapping(address => mapping(uint256 => Snapshot)) internal _snapshots;\\n    mapping(address => address) internal _delegates;\\n    mapping(address => uint256) internal _snapshotCount;\\n    mapping(uint256 => Snapshot) internal _delSupplySnapshots;\\n    uint256 internal _delSupplySnapshotCount;\\n    uint256 internal _profileId;\\n    uint256 internal _tokenIdCounter;\\n\\n    bool private _initialized;\\n\\n    // We create the FollowNFT with the pre-computed HUB address before deploying the hub.\\n    constructor() {\\n        // if (hub == address(0)) revert Errors.InitParamsInvalid();\\n        // HUB = hub;\\n        // _initialized = true;\\n        mint(msg.sender);\\n    }\\n\\n    /// @inheritdoc IFollowNFT\\n    function initialize(uint256 profileId) external override {\\n        if (_initialized) revert Errors.Initialized();\\n        _initialized = true;\\n        _profileId = profileId;\\n        emit Events.FollowNFTInitialized(profileId, block.timestamp);\\n    }\\n\\n    /// @inheritdoc IFollowNFT\\n    function mint(address to) public override returns (uint256) {\\n        // external\\n        // if (msg.sender != HUB) revert Errors.NotHub();\\n        unchecked {\\n            uint256 tokenId = ++_tokenIdCounter;\\n            _mint(to, tokenId);\\n            return tokenId;\\n        }\\n    }\\n\\n    /// @inheritdoc IFollowNFT\\n    function delegate(address delegatee) external override {\\n        _delegate(msg.sender, delegatee);\\n    }\\n\\n    /// @inheritdoc IFollowNFT\\n    function delegateBySig(\\n        address delegator,\\n        address delegatee,\\n        DataTypes.EIP712Signature calldata sig\\n    ) external override {\\n        unchecked {\\n            _validateRecoveredAddress(\\n                _calculateDigest(\\n                    keccak256(\\n                        abi.encode(DELEGATE_BY_SIG_TYPEHASH, delegator, delegatee, sigNonces[delegator]++, sig.deadline)\\n                    )\\n                ),\\n                delegator,\\n                sig\\n            );\\n        }\\n        _delegate(delegator, delegatee);\\n    }\\n\\n    /// @inheritdoc IFollowNFT\\n    function getPowerByBlockNumber(address user, uint256 blockNumber) external view override returns (uint256) {\\n        if (blockNumber > block.number) revert Errors.BlockNumberInvalid();\\n        uint256 snapshotCount = _snapshotCount[user];\\n        if (snapshotCount == 0) return 0; // Returning zero since this means the user never delegated and has no power\\n        return _getSnapshotValueByBlockNumber(_snapshots[user], blockNumber, snapshotCount);\\n    }\\n\\n    /// @inheritdoc IFollowNFT\\n    function getDelegatedSupplyByBlockNumber(uint256 blockNumber) external view override returns (uint256) {\\n        if (blockNumber > block.number) revert Errors.BlockNumberInvalid();\\n        uint256 snapshotCount = _delSupplySnapshotCount;\\n        if (snapshotCount == 0) return 0; // Returning zero since this means a delegation has never occurred\\n        return _getSnapshotValueByBlockNumber(_delSupplySnapshots, blockNumber, snapshotCount);\\n    }\\n\\n    function name() public view override returns (string memory) {\\n        // string memory handle = ILensHub(HUB).getHandle(_profileId);\\n        return 'MockFollow';\\n    }\\n\\n    function symbol() public view override returns (string memory) {\\n        // string memory handle = ILensHub(HUB).getHandle(_profileId);\\n        // bytes4 firstBytes = bytes4(bytes(handle));\\n        return 'MOCK';\\n    }\\n\\n    function _getSnapshotValueByBlockNumber(\\n        mapping(uint256 => Snapshot) storage _shots,\\n        uint256 blockNumber,\\n        uint256 snapshotCount\\n    ) internal view returns (uint256) {\\n        unchecked {\\n            uint256 lower = 0;\\n            uint256 upper = snapshotCount - 1;\\n\\n            // First check most recent snapshot\\n            if (_shots[upper].blockNumber <= blockNumber) return _shots[upper].value;\\n\\n            // Next check implicit zero balance\\n            if (_shots[lower].blockNumber > blockNumber) return 0;\\n\\n            while (upper > lower) {\\n                uint256 center = upper - (upper - lower) / 2;\\n                Snapshot memory snapshot = _shots[center];\\n                if (snapshot.blockNumber == blockNumber) {\\n                    return snapshot.value;\\n                } else if (snapshot.blockNumber < blockNumber) {\\n                    lower = center;\\n                } else {\\n                    upper = center - 1;\\n                }\\n            }\\n            return _shots[lower].value;\\n        }\\n    }\\n\\n    /**\\n     * @dev This returns the follow NFT URI fetched from the hub.\\n     */\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        if (!_exists(tokenId)) revert Errors.TokenDoesNotExist();\\n        return 'https://example.com/NFT';\\n    }\\n\\n    /**\\n     * @dev Upon transfers, we move the appropriate delegations, and emit the transfer event in the hub.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override {\\n        address fromDelegatee = _delegates[from];\\n        address toDelegatee = _delegates[to];\\n        // address followModule = ILensHub(HUB).getFollowModule(_profileId);\\n\\n        _moveDelegate(fromDelegatee, toDelegatee, 1);\\n\\n        super._beforeTokenTransfer(from, to, tokenId);\\n        // ILensHub(HUB).emitFollowNFTTransferEvent(_profileId, tokenId, from, to);\\n        // if (followModule != address(0)) {\\n        //     IFollowModule(followModule).followModuleTransferHook(_profileId, from, to, tokenId);\\n        // }\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        address previousDelegate = _delegates[delegator];\\n        _delegates[delegator] = delegatee;\\n        _moveDelegate(previousDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveDelegate(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        unchecked {\\n            bool fromZero = from == address(0);\\n            if (!fromZero) {\\n                uint256 fromSnapshotCount = _snapshotCount[from];\\n\\n                // Underflow is impossible since, if from != address(0), then a delegation must have occurred (at least 1 snapshot)\\n                uint256 previous = _snapshots[from][fromSnapshotCount - 1].value;\\n                uint128 newValue = uint128(previous - amount);\\n\\n                _writeSnapshot(from, newValue, fromSnapshotCount);\\n                emit Events.FollowNFTDelegatedPowerChanged(from, newValue, block.timestamp);\\n            }\\n\\n            if (to != address(0)) {\\n                // if from == address(0) then this is an initial delegation (add amount to supply)\\n                if (fromZero) {\\n                    // It is expected behavior that the `previousDelSupply` underflows upon the first delegation,\\n                    // returning the expected value of zero\\n                    uint256 delSupplySnapshotCount = _delSupplySnapshotCount;\\n                    uint128 previousDelSupply = _delSupplySnapshots[delSupplySnapshotCount - 1].value;\\n                    uint128 newDelSupply = uint128(previousDelSupply + amount);\\n                    _writeSupplySnapshot(newDelSupply, delSupplySnapshotCount);\\n                }\\n\\n                // It is expected behavior that `previous` underflows upon the first delegation to an address,\\n                // returning the expected value of zero\\n                uint256 toSnapshotCount = _snapshotCount[to];\\n                uint128 previous = _snapshots[to][toSnapshotCount - 1].value;\\n                uint128 newValue = uint128(previous + amount);\\n                _writeSnapshot(to, newValue, toSnapshotCount);\\n                emit Events.FollowNFTDelegatedPowerChanged(to, newValue, block.timestamp);\\n            } else {\\n                // If from != address(0) then this is removing a delegation, otherwise we're dealing with a\\n                // non-delegated burn of tokens and don't need to take any action\\n                if (!fromZero) {\\n                    // Upon removing delegation (from != address(0) && to == address(0)), supply calculations cannot\\n                    // underflow because if from != address(0), then a delegation must have previously occurred, so\\n                    // the snapshot count must be >= 1 and the previous delegated supply must be >= amount\\n                    uint256 delSupplySnapshotCount = _delSupplySnapshotCount;\\n                    uint128 previousDelSupply = _delSupplySnapshots[delSupplySnapshotCount - 1].value;\\n                    uint128 newDelSupply = uint128(previousDelSupply - amount);\\n                    _writeSupplySnapshot(newDelSupply, delSupplySnapshotCount);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _writeSnapshot(\\n        address owner,\\n        uint128 newValue,\\n        uint256 ownerSnapshotCount\\n    ) internal {\\n        unchecked {\\n            uint128 currentBlock = uint128(block.number);\\n            mapping(uint256 => Snapshot) storage ownerSnapshots = _snapshots[owner];\\n\\n            // Doing multiple operations in the same block\\n            if (ownerSnapshotCount != 0 && ownerSnapshots[ownerSnapshotCount - 1].blockNumber == currentBlock) {\\n                ownerSnapshots[ownerSnapshotCount - 1].value = newValue;\\n            } else {\\n                ownerSnapshots[ownerSnapshotCount] = Snapshot(currentBlock, newValue);\\n                _snapshotCount[owner] = ownerSnapshotCount + 1;\\n            }\\n        }\\n    }\\n\\n    function _writeSupplySnapshot(uint128 newValue, uint256 supplySnapshotCount) internal {\\n        unchecked {\\n            uint128 currentBlock = uint128(block.number);\\n\\n            // Doing multiple operations in the same block\\n            if (supplySnapshotCount != 0 && _delSupplySnapshots[supplySnapshotCount - 1].blockNumber == currentBlock) {\\n                _delSupplySnapshots[supplySnapshotCount - 1].value = newValue;\\n            } else {\\n                _delSupplySnapshots[supplySnapshotCount] = Snapshot(currentBlock, newValue);\\n                _delSupplySnapshotCount = supplySnapshotCount + 1;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xacb5b0b753a71df24d1cac7253fde51cd5d98f77bdb26ad6a923d6e43a0f28b5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001d3362000024565b5062000911565b60128054600101908190556000906200003e838262000044565b92915050565b6001600160a01b038216620000a05760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064015b60405180910390fd5b6000818152600260205260409020546001600160a01b031615620001075760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640162000097565b6200011560008383620001a1565b6001600160a01b038216600090815260036020526040812080546001929062000140908490620008b0565b90915550506000818152600260205260408082206001600160a01b038516600160a01b426001600160601b031602811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b038084166000908152600d60205260408082205485841683529120549082169116620001d782826001620001f6565b620001ef858585620003e960201b6200156b1760201c565b5050505050565b6001600160a01b0383161580620002aa576001600160a01b0384166000908152600e6020908152604080832054600c83528184206000198201855290925290912054600160801b90046001600160801b031683810362000258878285620004ca565b806001600160801b0316876001600160a01b03167fd9a6070174f4ccca76ed4896432e9a090b16e07e8fe27f275f50b33500b98e52426040516200029e91815260200190565b60405180910390a35050505b6001600160a01b03831615620003a3578015620002fb5760105460001981016000908152600f6020526040902054600160801b90046001600160801b0316838101620002f78184620005ab565b5050505b6001600160a01b0383166000908152600e6020908152604080832054600c83528184206000198201855290925290912054600160801b90046001600160801b03168381016200034c868285620004ca565b806001600160801b0316866001600160a01b03167fd9a6070174f4ccca76ed4896432e9a090b16e07e8fe27f275f50b33500b98e52426040516200039291815260200190565b60405180910390a3505050620003e3565b80620003e35760105460001981016000908152600f6020526040902054600160801b90046001600160801b0316838103620003df8184620005ab565b5050505b50505050565b620004018383836200049f60201b6200082c1760201c565b6001600160a01b0383166200045f576200045981600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b62000485565b816001600160a01b0316836001600160a01b031614620004855762000485838262000659565b6001600160a01b038216620004a4576200049f8162000706565b505050565b826001600160a01b0316826001600160a01b0316146200049f576200049f8282620007c0565b6001600160a01b0383166000908152600c602052604090204390821580159062000512575060001983016000908152602082905260409020546001600160801b038381169116145b1562000549576000198301600090815260208290526040902080546001600160801b03808716600160801b029116179055620001ef565b6040805180820182526001600160801b03808516825286811660208084019182526000888152868252858120945192518416600160801b0292909316919091179092556001600160a01b0388168152600e909152206001840190555050505050565b438115801590620005da575060001982016000908152600f60205260409020546001600160801b038281169116145b15620006105760001982016000908152600f6020526040902080546001600160801b03808616600160801b029116179055505050565b6040805180820182526001600160801b03928316815293821660208086019182526000858152600f90915291909120935190518216600160801b02911617909155600101601055565b6000600162000673846200081160201b62000d451760201c565b6200067f9190620008cb565b600083815260076020526040902054909150808214620006d3576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906200071a90600190620008cb565b60008381526009602052604081205460088054939450909284908110620007455762000745620008e5565b906000526020600020015490508060088381548110620007695762000769620008e5565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480620007a457620007a4620008fb565b6001900381819060005260206000200160009055905550505050565b6000620007d8836200081160201b62000d451760201c565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b60006001600160a01b0382166200087e5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840162000097565b506001600160a01b031660009081526003602052604090205490565b634e487b7160e01b600052601160045260246000fd5b60008219821115620008c657620008c66200089a565b500190565b600082821015620008e057620008e06200089a565b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b61338a80620009216000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c806370a082311161010f578063c0da9bcd116100a2578063e985e9c511610071578063e985e9c5146104e5578063ed24911d1461052e578063f990ccd714610536578063fe4b84df1461055657600080fd5b8063c0da9bcd1461045a578063c87b56dd146104ac578063dd69cdb1146104bf578063df8d8071146104d257600080fd5b806395d89b41116100de57806395d89b41146103db578063a22cb46514610414578063a4c52b8614610427578063b88d4fde1461044757600080fd5b806370a082311461038f5780637ef67f99146103a257806389028a13146103b55780638fca0d41146103c857600080fd5b806342842e0e1161018757806350ddf35c1161015657806350ddf35c146103435780635c19a95c146103565780636352211e146103695780636a6278421461037c57600080fd5b806342842e0e146102f757806342966c681461030a5780634f558e791461031d5780634f6ccce71461033057600080fd5b806318160ddd116101c357806318160ddd146102ac57806323b872dd146102be5780632c994dc8146102d15780632f745c59146102e457600080fd5b806301ffc9a7146101f557806306fdde031461021d578063081812fc1461025f578063095ea7b314610297575b600080fd5b610208610203366004612e12565b610569565b60405190151581526020015b60405180910390f35b60408051808201909152600a81527f4d6f636b466f6c6c6f770000000000000000000000000000000000000000000060208201525b6040516102149190612e9a565b61027261026d366004612ead565b6105c5565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610214565b6102aa6102a5366004612eef565b6106a4565b005b6008545b604051908152602001610214565b6102aa6102cc366004612f19565b610831565b6102b06102df366004612eef565b6108d2565b6102b06102f2366004612eef565b61097b565b6102aa610305366004612f19565b610a4a565b6102aa610318366004612ead565b610a65565b61020861032b366004612ead565b610ab1565b6102b061033e366004612ead565b610add565b6102b0610351366004612ead565b610b9b565b6102aa610364366004612f55565b610c71565b610272610377366004612ead565b610c7b565b6102b061038a366004612f55565b610d2d565b6102b061039d366004612f55565b610d45565b6102aa6103b0366004612f88565b610e13565b6102aa6103c3366004612fd5565b610f2c565b6102b06103d6366004612ead565b611024565b60408051808201909152600481527f4d4f434b000000000000000000000000000000000000000000000000000000006020820152610252565b6102aa61042236600461302a565b611084565b600b546102729073ffffffffffffffffffffffffffffffffffffffff1681565b6102aa61045536600461308c565b611113565b61046d610468366004612ead565b6111b5565b60408051825173ffffffffffffffffffffffffffffffffffffffff1681526020928301516bffffffffffffffffffffffff169281019290925201610214565b6102526104ba366004612ead565b6112dc565b6102aa6104cd366004613186565b611373565b6102aa6104e03660046131aa565b61140e565b6102086104f33660046131e5565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260056020908152604080832093909416825291909152205460ff1690565b6102b06114b0565b6102b0610544366004612f55565b600a6020526000908152604090205481565b6102aa610564366004612ead565b6114bf565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d630000000000000000000000000000000000000000000000000000000014806105bf57506105bf82611671565b92915050565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff1661067b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060009081526004602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60006106af82610c7b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561076d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610672565b3373ffffffffffffffffffffffffffffffffffffffff82161480610796575061079681336104f3565b610822576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610672565b61082c8383611754565b505050565b61083b33826117f4565b6108c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610672565b61082c838383611960565b60004382111561090e576040517f2b23a7c000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83166000908152600e6020526040902054806109435760009150506105bf565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600c60205260409020610973908483611bd2565b949350505050565b600061098683610d45565b8210610a14576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610672565b5073ffffffffffffffffffffffffffffffffffffffff919091166000908152600660209081526040808320938352929052205490565b61082c83838360405180602001604052806000815250611113565b610a6f33826117f4565b610aa5576040517fdb1453ce00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610aae81611d86565b50565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff1615156105bf565b6000610ae860085490565b8210610b76576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610672565b60088281548110610b8957610b8961320f565b90600052602060002001549050919050565b6000818152600260205260408120547401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1680610c5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a206d696e742074696d657374616d7020717565727920666f7260448201527f206e6f6e6578697374656e7420746f6b656e00000000000000000000000000006064820152608401610672565b6bffffffffffffffffffffffff1692915050565b610aae3382611e3c565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff16806105bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610672565b60128054600101908190556000906105bf8382611ea8565b600073ffffffffffffffffffffffffffffffffffffffff8216610dea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610672565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b73ffffffffffffffffffffffffffffffffffffffff8316610e60576040517f1fac5b7400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610e6b83610c7b565b73ffffffffffffffffffffffffffffffffffffffff8181166000908152600a602090815260409182902080546001810190915582517f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad9281019290925292881691810191909152606080820187905260808201929092529084013560a0820152909150610f1c90610f159060c0015b60405160208183030381529060405280519060200120612077565b82846120fa565b610f268484611754565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316610f79576040517f1fac5b7400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8481166000818152600a602090815260409182902080546001810190915582517f47ab88482c90e4bb94b82a947ae78fa91fb25de1469ab491f4c15b9a0a2677ee9281019290925291810192909252918516606080830191909152841515608083015260a08201929092529082013560c0820152611019906110129060e001610efa565b85836120fa565b610f2684848461224f565b600043821115611060576040517f2b23a7c000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601054806110715750600092915050565b61107d600f8483611bd2565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8216331415611104576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610672565b61110f33838361224f565b5050565b61111d33836117f4565b6111a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610672565b610f26848484846122e7565b604080518082019091526000808252602082015260008281526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1661127a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4552433732313a20746f6b656e206461746120717565727920666f72206e6f6e60448201527f6578697374656e7420746f6b656e0000000000000000000000000000000000006064820152608401610672565b5060009081526002602090815260409182902082518084019093525473ffffffffffffffffffffffffffffffffffffffff811683527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169082015290565b60008181526002602052604090205460609073ffffffffffffffffffffffffffffffffffffffff1661133a576040517fceea21b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505060408051808201909152601781527f68747470733a2f2f6578616d706c652e636f6d2f4e4654000000000000000000602082015290565b600061137e83610c7b565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600a602090815260409182902080546001810190915582517f108ccda6d7331b00561a3eea66a2ae331622356585681c62731e4a01aae2261a9281019290925291810186905260608082019290925290840135608082015290915061140590610f159060a001610efa565b61082c83611d86565b73ffffffffffffffffffffffffffffffffffffffff8381166000818152600a602090815260409182902080546001810190915582517fb8f190a57772800093f4e2b186099eb4f1df0ed7f5e2791e89a4a07678e0aeff928101929092529181019290925291841660608083019190915260808201929092529082013560a08201526114a69061149f9060c001610efa565b84836120fa565b61082c8383611e3c565b60006114ba61238a565b905090565b60135460ff16156114fc576040517f5daa87a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055601181905560405181907faec15127df11a6b562c87d31bcb8f4cd2f0cf57fb9b663d6334abf41fea94d95906115609042815260200190565b60405180910390a250565b73ffffffffffffffffffffffffffffffffffffffff83166115d3576115ce81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611610565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611610576116108382612451565b73ffffffffffffffffffffffffffffffffffffffff82166116345761082c81612508565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461082c5761082c82826125b7565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061170457507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806105bf57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146105bf565b600081815260046020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff841690811790915581906117ae82610c7b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff166118a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610672565b60006118b083610c7b565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061191f57508373ffffffffffffffffffffffffffffffffffffffff16611907846105c5565b73ffffffffffffffffffffffffffffffffffffffff16145b80610973575073ffffffffffffffffffffffffffffffffffffffff80821660009081526005602090815260408083209388168352929052205460ff16610973565b8273ffffffffffffffffffffffffffffffffffffffff1661198082610c7b565b73ffffffffffffffffffffffffffffffffffffffff1614611a23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610672565b73ffffffffffffffffffffffffffffffffffffffff8216611ac5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610672565b611ad0838383612608565b611adb600082611754565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600360205260408120805460019290611b1190849061326d565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260408120805460019290611b4c908490613284565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101600081815260208590526040812054909182916fffffffffffffffffffffffffffffffff168510611c5e5760009081526020869052604090205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16915061107d9050565b6000828152602087905260409020546fffffffffffffffffffffffffffffffff16851015611c915760009250505061107d565b81811115611d47576002828203048103600081815260208881526040918290208251808401909352546fffffffffffffffffffffffffffffffff8082168085527001000000000000000000000000000000009092041691830191909152871415611d1657602001516fffffffffffffffffffffffffffffffff16935061107d92505050565b80516fffffffffffffffffffffffffffffffff16871115611d3957819350611d40565b6001820392505b5050611c91565b5060009081526020859052604090205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1690509392505050565b6000611d9182610c7b565b9050611d9f81600084612608565b611daa600083611754565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600360205260408120805460019290611de090849061326d565b90915550506000828152600260205260408082208290555183919073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000611e4783610d45565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600d6020526040902080548583167fffffffffffffffffffffffff000000000000000000000000000000000000000082161790915591925016610f2681848461265b565b73ffffffffffffffffffffffffffffffffffffffff8216611f25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610672565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1615611fb1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610672565b611fbd60008383612608565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260408120805460019290611ff3908490613284565b909155505060008181526002602052604080822073ffffffffffffffffffffffffffffffffffffffff851674010000000000000000000000000000000000000000426bffffffffffffffffffffffff1602811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008061208261238a565b6040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281019190915260428101849052606201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209392505050565b4281606001351015612138576040517f0819bdcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018461214a602085018561329c565b604080516000815260208181018084529490945260ff9092168282015291850135606082015290840135608082015260a0016020604051602081039080840390855afa15801561219e573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116158061221857508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b15610f26576040517f37e8456b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83811660008181526005602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6122f2848484611960565b6122fe8484848461296e565b610f26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610672565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6123e760408051808201909152600a81527f4d6f636b466f6c6c6f7700000000000000000000000000000000000000000000602082015290565b80516020918201206040805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000600161245e84610d45565b612468919061326d565b6000838152600760205260409020549091508082146124c85773ffffffffffffffffffffffffffffffffffffffff841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b50600091825260076020908152604080842084905573ffffffffffffffffffffffffffffffffffffffff9094168352600681528383209183525290812055565b60085460009061251a9060019061326d565b600083815260096020526040812054600880549394509092849081106125425761254261320f565b9060005260206000200154905080600883815481106125635761256361320f565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061259b5761259b6132bf565b6001900381819060005260206000200160009055905550505050565b60006125c283610d45565b73ffffffffffffffffffffffffffffffffffffffff9093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600d602052604080822054858416835291205490821691166126498282600161265b565b61265485858561156b565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff8316158061276f5773ffffffffffffffffffffffffffffffffffffffff84166000908152600e6020908152604080832054600c83528184207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820185529092529091205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16838103612708878285612b5e565b806fffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fd9a6070174f4ccca76ed4896432e9a090b16e07e8fe27f275f50b33500b98e524260405161276391815260200190565b60405180910390a35050505b73ffffffffffffffffffffffffffffffffffffffff8316156128f85780156127fd576010547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81016000908152600f602052604090205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff168381016127f98184612cc7565b5050505b73ffffffffffffffffffffffffffffffffffffffff83166000908152600e6020908152604080832054600c83528184207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820185529092529091205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1683810161288d868285612b5e565b806fffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fd9a6070174f4ccca76ed4896432e9a090b16e07e8fe27f275f50b33500b98e52426040516128e891815260200190565b60405180910390a3505050610f26565b80610f26576010547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81016000908152600f602052604090205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff168381036129658184612cc7565b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff84163b15612b53576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a02906129e59033908990889088906004016132ee565b6020604051808303816000875af1925050508015612a3e575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252612a3b91810190613337565b60015b612b08573d808015612a6c576040519150601f19603f3d011682016040523d82523d6000602084013e612a71565b606091505b508051612b00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610672565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050610973565b506001949350505050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600c6020526040902043908215801590612bd957507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83016000908152602082905260409020546fffffffffffffffffffffffffffffffff8381169116145b15612c42577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301600090815260208290526040902080546fffffffffffffffffffffffffffffffff808716700100000000000000000000000000000000029116179055612654565b6040805180820182526fffffffffffffffffffffffffffffffff80851682528681166020808401918252600088815286825285812094519251841670010000000000000000000000000000000002929093169190911790925573ffffffffffffffffffffffffffffffffffffffff88168152600e909152206001840190555050505050565b438115801590612d1c57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82016000908152600f60205260409020546fffffffffffffffffffffffffffffffff8281169116145b15612d85577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82016000908152600f6020526040902080546fffffffffffffffffffffffffffffffff808616700100000000000000000000000000000000029116179055505050565b6040805180820182526fffffffffffffffffffffffffffffffff928316815293821660208086019182526000858152600f9091529190912093519051821670010000000000000000000000000000000002911617909155600101601055565b7fffffffff0000000000000000000000000000000000000000000000000000000081168114610aae57600080fd5b600060208284031215612e2457600080fd5b813561107d81612de4565b6000815180845260005b81811015612e5557602081850181015186830182015201612e39565b81811115612e67576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061107d6020830184612e2f565b600060208284031215612ebf57600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114612eea57600080fd5b919050565b60008060408385031215612f0257600080fd5b612f0b83612ec6565b946020939093013593505050565b600080600060608486031215612f2e57600080fd5b612f3784612ec6565b9250612f4560208501612ec6565b9150604084013590509250925092565b600060208284031215612f6757600080fd5b61107d82612ec6565b600060808284031215612f8257600080fd5b50919050565b600080600060c08486031215612f9d57600080fd5b612fa684612ec6565b925060208401359150612fbc8560408601612f70565b90509250925092565b80358015158114612eea57600080fd5b60008060008060e08587031215612feb57600080fd5b612ff485612ec6565b935061300260208601612ec6565b925061301060408601612fc5565b915061301f8660608701612f70565b905092959194509250565b6000806040838503121561303d57600080fd5b61304683612ec6565b915061305460208401612fc5565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080600080608085870312156130a257600080fd5b6130ab85612ec6565b93506130b960208601612ec6565b925060408501359150606085013567ffffffffffffffff808211156130dd57600080fd5b818701915087601f8301126130f157600080fd5b8135818111156131035761310361305d565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156131495761314961305d565b816040528281528a602084870101111561316257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060a0838503121561319957600080fd5b823591506130548460208501612f70565b600080600060c084860312156131bf57600080fd5b6131c884612ec6565b92506131d660208501612ec6565b9150612fbc8560408601612f70565b600080604083850312156131f857600080fd5b61320183612ec6565b915061305460208401612ec6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561327f5761327f61323e565b500390565b600082198211156132975761329761323e565b500190565b6000602082840312156132ae57600080fd5b813560ff8116811461107d57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600073ffffffffffffffffffffffffffffffffffffffff80871683528086166020840152508360408301526080606083015261332d6080830184612e2f565b9695505050505050565b60006020828403121561334957600080fd5b815161107d81612de456fea2646970667358221220ef82b7644ea8a2a95d25997048fb2d5049561265b65ace44ed3e9d069f7c612c64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c806370a082311161010f578063c0da9bcd116100a2578063e985e9c511610071578063e985e9c5146104e5578063ed24911d1461052e578063f990ccd714610536578063fe4b84df1461055657600080fd5b8063c0da9bcd1461045a578063c87b56dd146104ac578063dd69cdb1146104bf578063df8d8071146104d257600080fd5b806395d89b41116100de57806395d89b41146103db578063a22cb46514610414578063a4c52b8614610427578063b88d4fde1461044757600080fd5b806370a082311461038f5780637ef67f99146103a257806389028a13146103b55780638fca0d41146103c857600080fd5b806342842e0e1161018757806350ddf35c1161015657806350ddf35c146103435780635c19a95c146103565780636352211e146103695780636a6278421461037c57600080fd5b806342842e0e146102f757806342966c681461030a5780634f558e791461031d5780634f6ccce71461033057600080fd5b806318160ddd116101c357806318160ddd146102ac57806323b872dd146102be5780632c994dc8146102d15780632f745c59146102e457600080fd5b806301ffc9a7146101f557806306fdde031461021d578063081812fc1461025f578063095ea7b314610297575b600080fd5b610208610203366004612e12565b610569565b60405190151581526020015b60405180910390f35b60408051808201909152600a81527f4d6f636b466f6c6c6f770000000000000000000000000000000000000000000060208201525b6040516102149190612e9a565b61027261026d366004612ead565b6105c5565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610214565b6102aa6102a5366004612eef565b6106a4565b005b6008545b604051908152602001610214565b6102aa6102cc366004612f19565b610831565b6102b06102df366004612eef565b6108d2565b6102b06102f2366004612eef565b61097b565b6102aa610305366004612f19565b610a4a565b6102aa610318366004612ead565b610a65565b61020861032b366004612ead565b610ab1565b6102b061033e366004612ead565b610add565b6102b0610351366004612ead565b610b9b565b6102aa610364366004612f55565b610c71565b610272610377366004612ead565b610c7b565b6102b061038a366004612f55565b610d2d565b6102b061039d366004612f55565b610d45565b6102aa6103b0366004612f88565b610e13565b6102aa6103c3366004612fd5565b610f2c565b6102b06103d6366004612ead565b611024565b60408051808201909152600481527f4d4f434b000000000000000000000000000000000000000000000000000000006020820152610252565b6102aa61042236600461302a565b611084565b600b546102729073ffffffffffffffffffffffffffffffffffffffff1681565b6102aa61045536600461308c565b611113565b61046d610468366004612ead565b6111b5565b60408051825173ffffffffffffffffffffffffffffffffffffffff1681526020928301516bffffffffffffffffffffffff169281019290925201610214565b6102526104ba366004612ead565b6112dc565b6102aa6104cd366004613186565b611373565b6102aa6104e03660046131aa565b61140e565b6102086104f33660046131e5565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260056020908152604080832093909416825291909152205460ff1690565b6102b06114b0565b6102b0610544366004612f55565b600a6020526000908152604090205481565b6102aa610564366004612ead565b6114bf565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d630000000000000000000000000000000000000000000000000000000014806105bf57506105bf82611671565b92915050565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff1661067b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060009081526004602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60006106af82610c7b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561076d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610672565b3373ffffffffffffffffffffffffffffffffffffffff82161480610796575061079681336104f3565b610822576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610672565b61082c8383611754565b505050565b61083b33826117f4565b6108c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610672565b61082c838383611960565b60004382111561090e576040517f2b23a7c000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83166000908152600e6020526040902054806109435760009150506105bf565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600c60205260409020610973908483611bd2565b949350505050565b600061098683610d45565b8210610a14576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610672565b5073ffffffffffffffffffffffffffffffffffffffff919091166000908152600660209081526040808320938352929052205490565b61082c83838360405180602001604052806000815250611113565b610a6f33826117f4565b610aa5576040517fdb1453ce00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610aae81611d86565b50565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff1615156105bf565b6000610ae860085490565b8210610b76576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610672565b60088281548110610b8957610b8961320f565b90600052602060002001549050919050565b6000818152600260205260408120547401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1680610c5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a206d696e742074696d657374616d7020717565727920666f7260448201527f206e6f6e6578697374656e7420746f6b656e00000000000000000000000000006064820152608401610672565b6bffffffffffffffffffffffff1692915050565b610aae3382611e3c565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff16806105bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610672565b60128054600101908190556000906105bf8382611ea8565b600073ffffffffffffffffffffffffffffffffffffffff8216610dea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610672565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b73ffffffffffffffffffffffffffffffffffffffff8316610e60576040517f1fac5b7400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610e6b83610c7b565b73ffffffffffffffffffffffffffffffffffffffff8181166000908152600a602090815260409182902080546001810190915582517f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad9281019290925292881691810191909152606080820187905260808201929092529084013560a0820152909150610f1c90610f159060c0015b60405160208183030381529060405280519060200120612077565b82846120fa565b610f268484611754565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316610f79576040517f1fac5b7400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8481166000818152600a602090815260409182902080546001810190915582517f47ab88482c90e4bb94b82a947ae78fa91fb25de1469ab491f4c15b9a0a2677ee9281019290925291810192909252918516606080830191909152841515608083015260a08201929092529082013560c0820152611019906110129060e001610efa565b85836120fa565b610f2684848461224f565b600043821115611060576040517f2b23a7c000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601054806110715750600092915050565b61107d600f8483611bd2565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8216331415611104576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610672565b61110f33838361224f565b5050565b61111d33836117f4565b6111a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610672565b610f26848484846122e7565b604080518082019091526000808252602082015260008281526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1661127a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4552433732313a20746f6b656e206461746120717565727920666f72206e6f6e60448201527f6578697374656e7420746f6b656e0000000000000000000000000000000000006064820152608401610672565b5060009081526002602090815260409182902082518084019093525473ffffffffffffffffffffffffffffffffffffffff811683527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169082015290565b60008181526002602052604090205460609073ffffffffffffffffffffffffffffffffffffffff1661133a576040517fceea21b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505060408051808201909152601781527f68747470733a2f2f6578616d706c652e636f6d2f4e4654000000000000000000602082015290565b600061137e83610c7b565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600a602090815260409182902080546001810190915582517f108ccda6d7331b00561a3eea66a2ae331622356585681c62731e4a01aae2261a9281019290925291810186905260608082019290925290840135608082015290915061140590610f159060a001610efa565b61082c83611d86565b73ffffffffffffffffffffffffffffffffffffffff8381166000818152600a602090815260409182902080546001810190915582517fb8f190a57772800093f4e2b186099eb4f1df0ed7f5e2791e89a4a07678e0aeff928101929092529181019290925291841660608083019190915260808201929092529082013560a08201526114a69061149f9060c001610efa565b84836120fa565b61082c8383611e3c565b60006114ba61238a565b905090565b60135460ff16156114fc576040517f5daa87a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055601181905560405181907faec15127df11a6b562c87d31bcb8f4cd2f0cf57fb9b663d6334abf41fea94d95906115609042815260200190565b60405180910390a250565b73ffffffffffffffffffffffffffffffffffffffff83166115d3576115ce81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611610565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611610576116108382612451565b73ffffffffffffffffffffffffffffffffffffffff82166116345761082c81612508565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461082c5761082c82826125b7565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061170457507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806105bf57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146105bf565b600081815260046020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff841690811790915581906117ae82610c7b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff166118a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610672565b60006118b083610c7b565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061191f57508373ffffffffffffffffffffffffffffffffffffffff16611907846105c5565b73ffffffffffffffffffffffffffffffffffffffff16145b80610973575073ffffffffffffffffffffffffffffffffffffffff80821660009081526005602090815260408083209388168352929052205460ff16610973565b8273ffffffffffffffffffffffffffffffffffffffff1661198082610c7b565b73ffffffffffffffffffffffffffffffffffffffff1614611a23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610672565b73ffffffffffffffffffffffffffffffffffffffff8216611ac5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610672565b611ad0838383612608565b611adb600082611754565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600360205260408120805460019290611b1190849061326d565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260408120805460019290611b4c908490613284565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101600081815260208590526040812054909182916fffffffffffffffffffffffffffffffff168510611c5e5760009081526020869052604090205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16915061107d9050565b6000828152602087905260409020546fffffffffffffffffffffffffffffffff16851015611c915760009250505061107d565b81811115611d47576002828203048103600081815260208881526040918290208251808401909352546fffffffffffffffffffffffffffffffff8082168085527001000000000000000000000000000000009092041691830191909152871415611d1657602001516fffffffffffffffffffffffffffffffff16935061107d92505050565b80516fffffffffffffffffffffffffffffffff16871115611d3957819350611d40565b6001820392505b5050611c91565b5060009081526020859052604090205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1690509392505050565b6000611d9182610c7b565b9050611d9f81600084612608565b611daa600083611754565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600360205260408120805460019290611de090849061326d565b90915550506000828152600260205260408082208290555183919073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000611e4783610d45565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600d6020526040902080548583167fffffffffffffffffffffffff000000000000000000000000000000000000000082161790915591925016610f2681848461265b565b73ffffffffffffffffffffffffffffffffffffffff8216611f25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610672565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1615611fb1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610672565b611fbd60008383612608565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260408120805460019290611ff3908490613284565b909155505060008181526002602052604080822073ffffffffffffffffffffffffffffffffffffffff851674010000000000000000000000000000000000000000426bffffffffffffffffffffffff1602811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008061208261238a565b6040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281019190915260428101849052606201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209392505050565b4281606001351015612138576040517f0819bdcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018461214a602085018561329c565b604080516000815260208181018084529490945260ff9092168282015291850135606082015290840135608082015260a0016020604051602081039080840390855afa15801561219e573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116158061221857508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b15610f26576040517f37e8456b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83811660008181526005602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6122f2848484611960565b6122fe8484848461296e565b610f26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610672565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6123e760408051808201909152600a81527f4d6f636b466f6c6c6f7700000000000000000000000000000000000000000000602082015290565b80516020918201206040805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000600161245e84610d45565b612468919061326d565b6000838152600760205260409020549091508082146124c85773ffffffffffffffffffffffffffffffffffffffff841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b50600091825260076020908152604080842084905573ffffffffffffffffffffffffffffffffffffffff9094168352600681528383209183525290812055565b60085460009061251a9060019061326d565b600083815260096020526040812054600880549394509092849081106125425761254261320f565b9060005260206000200154905080600883815481106125635761256361320f565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061259b5761259b6132bf565b6001900381819060005260206000200160009055905550505050565b60006125c283610d45565b73ffffffffffffffffffffffffffffffffffffffff9093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600d602052604080822054858416835291205490821691166126498282600161265b565b61265485858561156b565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff8316158061276f5773ffffffffffffffffffffffffffffffffffffffff84166000908152600e6020908152604080832054600c83528184207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820185529092529091205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16838103612708878285612b5e565b806fffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fd9a6070174f4ccca76ed4896432e9a090b16e07e8fe27f275f50b33500b98e524260405161276391815260200190565b60405180910390a35050505b73ffffffffffffffffffffffffffffffffffffffff8316156128f85780156127fd576010547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81016000908152600f602052604090205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff168381016127f98184612cc7565b5050505b73ffffffffffffffffffffffffffffffffffffffff83166000908152600e6020908152604080832054600c83528184207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820185529092529091205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1683810161288d868285612b5e565b806fffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fd9a6070174f4ccca76ed4896432e9a090b16e07e8fe27f275f50b33500b98e52426040516128e891815260200190565b60405180910390a3505050610f26565b80610f26576010547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81016000908152600f602052604090205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff168381036129658184612cc7565b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff84163b15612b53576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a02906129e59033908990889088906004016132ee565b6020604051808303816000875af1925050508015612a3e575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252612a3b91810190613337565b60015b612b08573d808015612a6c576040519150601f19603f3d011682016040523d82523d6000602084013e612a71565b606091505b508051612b00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610672565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050610973565b506001949350505050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600c6020526040902043908215801590612bd957507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83016000908152602082905260409020546fffffffffffffffffffffffffffffffff8381169116145b15612c42577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301600090815260208290526040902080546fffffffffffffffffffffffffffffffff808716700100000000000000000000000000000000029116179055612654565b6040805180820182526fffffffffffffffffffffffffffffffff80851682528681166020808401918252600088815286825285812094519251841670010000000000000000000000000000000002929093169190911790925573ffffffffffffffffffffffffffffffffffffffff88168152600e909152206001840190555050505050565b438115801590612d1c57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82016000908152600f60205260409020546fffffffffffffffffffffffffffffffff8281169116145b15612d85577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82016000908152600f6020526040902080546fffffffffffffffffffffffffffffffff808616700100000000000000000000000000000000029116179055505050565b6040805180820182526fffffffffffffffffffffffffffffffff928316815293821660208086019182526000858152600f9091529190912093519051821670010000000000000000000000000000000002911617909155600101601055565b7fffffffff0000000000000000000000000000000000000000000000000000000081168114610aae57600080fd5b600060208284031215612e2457600080fd5b813561107d81612de4565b6000815180845260005b81811015612e5557602081850181015186830182015201612e39565b81811115612e67576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061107d6020830184612e2f565b600060208284031215612ebf57600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114612eea57600080fd5b919050565b60008060408385031215612f0257600080fd5b612f0b83612ec6565b946020939093013593505050565b600080600060608486031215612f2e57600080fd5b612f3784612ec6565b9250612f4560208501612ec6565b9150604084013590509250925092565b600060208284031215612f6757600080fd5b61107d82612ec6565b600060808284031215612f8257600080fd5b50919050565b600080600060c08486031215612f9d57600080fd5b612fa684612ec6565b925060208401359150612fbc8560408601612f70565b90509250925092565b80358015158114612eea57600080fd5b60008060008060e08587031215612feb57600080fd5b612ff485612ec6565b935061300260208601612ec6565b925061301060408601612fc5565b915061301f8660608701612f70565b905092959194509250565b6000806040838503121561303d57600080fd5b61304683612ec6565b915061305460208401612fc5565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080600080608085870312156130a257600080fd5b6130ab85612ec6565b93506130b960208601612ec6565b925060408501359150606085013567ffffffffffffffff808211156130dd57600080fd5b818701915087601f8301126130f157600080fd5b8135818111156131035761310361305d565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156131495761314961305d565b816040528281528a602084870101111561316257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060a0838503121561319957600080fd5b823591506130548460208501612f70565b600080600060c084860312156131bf57600080fd5b6131c884612ec6565b92506131d660208501612ec6565b9150612fbc8560408601612f70565b600080604083850312156131f857600080fd5b61320183612ec6565b915061305460208401612ec6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561327f5761327f61323e565b500390565b600082198211156132975761329761323e565b500190565b6000602082840312156132ae57600080fd5b813560ff8116811461107d57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600073ffffffffffffffffffffffffffffffffffffffff80871683528086166020840152508360408301526080606083015261332d6080830184612e2f565b9695505050505050565b60006020828403121561334957600080fd5b815161107d81612de456fea2646970667358221220ef82b7644ea8a2a95d25997048fb2d5049561265b65ace44ed3e9d069f7c612c64736f6c634300080a0033",
  "devdoc": {
    "author": "Lens Protocol",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "params": {
          "tokenId": "The token ID of the token to burn."
        }
      },
      "burnWithSig(uint256,(uint8,bytes32,bytes32,uint256))": {
        "params": {
          "sig": "The EIP712 signature struct.",
          "tokenId": "The token ID of the token to burn."
        }
      },
      "delegate(address)": {
        "params": {
          "delegatee": "The delegatee address to delegate governance power to."
        }
      },
      "delegateBySig(address,address,(uint8,bytes32,bytes32,uint256))": {
        "params": {
          "delegatee": "The delegatee address, who is receiving the governance power delegation.",
          "delegator": "The delegator address, who is the signer.",
          "sig": "The EIP712Signature struct containing the necessary parameters to recover the delegator's signature."
        }
      },
      "exists(uint256)": {
        "details": "See {IERC721Time-exists}"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getDelegatedSupplyByBlockNumber(uint256)": {
        "params": {
          "blockNumber": "The block number to query the delegated supply at."
        },
        "returns": {
          "_0": "uint256 The delegated supply at the given block number."
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "bytes32 The domain separator."
        }
      },
      "getPowerByBlockNumber(address,uint256)": {
        "params": {
          "blockNumber": "The block number to query the user's governance power at.",
          "user": "The user to query governance power for."
        },
        "returns": {
          "_0": "uint256 The power of the given user at the given block number."
        }
      },
      "initialize(uint256)": {
        "params": {
          "profileId": "The token ID of the profile in the hub associated with this followNFT, used for transfer hooks."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(address)": {
        "params": {
          "to": "The address to mint the NFT to."
        },
        "returns": {
          "_0": "uint256 An interger representing the minted token ID."
        }
      },
      "mintTimestampOf(uint256)": {
        "details": "See {IERC721Time-mintTimestampOf}"
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "permit(address,uint256,(uint8,bytes32,bytes32,uint256))": {
        "params": {
          "sig": "The EIP712 signature struct.",
          "spender": "The NFT spender.",
          "tokenId": "The NFT token ID to approve."
        }
      },
      "permitForAll(address,address,bool,(uint8,bytes32,bytes32,uint256))": {
        "params": {
          "approved": "Whether to approve or revoke approval from the operator.",
          "operator": "The operator to approve.",
          "owner": "The owner to set operator approvals for.",
          "sig": "The EIP712 signature struct."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenDataOf(uint256)": {
        "details": "See {IERC721Time-mintTimestampOf}"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "This returns the follow NFT URI fetched from the hub."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "title": "FollowNFT",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "Burns an NFT, removing it from circulation and essentially destroying it. This function can only be called by the NFT to burn's owner."
      },
      "burnWithSig(uint256,(uint8,bytes32,bytes32,uint256))": {
        "notice": "Implementation of an EIP-712 permit-style function for token burning. Allows anyone to burn a token on behalf of the owner with a signature."
      },
      "delegate(address)": {
        "notice": "Delegates the caller's governance power to the given delegatee address."
      },
      "delegateBySig(address,address,(uint8,bytes32,bytes32,uint256))": {
        "notice": "Delegates the delegator's governance power via meta-tx to the given delegatee address."
      },
      "getDelegatedSupplyByBlockNumber(uint256)": {
        "notice": "Returns the total delegated supply at a specified block number. This is the sum of all current available voting power at a given block."
      },
      "getDomainSeparator()": {
        "notice": "Returns the domain separator for this NFT contract."
      },
      "getPowerByBlockNumber(address,uint256)": {
        "notice": "Returns the governance power for a given user at a specified block number."
      },
      "initialize(uint256)": {
        "notice": "Initializes the follow NFT, setting the hub as the privileged minter and storing the associated profile ID."
      },
      "mint(address)": {
        "notice": "Mints a follow NFT to the specified address. This can only be called by the hub, and is called upon follow."
      },
      "permit(address,uint256,(uint8,bytes32,bytes32,uint256))": {
        "notice": "Implementation of an EIP-712 permit function for an ERC-721 NFT. We don't need to check if the tokenId exists, since the function calls ownerOf(tokenId), which reverts if the tokenId does not exist."
      },
      "permitForAll(address,address,bool,(uint8,bytes32,bytes32,uint256))": {
        "notice": "Implementation of an EIP-712 permit-style function for ERC-721 operator approvals. Allows an operator address to control all NFTs a given owner owns."
      }
    },
    "notice": "This contract is the NFT that is minted upon following a given profile. It is cloned upon first follow for a given profile, and includes built-in governance power and delegation mechanisms. NOTE: This contract assumes total NFT supply for this follow NFT will never exceed 2^128 - 1",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1134,
        "contract": "contracts/mocks/MockFollow.sol:MockFollow",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1136,
        "contract": "contracts/mocks/MockFollow.sol:MockFollow",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1141,
        "contract": "contracts/mocks/MockFollow.sol:MockFollow",
        "label": "_tokenData",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(TokenData)2029_storage)"
      },
      {
        "astId": 1145,
        "contract": "contracts/mocks/MockFollow.sol:MockFollow",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1149,
        "contract": "contracts/mocks/MockFollow.sol:MockFollow",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1155,
        "contract": "contracts/mocks/MockFollow.sol:MockFollow",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 785,
        "contract": "contracts/mocks/MockFollow.sol:MockFollow",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 789,
        "contract": "contracts/mocks/MockFollow.sol:MockFollow",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 792,
        "contract": "contracts/mocks/MockFollow.sol:MockFollow",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 796,
        "contract": "contracts/mocks/MockFollow.sol:MockFollow",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2103,
        "contract": "contracts/mocks/MockFollow.sol:MockFollow",
        "label": "sigNonces",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3840,
        "contract": "contracts/mocks/MockFollow.sol:MockFollow",
        "label": "HUB",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 3852,
        "contract": "contracts/mocks/MockFollow.sol:MockFollow",
        "label": "_snapshots",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Snapshot)3838_storage))"
      },
      {
        "astId": 3856,
        "contract": "contracts/mocks/MockFollow.sol:MockFollow",
        "label": "_delegates",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3860,
        "contract": "contracts/mocks/MockFollow.sol:MockFollow",
        "label": "_snapshotCount",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3865,
        "contract": "contracts/mocks/MockFollow.sol:MockFollow",
        "label": "_delSupplySnapshots",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(Snapshot)3838_storage)"
      },
      {
        "astId": 3867,
        "contract": "contracts/mocks/MockFollow.sol:MockFollow",
        "label": "_delSupplySnapshotCount",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 3869,
        "contract": "contracts/mocks/MockFollow.sol:MockFollow",
        "label": "_profileId",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 3871,
        "contract": "contracts/mocks/MockFollow.sol:MockFollow",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 3873,
        "contract": "contracts/mocks/MockFollow.sol:MockFollow",
        "label": "_initialized",
        "offset": 0,
        "slot": "19",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Snapshot)3838_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct MockFollow.Snapshot))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Snapshot)3838_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Snapshot)3838_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MockFollow.Snapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(Snapshot)3838_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenData)2029_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IERC721Time.TokenData)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenData)2029_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Snapshot)3838_storage": {
        "encoding": "inplace",
        "label": "struct MockFollow.Snapshot",
        "members": [
          {
            "astId": 3835,
            "contract": "contracts/mocks/MockFollow.sol:MockFollow",
            "label": "blockNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 3837,
            "contract": "contracts/mocks/MockFollow.sol:MockFollow",
            "label": "value",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenData)2029_storage": {
        "encoding": "inplace",
        "label": "struct IERC721Time.TokenData",
        "members": [
          {
            "astId": 2026,
            "contract": "contracts/mocks/MockFollow.sol:MockFollow",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2028,
            "contract": "contracts/mocks/MockFollow.sol:MockFollow",
            "label": "mintTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}