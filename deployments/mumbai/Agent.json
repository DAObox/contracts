{
  "address": "0xCf3f2c6b03295CF2C4E6C732d5c59576C1FF8bA7",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "ADD_PROTECTED_TOKEN_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "hasInitialized",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ERC1271_INTERFACE_ID",
      "outputs": [
        {
          "name": "",
          "type": "bytes4"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_operator",
          "type": "address"
        },
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "name": "",
          "type": "bytes4"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "name": "",
          "type": "bytes4"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ERC1271_RETURN_INVALID_SIGNATURE",
      "outputs": [
        {
          "name": "",
          "type": "bytes4"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "TRANSFER_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_data",
          "type": "bytes"
        },
        {
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "name": "",
          "type": "bytes4"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getProtectedTokensLength",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_script",
          "type": "bytes"
        }
      ],
      "name": "getEVMScriptExecutor",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRecoveryVault",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "RUN_SCRIPT_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "SAFE_EXECUTE_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "REMOVE_PROTECTED_TOKEN_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isDepositable",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "presignHash",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "DESIGNATE_SIGNER_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "removeProtectedToken",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "EXECUTE_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "addProtectedToken",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowRecoverability",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "appId",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "protectedTokens",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getInitializationBlock",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ERC1271_RETURN_VALID_SIGNATURE",
      "outputs": [
        {
          "name": "",
          "type": "bytes4"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "transferToVault",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_sender",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "bytes32"
        },
        {
          "name": "_params",
          "type": "uint256[]"
        }
      ],
      "name": "canPerform",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getEVMScriptRegistry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_designatedSigner",
          "type": "address"
        }
      ],
      "name": "setDesignatedSigner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "designatedSigner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_target",
          "type": "address"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeExecute",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "PROTECTED_TOKENS_CAP",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ADD_PRESIGNED_HASH_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isPresigned",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_target",
          "type": "address"
        },
        {
          "name": "_ethValue",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_sender",
          "type": "address"
        },
        {
          "name": "_evmScript",
          "type": "bytes"
        }
      ],
      "name": "canForward",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "kernel",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_evmScript",
          "type": "bytes"
        }
      ],
      "name": "forward",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isPetrified",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "balance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isForwarder",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "SafeExecute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "ethValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Execute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "token",
          "type": "address"
        }
      ],
      "name": "AddProtectedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "token",
          "type": "address"
        }
      ],
      "name": "RemoveProtectedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "PresignHash",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "oldSigner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newSigner",
          "type": "address"
        }
      ],
      "name": "SetDesignatedSigner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ReceiveERC721",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "VaultTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "VaultDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "script",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "input",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "name": "ScriptResult",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoverToVault",
      "type": "event"
    }
  ],
  "transactionHash": "0xa1f7ebafcfc33d85aeed12945dc76ffae58e4d72620de6be18c29260fa72b90e",
  "receipt": {
    "to": null,
    "from": "0x0533F9d586ABd3334a0E90cA162602D6574F0493",
    "contractAddress": "0xCf3f2c6b03295CF2C4E6C732d5c59576C1FF8bA7",
    "transactionIndex": 52,
    "gasUsed": "4237713",
    "logsBloom": "0x
    "blockHash": "0x7b94c34024e62a66c9b726a3934524106685d6d14ace0325bd4ffe2e9fc4bbff",
    "transactionHash": "0xa1f7ebafcfc33d85aeed12945dc76ffae58e4d72620de6be18c29260fa72b90e",
    "logs": [
      {
        "transactionIndex": 52,
        "blockNumber": 28350983,
        "transactionHash": "0xa1f7ebafcfc33d85aeed12945dc76ffae58e4d72620de6be18c29260fa72b90e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000533f9d586abd3334a0e90ca162602d6574f0493",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001695442b4a48910000000000000000000000000000000000000000000000000be4e445729d5c700000000000000000000000000000000000000000000000000ef4b5a9bcf43ea20000000000000000000000000000000000000000000000000bce4f01475313df0000000000000000000000000000000000000000000000000f0b4aede83e8733",
        "logIndex": 277,
        "blockHash": "0x7b94c34024e62a66c9b726a3934524106685d6d14ace0325bd4ffe2e9fc4bbff"
      }
    ],
    "blockNumber": 28350983,
    "cumulativeGasUsed": "12613527",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9c25dd5a314e139fb26a47aad51ecf35",
  "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"ADD_PROTECTED_TOKEN_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC1271_INTERFACE_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC1271_RETURN_INVALID_SIGNATURE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TRANSFER_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProtectedTokensLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RUN_SCRIPT_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAFE_EXECUTE_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REMOVE_PROTECTED_TOKEN_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDepositable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"presignHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DESIGNATE_SIGNER_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeProtectedToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXECUTE_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addProtectedToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"protectedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC1271_RETURN_VALID_SIGNATURE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_designatedSigner\",\"type\":\"address\"}],\"name\":\"setDesignatedSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"designatedSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeExecute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROTECTED_TOKENS_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADD_PRESIGNED_HASH_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isPresigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_ethValue\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_evmScript\",\"type\":\"bytes\"}],\"name\":\"canForward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evmScript\",\"type\":\"bytes\"}],\"name\":\"forward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isForwarder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"SafeExecute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Execute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AddProtectedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RemoveProtectedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"PresignHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"oldSigner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"SetDesignatedSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ReceiveERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VaultTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VaultDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"addProtectedToken(address)\":{\"params\":{\"_token\":\"Address of the token to be protected\"}},\"allowRecoverability(address)\":{\"details\":\"Disable recovery escape hatch, as it could be used     maliciously to transfer funds away from the vault\"},\"canForward(address,bytes)\":{\"details\":\"IForwarder interface conformance\",\"params\":{\"_sender\":\"Address of the account intending to forward an action\"},\"return\":\"True if the given address can run scripts, false otherwise\"},\"canPerform(address,bytes32,uint256[])\":{\"details\":\"Check whether an action can be performed by a sender for a particular role on this app\",\"params\":{\"_params\":\"Permission params for the role\",\"_role\":\"Role on this app\",\"_sender\":\"Sender of the call\"},\"return\":\"Boolean indicating whether the sender has the permissions to perform the action.        Always returns false if the app hasn't been initialized yet.\"},\"deposit(address,uint256)\":{\"params\":{\"_token\":\"Address of the token being transferred\",\"_value\":\"Amount of tokens being transferred\"}},\"execute(address,uint256,bytes)\":{\"params\":{\"_data\":\"Calldata for the action\",\"_ethValue\":\"Amount of ETH from the contract that is sent with the action\",\"_target\":\"Address where the action is being executed\"},\"return\":\"Exits call frame forwarding the return data of the executed call (either error or success data)\"},\"forward(bytes)\":{\"details\":\"IForwarder interface conformance. Forwards any token holder action.\",\"params\":{\"_evmScript\":\"Script being executed\"}},\"getInitializationBlock()\":{\"return\":\"Block number in which the contract was initialized\"},\"getRecoveryVault()\":{\"details\":\"Get the recovery vault for the app\",\"return\":\"Recovery vault address for the app\"},\"hasInitialized()\":{\"return\":\"Whether the contract has been initialized by the time of the current block\"},\"initialize()\":{\"details\":\"As an AragonApp it needs to be initialized in order for roles (`auth` and `authP`) to work\"},\"isForwarder()\":{\"details\":\"IForwarder interface conformance\",\"return\":\"Always true\"},\"isValidSignature(bytes,bytes)\":{\"details\":\"Default behavior of `isValidSignature(bytes,bytes)`, can be overloaded for custom validation\",\"params\":{\"_data\":\"Arbitrary length data signed on the behalf of address(this)\",\"_signature\":\"Signature byte array associated with _data\"},\"return\":\"A bytes4 magic value 0x20c13b0b if the signature check passes, 0x00000000 if not    * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5) MUST allow external calls\"},\"isValidSignature(bytes32,bytes)\":{\"params\":{\"_hash\":\"Arbitrary length data signed on the behalf of address (this)\",\"_signature\":\"Signature byte array associated with _data\"},\"return\":\"The ERC-1271 magic value if the signature is valid\"},\"presignHash(bytes32)\":{\"params\":{\"_hash\":\"Hash that will be considered signed regardless of the signature checked with 'isValidSignature()'\"}},\"removeProtectedToken(address)\":{\"params\":{\"_token\":\"Address of the token to be unprotected\"}},\"safeExecute(address,bytes)\":{\"params\":{\"_data\":\"Calldata for the action\",\"_target\":\"Address where the action is being executed\"},\"return\":\"Exits call frame forwarding the return data of the executed call (either error or success data)\"},\"setDesignatedSigner(address)\":{\"params\":{\"_designatedSigner\":\"Address that will be able to sign messages on behalf of the app\"}},\"supportsInterface(bytes4)\":{\"details\":\"Implements conformance to ERC-165\",\"params\":{\"_interfaceId\":\"Interface bytes to check\"},\"return\":\"True if this contract supports the interface\"},\"transfer(address,address,uint256)\":{\"params\":{\"_to\":\"Address of the recipient of tokens\",\"_token\":\"Address of the token being transferred\",\"_value\":\"Amount of tokens being transferred\"}},\"transferToVault(address)\":{\"params\":{\"_token\":\"Token balance to be sent to recovery vault.\"}}}},\"userdoc\":{\"methods\":{\"addProtectedToken(address)\":{\"notice\":\"Add `_token.symbol(): string` to the list of protected tokens\"},\"canForward(address,bytes)\":{\"notice\":\"Tells whether `_sender` can forward actions or not\"},\"deposit(address,uint256)\":{\"notice\":\"Deposit `_value` `_token` to the vault\"},\"execute(address,uint256,bytes)\":{\"notice\":\"Execute '`@radspec(_target, _data)`' on `_target``_ethValue == 0 ? '' : ' (Sending ' + @tokenAmount(0x0000000000000000000000000000000000000000, _ethValue) + ')'`\"},\"forward(bytes)\":{\"notice\":\"Execute the script as the Agent app\"},\"initialize()\":{\"notice\":\"Initialize Vault app\"},\"isForwarder()\":{\"notice\":\"Tells whether the Agent app is a forwarder or not\"},\"isValidSignature(bytes32,bytes)\":{\"notice\":\"Tells whether a signature is seen as valid by this contract through ERC-1271\"},\"presignHash(bytes32)\":{\"notice\":\"Pre-sign hash `_hash`\"},\"removeProtectedToken(address)\":{\"notice\":\"Remove `_token.symbol(): string` from the list of protected tokens\"},\"safeExecute(address,bytes)\":{\"notice\":\"Execute '`@radspec(_target, _data)`' on `_target`, ensuring that protected tokens can't be spent\"},\"setDesignatedSigner(address)\":{\"notice\":\"Set `_designatedSigner` as the designated signer of the app, which will be able to sign messages on behalf of the app\"},\"supportsInterface(bytes4)\":{\"notice\":\"Tells whether this contract supports a given ERC-165 interface\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfer `_value` `_token` from the Vault to `_to`\"},\"transferToVault(address)\":{\"notice\":\"Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them.\"}}}},\"settings\":{\"compilationTarget\":{\"@aragon/apps-agent/contracts/Agent.sol\":\"Agent\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@aragon/apps-agent/contracts/Agent.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    GPL-3.0-or-later\\n */\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"./SignatureValidator.sol\\\";\\nimport \\\"./standards/IERC165.sol\\\";\\nimport \\\"./standards/ERC1271.sol\\\";\\nimport \\\"./standards/IERC721Receiver.sol\\\";\\n\\nimport \\\"@aragon/apps-vault/contracts/Vault.sol\\\";\\n\\nimport \\\"@aragon/os/contracts/common/IForwarder.sol\\\";\\n\\n\\ncontract Agent is IERC165, IERC721Receiver, ERC1271Bytes, IForwarder, IsContract, Vault {\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant EXECUTE_ROLE = keccak256(\\\"EXECUTE_ROLE\\\");\\n    bytes32 public constant SAFE_EXECUTE_ROLE = keccak256(\\\"SAFE_EXECUTE_ROLE\\\");\\n    bytes32 public constant ADD_PROTECTED_TOKEN_ROLE = keccak256(\\\"ADD_PROTECTED_TOKEN_ROLE\\\");\\n    bytes32 public constant REMOVE_PROTECTED_TOKEN_ROLE = keccak256(\\\"REMOVE_PROTECTED_TOKEN_ROLE\\\");\\n    bytes32 public constant ADD_PRESIGNED_HASH_ROLE = keccak256(\\\"ADD_PRESIGNED_HASH_ROLE\\\");\\n    bytes32 public constant DESIGNATE_SIGNER_ROLE = keccak256(\\\"DESIGNATE_SIGNER_ROLE\\\");\\n    bytes32 public constant RUN_SCRIPT_ROLE = keccak256(\\\"RUN_SCRIPT_ROLE\\\");\\n    */\\n\\n    bytes32 public constant EXECUTE_ROLE = 0xcebf517aa4440d1d125e0355aae64401211d0848a23c02cc5d29a14822580ba4;\\n    bytes32 public constant SAFE_EXECUTE_ROLE = 0x0a1ad7b87f5846153c6d5a1f761d71c7d0cfd122384f56066cd33239b7933694;\\n    bytes32 public constant ADD_PROTECTED_TOKEN_ROLE = 0x6eb2a499556bfa2872f5aa15812b956cc4a71b4d64eb3553f7073c7e41415aaa;\\n    bytes32 public constant REMOVE_PROTECTED_TOKEN_ROLE = 0x71eee93d500f6f065e38b27d242a756466a00a52a1dbcd6b4260f01a8640402a;\\n    bytes32 public constant ADD_PRESIGNED_HASH_ROLE = 0x0b29780bb523a130b3b01f231ef49ed2fa2781645591a0b0a44ca98f15a5994c;\\n    bytes32 public constant DESIGNATE_SIGNER_ROLE = 0x23ce341656c3f14df6692eebd4757791e33662b7dcf9970c8308303da5472b7c;\\n    bytes32 public constant RUN_SCRIPT_ROLE = 0xb421f7ad7646747f3051c50c0b8e2377839296cd4973e27f63821d73e390338f;\\n\\n    uint256 public constant PROTECTED_TOKENS_CAP = 10;\\n\\n    bytes4 private constant ERC165_INTERFACE_ID = 0x01ffc9a7;\\n    bytes4 private constant ERC721_RECEIVED_INTERFACE_ID = 0x150b7a02; // bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))\\n\\n    string private constant ERROR_TARGET_PROTECTED = \\\"AGENT_TARGET_PROTECTED\\\";\\n    string private constant ERROR_PROTECTED_TOKENS_MODIFIED = \\\"AGENT_PROTECTED_TOKENS_MODIFIED\\\";\\n    string private constant ERROR_PROTECTED_BALANCE_LOWERED = \\\"AGENT_PROTECTED_BALANCE_LOWERED\\\";\\n    string private constant ERROR_TOKENS_CAP_REACHED = \\\"AGENT_TOKENS_CAP_REACHED\\\";\\n    string private constant ERROR_TOKEN_NOT_ERC20 = \\\"AGENT_TOKEN_NOT_ERC20\\\";\\n    string private constant ERROR_TOKEN_ALREADY_PROTECTED = \\\"AGENT_TOKEN_ALREADY_PROTECTED\\\";\\n    string private constant ERROR_TOKEN_NOT_PROTECTED = \\\"AGENT_TOKEN_NOT_PROTECTED\\\";\\n    string private constant ERROR_DESIGNATED_TO_SELF = \\\"AGENT_DESIGNATED_TO_SELF\\\";\\n    string private constant ERROR_CAN_NOT_FORWARD = \\\"AGENT_CAN_NOT_FORWARD\\\";\\n\\n    mapping (bytes32 => bool) public isPresigned;\\n    address public designatedSigner;\\n    address[] public protectedTokens;\\n\\n    event SafeExecute(address indexed sender, address indexed target, bytes data);\\n    event Execute(address indexed sender, address indexed target, uint256 ethValue, bytes data);\\n    event AddProtectedToken(address indexed token);\\n    event RemoveProtectedToken(address indexed token);\\n    event PresignHash(address indexed sender, bytes32 indexed hash);\\n    event SetDesignatedSigner(address indexed sender, address indexed oldSigner, address indexed newSigner);\\n    event ReceiveERC721(address indexed token, address indexed operator, address indexed from, uint256 tokenId, bytes data);\\n\\n    /**\\n    * @notice Execute '`@radspec(_target, _data)`' on `_target``_ethValue == 0 ? '' : ' (Sending ' + @tokenAmount(0x0000000000000000000000000000000000000000, _ethValue) + ')'`\\n    * @param _target Address where the action is being executed\\n    * @param _ethValue Amount of ETH from the contract that is sent with the action\\n    * @param _data Calldata for the action\\n    * @return Exits call frame forwarding the return data of the executed call (either error or success data)\\n    */\\n    function execute(address _target, uint256 _ethValue, bytes _data)\\n        external // This function MUST always be external as the function performs a low level return, exiting the Agent app execution context\\n        authP(EXECUTE_ROLE, arr(_target, _ethValue, uint256(_getSig(_data)))) // bytes4 casted as uint256 sets the bytes as the LSBs\\n    {\\n        bool result = _target.call.value(_ethValue)(_data);\\n\\n        if (result) {\\n            emit Execute(msg.sender, _target, _ethValue, _data);\\n        }\\n\\n        assembly {\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, returndatasize)\\n\\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\\n            // if the call returned error data, forward it\\n            switch result case 0 { revert(ptr, returndatasize) }\\n            default { return(ptr, returndatasize) }\\n        }\\n    }\\n\\n    /**\\n    * @notice Execute '`@radspec(_target, _data)`' on `_target`, ensuring that protected tokens can't be spent\\n    * @param _target Address where the action is being executed\\n    * @param _data Calldata for the action\\n    * @return Exits call frame forwarding the return data of the executed call (either error or success data)\\n    */\\n    function safeExecute(address _target, bytes _data)\\n        external // This function MUST always be external as the function performs a low level return, exiting the Agent app execution context\\n        authP(SAFE_EXECUTE_ROLE, arr(_target, uint256(_getSig(_data)))) // bytes4 casted as uint256 sets the bytes as the LSBs\\n    {\\n        uint256 protectedTokensLength = protectedTokens.length;\\n        address[] memory protectedTokens_ = new address[](protectedTokensLength);\\n        uint256[] memory balances = new uint256[](protectedTokensLength);\\n\\n        for (uint256 i = 0; i < protectedTokensLength; i++) {\\n            address token = protectedTokens[i];\\n            require(_target != token, ERROR_TARGET_PROTECTED);\\n            // we copy the protected tokens array to check whether the storage array has been modified during the underlying call\\n            protectedTokens_[i] = token;\\n            // we copy the balances to check whether they have been modified during the underlying call\\n            balances[i] = balance(token);\\n        }\\n\\n        bool result = _target.call(_data);\\n\\n        bytes32 ptr;\\n        uint256 size;\\n        assembly {\\n            size := returndatasize\\n            ptr := mload(0x40)\\n            mstore(0x40, add(ptr, returndatasize))\\n            returndatacopy(ptr, 0, returndatasize)\\n        }\\n\\n        if (result) {\\n            // if the underlying call has succeeded, we check that the protected tokens\\n            // and their balances have not been modified and return the call's return data\\n            require(protectedTokens.length == protectedTokensLength, ERROR_PROTECTED_TOKENS_MODIFIED);\\n            for (uint256 j = 0; j < protectedTokensLength; j++) {\\n                require(protectedTokens[j] == protectedTokens_[j], ERROR_PROTECTED_TOKENS_MODIFIED);\\n                require(balance(protectedTokens[j]) >= balances[j], ERROR_PROTECTED_BALANCE_LOWERED);\\n            }\\n\\n            emit SafeExecute(msg.sender, _target, _data);\\n\\n            assembly {\\n                return(ptr, size)\\n            }\\n        } else {\\n            // if the underlying call has failed, we revert and forward returned error data\\n            assembly {\\n                revert(ptr, size)\\n            }\\n        }\\n    }\\n\\n    /**\\n    * @notice Add `_token.symbol(): string` to the list of protected tokens\\n    * @param _token Address of the token to be protected\\n    */\\n    function addProtectedToken(address _token) external authP(ADD_PROTECTED_TOKEN_ROLE, arr(_token)) {\\n        require(protectedTokens.length < PROTECTED_TOKENS_CAP, ERROR_TOKENS_CAP_REACHED);\\n        require(_isERC20(_token), ERROR_TOKEN_NOT_ERC20);\\n        require(!_tokenIsProtected(_token), ERROR_TOKEN_ALREADY_PROTECTED);\\n\\n        _addProtectedToken(_token);\\n    }\\n\\n    /**\\n    * @notice Remove `_token.symbol(): string` from the list of protected tokens\\n    * @param _token Address of the token to be unprotected\\n    */\\n    function removeProtectedToken(address _token) external authP(REMOVE_PROTECTED_TOKEN_ROLE, arr(_token)) {\\n        require(_tokenIsProtected(_token), ERROR_TOKEN_NOT_PROTECTED);\\n\\n        _removeProtectedToken(_token);\\n    }\\n\\n    /**\\n    * @notice Pre-sign hash `_hash`\\n    * @param _hash Hash that will be considered signed regardless of the signature checked with 'isValidSignature()'\\n    */\\n    function presignHash(bytes32 _hash)\\n        external\\n        authP(ADD_PRESIGNED_HASH_ROLE, arr(_hash))\\n    {\\n        isPresigned[_hash] = true;\\n\\n        emit PresignHash(msg.sender, _hash);\\n    }\\n\\n    /**\\n    * @notice Set `_designatedSigner` as the designated signer of the app, which will be able to sign messages on behalf of the app\\n    * @param _designatedSigner Address that will be able to sign messages on behalf of the app\\n    */\\n    function setDesignatedSigner(address _designatedSigner)\\n        external\\n        authP(DESIGNATE_SIGNER_ROLE, arr(_designatedSigner))\\n    {\\n        // Prevent an infinite loop by setting the app itself as its designated signer.\\n        // An undetectable loop can be created by setting a different contract as the\\n        // designated signer which calls back into `isValidSignature`.\\n        // Given that `isValidSignature` is always called with just 50k gas, the max\\n        // damage of the loop is wasting 50k gas.\\n        require(_designatedSigner != address(this), ERROR_DESIGNATED_TO_SELF);\\n\\n        address oldDesignatedSigner = designatedSigner;\\n        designatedSigner = _designatedSigner;\\n\\n        emit SetDesignatedSigner(msg.sender, oldDesignatedSigner, _designatedSigner);\\n    }\\n\\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns (bytes4) {\\n        emit ReceiveERC721(msg.sender, _operator, _from, _tokenId, _data);\\n\\n        return ERC721_RECEIVED_INTERFACE_ID;\\n    }\\n\\n    // Forwarding fns\\n\\n    /**\\n    * @notice Tells whether the Agent app is a forwarder or not\\n    * @dev IForwarder interface conformance\\n    * @return Always true\\n    */\\n    function isForwarder() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Tells whether this contract supports a given ERC-165 interface\\n     * @dev Implements conformance to ERC-165\\n     * @param _interfaceId Interface bytes to check\\n     * @return True if this contract supports the interface\\n     */\\n    function supportsInterface(bytes4 _interfaceId) external pure returns (bool) {\\n        return\\n            _interfaceId == ERC1271_INTERFACE_ID ||\\n            _interfaceId == ERC721_RECEIVED_INTERFACE_ID ||\\n            _interfaceId == ERC165_INTERFACE_ID;\\n    }\\n\\n    /**\\n    * @notice Execute the script as the Agent app\\n    * @dev IForwarder interface conformance. Forwards any token holder action.\\n    * @param _evmScript Script being executed\\n    */\\n    function forward(bytes _evmScript) public {\\n        require(canForward(msg.sender, _evmScript), ERROR_CAN_NOT_FORWARD);\\n\\n        bytes memory input = \\\"\\\"; // no input\\n        address[] memory blacklist = new address[](0); // no addr blacklist, can interact with anything\\n        runScript(_evmScript, input, blacklist);\\n        // We don't need to emit an event here as EVMScriptRunner will emit ScriptResult if successful\\n    }\\n\\n    /**\\n    * @notice Tells whether `_sender` can forward actions or not\\n    * @dev IForwarder interface conformance\\n    * @param _sender Address of the account intending to forward an action\\n    * @return True if the given address can run scripts, false otherwise\\n    */\\n    function canForward(address _sender, bytes _evmScript) public view returns (bool) {\\n        // Note that `canPerform()` implicitly does an initialization check itself\\n        return canPerform(_sender, RUN_SCRIPT_ROLE, arr(_getScriptACLParam(_evmScript)));\\n    }\\n\\n    // ERC-1271 conformance\\n\\n    /**\\n     * @notice Tells whether a signature is seen as valid by this contract through ERC-1271\\n     * @param _hash Arbitrary length data signed on the behalf of address (this)\\n     * @param _signature Signature byte array associated with _data\\n     * @return The ERC-1271 magic value if the signature is valid\\n     */\\n    function isValidSignature(bytes32 _hash, bytes _signature) public view returns (bytes4) {\\n        // Short-circuit in case the hash was presigned. Optimization as performing calls\\n        // and ecrecover is more expensive than an SLOAD.\\n        if (isPresigned[_hash]) {\\n            return returnIsValidSignatureMagicNumber(true);\\n        }\\n\\n        bool isValid;\\n        if (designatedSigner == address(0)) {\\n            isValid = false;\\n        } else {\\n            isValid = SignatureValidator.isValidSignature(_hash, designatedSigner, _signature);\\n        }\\n\\n        return returnIsValidSignatureMagicNumber(isValid);\\n    }\\n\\n    // Getters\\n\\n    function getProtectedTokensLength() public view isInitialized returns (uint256) {\\n        return protectedTokens.length;\\n    }\\n\\n    // Internal fns\\n\\n    function _addProtectedToken(address _token) internal {\\n        protectedTokens.push(_token);\\n\\n        emit AddProtectedToken(_token);\\n    }\\n\\n    function _removeProtectedToken(address _token) internal {\\n        protectedTokens[_protectedTokenIndex(_token)] = protectedTokens[protectedTokens.length - 1];\\n        protectedTokens.length--;\\n\\n        emit RemoveProtectedToken(_token);\\n    }\\n\\n    function _isERC20(address _token) internal view returns (bool) {\\n        if (!isContract(_token)) {\\n            return false;\\n        }\\n\\n        // Throwaway sanity check to make sure the token's `balanceOf()` does not error (for now)\\n        balance(_token);\\n\\n        return true;\\n    }\\n\\n    function _protectedTokenIndex(address _token) internal view returns (uint256) {\\n        for (uint i = 0; i < protectedTokens.length; i++) {\\n            if (protectedTokens[i] == _token) {\\n              return i;\\n            }\\n        }\\n\\n        revert(ERROR_TOKEN_NOT_PROTECTED);\\n    }\\n\\n    function _tokenIsProtected(address _token) internal view returns (bool) {\\n        for (uint256 i = 0; i < protectedTokens.length; i++) {\\n            if (protectedTokens[i] == _token) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function _getScriptACLParam(bytes _evmScript) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(_evmScript)));\\n    }\\n\\n    function _getSig(bytes _data) internal pure returns (bytes4 sig) {\\n        if (_data.length < 4) {\\n            return;\\n        }\\n\\n        assembly { sig := mload(add(_data, 0x20)) }\\n    }\\n}\\n\",\"keccak256\":\"0xd90f3ec7479a49011f6e35a1c1b85322e6d634f41f0d4bcb89023102abbd3203\"},\"@aragon/apps-agent/contracts/SignatureValidator.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\n// Inspired by https://github.com/horizon-games/multi-token-standard/blob/319740cf2a78b8816269ae49a09c537b3fd7303b/contracts/utils/SignatureValidator.sol\\n// This should probably be moved into aOS: https://github.com/aragon/aragonOS/pull/442\\n\\nimport \\\"./standards/ERC1271.sol\\\";\\n\\n\\nlibrary SignatureValidator {\\n    enum SignatureMode {\\n        Invalid, // 0x00\\n        EIP712,  // 0x01\\n        EthSign, // 0x02\\n        ERC1271, // 0x03\\n        NMode    // 0x04, to check if mode is specified, leave at the end\\n    }\\n\\n    // bytes4(keccak256(\\\"isValidSignature(bytes,bytes)\\\")\\n    bytes4 public constant ERC1271_RETURN_VALID_SIGNATURE = 0x20c13b0b;\\n    uint256 internal constant ERC1271_ISVALIDSIG_MAX_GAS = 250000;\\n\\n    string private constant ERROR_INVALID_LENGTH_POP_BYTE = \\\"SIGVAL_INVALID_LENGTH_POP_BYTE\\\";\\n\\n    /// @dev Validates that a hash was signed by a specified signer.\\n    /// @param hash Hash which was signed.\\n    /// @param signer Address of the signer.\\n    /// @param signature ECDSA signature along with the mode (0 = Invalid, 1 = EIP712, 2 = EthSign, 3 = ERC1271) {mode}{r}{s}{v}.\\n    /// @return Returns whether signature is from a specified user.\\n    function isValidSignature(bytes32 hash, address signer, bytes signature) internal view returns (bool) {\\n        if (signature.length == 0) {\\n            return false;\\n        }\\n\\n        uint8 modeByte = uint8(signature[0]);\\n        if (modeByte >= uint8(SignatureMode.NMode)) {\\n            return false;\\n        }\\n        SignatureMode mode = SignatureMode(modeByte);\\n\\n        if (mode == SignatureMode.EIP712) {\\n            return ecVerify(hash, signer, signature);\\n        } else if (mode == SignatureMode.EthSign) {\\n            return ecVerify(\\n                keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)),\\n                signer,\\n                signature\\n            );\\n        } else if (mode == SignatureMode.ERC1271) {\\n            // Pop the mode byte before sending it down the validation chain\\n            return safeIsValidSignature(signer, hash, popFirstByte(signature));\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function ecVerify(bytes32 hash, address signer, bytes memory signature) private pure returns (bool) {\\n        (bool badSig, bytes32 r, bytes32 s, uint8 v) = unpackEcSig(signature);\\n\\n        if (badSig) {\\n            return false;\\n        }\\n\\n        return signer == ecrecover(hash, v, r, s);\\n    }\\n\\n    function unpackEcSig(bytes memory signature) private pure returns (bool badSig, bytes32 r, bytes32 s, uint8 v) {\\n        if (signature.length != 66) {\\n            badSig = true;\\n            return;\\n        }\\n\\n        v = uint8(signature[65]);\\n        assembly {\\n            r := mload(add(signature, 33))\\n            s := mload(add(signature, 65))\\n        }\\n\\n        // Allow signature version to be 0 or 1\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            badSig = true;\\n        }\\n    }\\n\\n    function popFirstByte(bytes memory input) private pure returns (bytes memory output) {\\n        uint256 inputLength = input.length;\\n        require(inputLength > 0, ERROR_INVALID_LENGTH_POP_BYTE);\\n\\n        output = new bytes(inputLength - 1);\\n\\n        if (output.length == 0) {\\n            return output;\\n        }\\n\\n        uint256 inputPointer;\\n        uint256 outputPointer;\\n        assembly {\\n            inputPointer := add(input, 0x21)\\n            outputPointer := add(output, 0x20)\\n        }\\n        memcpy(outputPointer, inputPointer, output.length);\\n    }\\n\\n    function safeIsValidSignature(address validator, bytes32 hash, bytes memory signature) private view returns (bool) {\\n        bytes memory data = abi.encodeWithSelector(ERC1271(validator).isValidSignature.selector, hash, signature);\\n        bytes4 erc1271Return = safeBytes4StaticCall(validator, data, ERC1271_ISVALIDSIG_MAX_GAS);\\n        return erc1271Return == ERC1271_RETURN_VALID_SIGNATURE;\\n    }\\n\\n    function safeBytes4StaticCall(address target, bytes data, uint256 maxGas) private view returns (bytes4 ret) {\\n        uint256 gasLeft = gasleft();\\n\\n        uint256 callGas = gasLeft > maxGas ? maxGas : gasLeft;\\n        bool ok;\\n        assembly {\\n            ok := staticcall(callGas, target, add(data, 0x20), mload(data), 0, 0)\\n        }\\n\\n        if (!ok) {\\n            return;\\n        }\\n\\n        uint256 size;\\n        assembly { size := returndatasize }\\n        if (size != 32) {\\n            return;\\n        }\\n\\n        assembly {\\n            let ptr := mload(0x40)       // get next free memory ptr\\n            returndatacopy(ptr, 0, size) // copy return from above `staticcall`\\n            ret := mload(ptr)            // read data at ptr and set it to be returned\\n        }\\n\\n        return ret;\\n    }\\n\\n    // From: https://github.com/Arachnid/solidity-stringutils/blob/01e955c1d6/src/strings.sol\\n    function memcpy(uint256 dest, uint256 src, uint256 len) private pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8900d75cd2ac28d3290df3aa09db7d4c89e0de0ae1598ee8bef450b22731118b\"},\"@aragon/apps-agent/contracts/standards/ERC1271.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\n// ERC1271 on Feb 12th, 2019: https://github.com/ethereum/EIPs/blob/a97dc434930d0ccc4461c97d8c7a920dc585adf2/EIPS/eip-1271.md\\n// Using `isValidSignature(bytes32,bytes)` even though the standard still hasn't been modified\\n// Rationale: https://github.com/ethereum/EIPs/issues/1271#issuecomment-462719728\\n\\n\\ncontract ERC1271 {\\n    bytes4 constant public ERC1271_INTERFACE_ID = 0xfb855dc9; // this.isValidSignature.selector\\n\\n    bytes4 constant public ERC1271_RETURN_VALID_SIGNATURE =   0x20c13b0b; // TODO: Likely needs to be updated\\n    bytes4 constant public ERC1271_RETURN_INVALID_SIGNATURE = 0x00000000;\\n\\n    /**\\n    * @dev Function must be implemented by deriving contract\\n    * @param _hash Arbitrary length data signed on the behalf of address(this)\\n    * @param _signature Signature byte array associated with _data\\n    * @return A bytes4 magic value 0x20c13b0b if the signature check passes, 0x00000000 if not\\n    *\\n    * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n    * MUST allow external calls\\n    */\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) public view returns (bytes4);\\n\\n    function returnIsValidSignatureMagicNumber(bool isValid) internal pure returns (bytes4) {\\n        return isValid ? ERC1271_RETURN_VALID_SIGNATURE : ERC1271_RETURN_INVALID_SIGNATURE;\\n    }\\n}\\n\\n\\ncontract ERC1271Bytes is ERC1271 {\\n    /**\\n    * @dev Default behavior of `isValidSignature(bytes,bytes)`, can be overloaded for custom validation\\n    * @param _data Arbitrary length data signed on the behalf of address(this)\\n    * @param _signature Signature byte array associated with _data\\n    * @return A bytes4 magic value 0x20c13b0b if the signature check passes, 0x00000000 if not\\n    *\\n    * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n    * MUST allow external calls\\n    */\\n    function isValidSignature(bytes _data, bytes _signature) public view returns (bytes4) {\\n        return isValidSignature(keccak256(_data), _signature);\\n    }\\n}\\n\",\"keccak256\":\"0x0e0d434f9f3c740b8f94dab93af3b226dac4d40af885adbbe81ff2a4fd957fc1\"},\"@aragon/apps-agent/contracts/standards/IERC165.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0x54c5b6c1e72d3f1a3ad7212600f2a5ae39dc9d990b73d88e614b11dd58f8d7ce\"},\"@aragon/apps-agent/contracts/standards/IERC721Receiver.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\n\\ninterface IERC721Receiver {\\n    /**\\n     * @notice Handle the receipt of an NFT\\n     * @dev The ERC721 smart contract calls this function on the recipient\\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\\n     * otherwise the caller will revert the transaction. The selector to be\\n     * returned can be obtained as `this.onERC721Received.selector`. This\\n     * function MAY throw to revert and reject the transfer.\\n     * Note: the ERC721 contract address is always the message sender.\\n     * @param operator The address which called `safeTransferFrom` function\\n     * @param from The address which previously owned the token\\n     * @param tokenId The NFT identifier which is being transferred\\n     * @param data Additional data with no specified format\\n     * @return bytes4 `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x0f80bfb9c096d9dc68a94b93038a7de0247396b09d3b10fb7a339f336d7d2f6b\"},\"@aragon/apps-vault/contracts/Vault.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/common/DepositableStorage.sol\\\";\\nimport \\\"@aragon/os/contracts/common/EtherTokenConstant.sol\\\";\\nimport \\\"@aragon/os/contracts/common/SafeERC20.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/token/ERC20.sol\\\";\\n\\n\\ncontract Vault is EtherTokenConstant, AragonApp, DepositableStorage {\\n    using SafeERC20 for ERC20;\\n\\n    bytes32 public constant TRANSFER_ROLE = keccak256(\\\"TRANSFER_ROLE\\\");\\n\\n    string private constant ERROR_DATA_NON_ZERO = \\\"VAULT_DATA_NON_ZERO\\\";\\n    string private constant ERROR_NOT_DEPOSITABLE = \\\"VAULT_NOT_DEPOSITABLE\\\";\\n    string private constant ERROR_DEPOSIT_VALUE_ZERO = \\\"VAULT_DEPOSIT_VALUE_ZERO\\\";\\n    string private constant ERROR_TRANSFER_VALUE_ZERO = \\\"VAULT_TRANSFER_VALUE_ZERO\\\";\\n    string private constant ERROR_SEND_REVERTED = \\\"VAULT_SEND_REVERTED\\\";\\n    string private constant ERROR_VALUE_MISMATCH = \\\"VAULT_VALUE_MISMATCH\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_FROM_REVERTED = \\\"VAULT_TOKEN_TRANSFER_FROM_REVERT\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_REVERTED = \\\"VAULT_TOKEN_TRANSFER_REVERTED\\\";\\n\\n    event VaultTransfer(address indexed token, address indexed to, uint256 amount);\\n    event VaultDeposit(address indexed token, address indexed sender, uint256 amount);\\n\\n    /**\\n    * @dev On a normal send() or transfer() this fallback is never executed as it will be\\n    *      intercepted by the Proxy (see aragonOS#281)\\n    */\\n    function () external payable isInitialized {\\n        require(msg.data.length == 0, ERROR_DATA_NON_ZERO);\\n        _deposit(ETH, msg.value);\\n    }\\n\\n    /**\\n    * @notice Initialize Vault app\\n    * @dev As an AragonApp it needs to be initialized in order for roles (`auth` and `authP`) to work\\n    */\\n    function initialize() external onlyInit {\\n        initialized();\\n        setDepositable(true);\\n    }\\n\\n    /**\\n    * @notice Deposit `_value` `_token` to the vault\\n    * @param _token Address of the token being transferred\\n    * @param _value Amount of tokens being transferred\\n    */\\n    function deposit(address _token, uint256 _value) external payable isInitialized {\\n        _deposit(_token, _value);\\n    }\\n\\n    /**\\n    * @notice Transfer `_value` `_token` from the Vault to `_to`\\n    * @param _token Address of the token being transferred\\n    * @param _to Address of the recipient of tokens\\n    * @param _value Amount of tokens being transferred\\n    */\\n    /* solium-disable-next-line function-order */\\n    function transfer(address _token, address _to, uint256 _value)\\n        external\\n        authP(TRANSFER_ROLE, arr(_token, _to, _value))\\n    {\\n        require(_value > 0, ERROR_TRANSFER_VALUE_ZERO);\\n\\n        if (_token == ETH) {\\n            require(_to.send(_value), ERROR_SEND_REVERTED);\\n        } else {\\n            require(ERC20(_token).safeTransfer(_to, _value), ERROR_TOKEN_TRANSFER_REVERTED);\\n        }\\n\\n        emit VaultTransfer(_token, _to, _value);\\n    }\\n\\n    function balance(address _token) public view returns (uint256) {\\n        if (_token == ETH) {\\n            return address(this).balance;\\n        } else {\\n            return ERC20(_token).staticBalanceOf(address(this));\\n        }\\n    }\\n\\n    /**\\n    * @dev Disable recovery escape hatch, as it could be used\\n    *      maliciously to transfer funds away from the vault\\n    */\\n    function allowRecoverability(address) public view returns (bool) {\\n        return false;\\n    }\\n\\n    function _deposit(address _token, uint256 _value) internal {\\n        require(isDepositable(), ERROR_NOT_DEPOSITABLE);\\n        require(_value > 0, ERROR_DEPOSIT_VALUE_ZERO);\\n\\n        if (_token == ETH) {\\n            // Deposit is implicit in this case\\n            require(msg.value == _value, ERROR_VALUE_MISMATCH);\\n        } else {\\n            require(\\n                ERC20(_token).safeTransferFrom(msg.sender, address(this), _value),\\n                ERROR_TOKEN_TRANSFER_FROM_REVERTED\\n            );\\n        }\\n\\n        emit VaultDeposit(_token, msg.sender, _value);\\n    }\\n}\\n\",\"keccak256\":\"0x760b4fd895153fd398391df3b27474d1913d792fadec2172dd10d3686d3416e6\"},\"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[]) {\\n        return new uint256[](0);\\n    }\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c, _d);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\",\"keccak256\":\"0x672a96975fc17f66905e775645cc93249426ce9601aef597a13d1e449c7f89d0\"},\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0x7e081f42891bbcc8fa9f3a67efb34ecafa8e2c075e37a01d74d221c45ddfdd10\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_POSITION = keccak256(\\\"aragonOS.appStorage.kernel\\\");\\n    bytes32 internal constant APP_ID_POSITION = keccak256(\\\"aragonOS.appStorage.appId\\\");\\n    */\\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\\n\\n    function kernel() public view returns (IKernel) {\\n        return IKernel(KERNEL_POSITION.getStorageAddress());\\n    }\\n\\n    function appId() public view returns (bytes32) {\\n        return APP_ID_POSITION.getStorageBytes32();\\n    }\\n\\n    function setKernel(IKernel _kernel) internal {\\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\\n    }\\n\\n    function setAppId(bytes32 _appId) internal {\\n        APP_ID_POSITION.setStorageBytes32(_appId);\\n    }\\n}\\n\",\"keccak256\":\"0x37324058906601970b1ef5cbe8f2af93144d3b723c2a33e468142cdc753c829b\"},\"@aragon/os/contracts/apps/AragonApp.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\nimport \\\"../common/Autopetrified.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/ReentrancyGuard.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../evmscript/EVMScriptRunner.sol\\\";\\n\\n\\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\\n// that they can never be initialized.\\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\\n// are included so that they are automatically usable by subclassing contracts\\ncontract AragonApp is AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\\n    string private constant ERROR_AUTH_FAILED = \\\"APP_AUTH_FAILED\\\";\\n\\n    modifier auth(bytes32 _role) {\\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    modifier authP(bytes32 _role, uint256[] _params) {\\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\\n    * @param _sender Sender of the call\\n    * @param _role Role on this app\\n    * @param _params Permission params for the role\\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\\n    *         Always returns false if the app hasn't been initialized yet.\\n    */\\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\\n        if (!hasInitialized()) {\\n            return false;\\n        }\\n\\n        IKernel linkedKernel = kernel();\\n        if (address(linkedKernel) == address(0)) {\\n            return false;\\n        }\\n\\n        return linkedKernel.hasPermission(\\n            _sender,\\n            address(this),\\n            _role,\\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\\n        );\\n    }\\n\\n    /**\\n    * @dev Get the recovery vault for the app\\n    * @return Recovery vault address for the app\\n    */\\n    function getRecoveryVault() public view returns (address) {\\n        // Funds recovery via a vault is only available when used with a kernel\\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\\n    }\\n}\\n\",\"keccak256\":\"0x342fa7437cb3e80ea702209cc90787b27d21a7d4bf101e313534c9da2a2f7875\"},\"@aragon/os/contracts/common/Autopetrified.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Petrifiable.sol\\\";\\n\\n\\ncontract Autopetrified is Petrifiable {\\n    constructor() public {\\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\\n        // This renders them uninitializable (and unusable without a proxy).\\n        petrify();\\n    }\\n}\\n\",\"keccak256\":\"0x42f0422744e13674e38bfbef079af7150883aba96ddbe61c5ae50df31d42696e\"},\"@aragon/os/contracts/common/ConversionHelpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary ConversionHelpers {\\n    string private constant ERROR_IMPROPER_LENGTH = \\\"CONVERSION_IMPROPER_LENGTH\\\";\\n\\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\\n        // Force cast the uint256[] into a bytes array, by overwriting its length\\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 byteLength = _input.length * 32;\\n        assembly {\\n            output := _input\\n            mstore(output, byteLength)\\n        }\\n    }\\n\\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\\n        // Force cast the bytes array into a uint256[], by overwriting its length\\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 intsLength = _input.length / 32;\\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\\n\\n        assembly {\\n            output := _input\\n            mstore(output, intsLength)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9872383d458352f5c68fa5afd1fc84ab6b172cbee33359cfa57655b8eda92416\"},\"@aragon/os/contracts/common/DepositableStorage.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"./UnstructuredStorage.sol\\\";\\n\\n\\ncontract DepositableStorage {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.depositableStorage.depositable\\\")\\n    bytes32 internal constant DEPOSITABLE_POSITION = 0x665fd576fbbe6f247aff98f5c94a561e3f71ec2d3c988d56f12d342396c50cea;\\n\\n    function isDepositable() public view returns (bool) {\\n        return DEPOSITABLE_POSITION.getStorageBool();\\n    }\\n\\n    function setDepositable(bool _depositable) internal {\\n        DEPOSITABLE_POSITION.setStorageBool(_depositable);\\n    }\\n}\\n\",\"keccak256\":\"0x67e1884ba4c91de1c6fe1fc2c1c632c29ed3e7894a434c049be9f1ed80539237\"},\"@aragon/os/contracts/common/EtherTokenConstant.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address internal constant ETH = address(0);\\n}\\n\",\"keccak256\":\"0x6b2fa091968161075154a77fa741a3484c891d73cd3cd14ede502ff56dd08dfc\"},\"@aragon/os/contracts/common/IForwarder.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IForwarder {\\n    function isForwarder() external pure returns (bool);\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function canForward(address sender, bytes evmCallScript) public view returns (bool);\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function forward(bytes evmCallScript) public;\\n}\\n\",\"keccak256\":\"0x3dcf53bc3021c65b14d5af9f681b4bed524dd1c70a7d39add82166a94981f297\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IVaultRecoverable {\\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\\n\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) external view returns (bool);\\n    function getRecoveryVault() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa8e004decf086e817a864b485473b687c2c468c82af7b5011d9908586f7cbf36\"},\"@aragon/os/contracts/common/Initializable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./TimeHelpers.sol\\\";\\nimport \\\"./UnstructuredStorage.sol\\\";\\n\\n\\ncontract Initializable is TimeHelpers {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.initializable.initializationBlock\\\")\\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\\n\\n    string private constant ERROR_ALREADY_INITIALIZED = \\\"INIT_ALREADY_INITIALIZED\\\";\\n    string private constant ERROR_NOT_INITIALIZED = \\\"INIT_NOT_INITIALIZED\\\";\\n\\n    modifier onlyInit {\\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n    * @return Whether the contract has been initialized by the time of the current block\\n    */\\n    function hasInitialized() public view returns (bool) {\\n        uint256 initializationBlock = getInitializationBlock();\\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization to enable the contract\\n    *      at a future block number rather than immediately.\\n    */\\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xc859366d3143499d1458ea55cb5374ae1ca1faf41763cad5e051dea2da373ba1\"},\"@aragon/os/contracts/common/IsContract.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract IsContract {\\n    /*\\n    * NOTE: this should NEVER be used for authentication\\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\\n    *\\n    * This is only intended to be used as a sanity check that an address is actually a contract,\\n    * RATHER THAN an address not being a contract.\\n    */\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x9dd99d770a5eed901ba749e1f02e4fae443e71e899f4909f56825dfc378da089\"},\"@aragon/os/contracts/common/Petrifiable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\n\\ncontract Petrifiable is Initializable {\\n    // Use block UINT256_MAX (which should be never) as the initializable date\\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\\n\\n    function isPetrified() public view returns (bool) {\\n        return getInitializationBlock() == PETRIFIED_BLOCK;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract to prevent being initialized.\\n    *      Useful for freezing base contracts when they're used behind proxies.\\n    */\\n    function petrify() internal onlyInit {\\n        initializedAt(PETRIFIED_BLOCK);\\n    }\\n}\\n\",\"keccak256\":\"0x797d3a58b782032f6afc51725326c0b51dceb00f3af6b85b25bd91cc10d22504\"},\"@aragon/os/contracts/common/ReentrancyGuard.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\n\\n\\ncontract ReentrancyGuard {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\\\"aragonOS.reentrancyGuard.mutex\\\");\\n    */\\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\\n\\n    string private constant ERROR_REENTRANT = \\\"REENTRANCY_REENTRANT_CALL\\\";\\n\\n    modifier nonReentrant() {\\n        // Ensure mutex is unlocked\\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\\n\\n        // Lock mutex before function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\\n\\n        // Perform function call\\n        _;\\n\\n        // Unlock mutex after function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\\n    }\\n}\\n\",\"keccak256\":\"0xd89653c118bbd8cace423c45daa37986c566672198a415254011c028d1831189\"},\"@aragon/os/contracts/common/SafeERC20.sol\":{\"content\":\"// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\n\\n\\nlibrary SafeERC20 {\\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\\n    // https://github.com/ethereum/solidity/issues/3544\\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\\n\\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \\\"SAFE_ERC_20_BALANCE_REVERTED\\\";\\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \\\"SAFE_ERC_20_ALLOWANCE_REVERTED\\\";\\n\\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\\n        private\\n        returns (bool)\\n    {\\n        bool ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            let success := call(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                0,                    // no value\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                // Check number of bytes returned from last function call\\n                switch returndatasize\\n\\n                // No bytes returned: assume success\\n                case 0 {\\n                    ret := 1\\n                }\\n\\n                // 32 bytes returned: check if non-zero\\n                case 0x20 {\\n                    // Only return success if returned data was true\\n                    // Already have output in ptr\\n                    ret := eq(mload(ptr), 1)\\n                }\\n\\n                // Not sure what was returned: don't mark as success\\n                default { }\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    function staticInvoke(address _addr, bytes memory _calldata)\\n        private\\n        view\\n        returns (bool, uint256)\\n    {\\n        bool success;\\n        uint256 ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            success := staticcall(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                ret := mload(ptr)\\n            }\\n        }\\n        return (success, ret);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferCallData = abi.encodeWithSelector(\\n            TRANSFER_SELECTOR,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferFromCallData = abi.encodeWithSelector(\\n            _token.transferFrom.selector,\\n            _from,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferFromCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\\n        bytes memory approveCallData = abi.encodeWithSelector(\\n            _token.approve.selector,\\n            _spender,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, approveCallData);\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.balanceOf().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\\n            _token.balanceOf.selector,\\n            _owner\\n        );\\n\\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\\n\\n        return tokenBalance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.allowance().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\\n        bytes memory allowanceCallData = abi.encodeWithSelector(\\n            _token.allowance.selector,\\n            _owner,\\n            _spender\\n        );\\n\\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return allowance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.totalSupply().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticTotalSupply(ERC20 _token) internal view returns (uint256) {\\n        bytes memory totalSupplyCallData = abi.encodeWithSelector(_token.totalSupply.selector);\\n\\n        (bool success, uint256 totalSupply) = staticInvoke(_token, totalSupplyCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return totalSupply;\\n    }\\n}\\n\",\"keccak256\":\"0xd251a1207e1faa4c41500bf927310bb739b1fbc0bf880f236f8e0a9236d6a03a\"},\"@aragon/os/contracts/common/TimeHelpers.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Uint256Helpers.sol\\\";\\n\\n\\ncontract TimeHelpers {\\n    using Uint256Helpers for uint256;\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n    * @dev Returns the current block number, converted to uint64.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber64() internal view returns (uint64) {\\n        return getBlockNumber().toUint64();\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp() internal view returns (uint256) {\\n        return block.timestamp; // solium-disable-line security/no-block-members\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp, converted to uint64.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp64() internal view returns (uint64) {\\n        return getTimestamp().toUint64();\\n    }\\n}\\n\",\"keccak256\":\"0xfaba85207f0bb4bb5d7b6685a963c39a3258641bda6e523175640c3f9aeb2045\"},\"@aragon/os/contracts/common/Uint256Helpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary Uint256Helpers {\\n    uint256 private constant MAX_UINT64 = uint64(-1);\\n\\n    string private constant ERROR_NUMBER_TOO_BIG = \\\"UINT64_NUMBER_TOO_BIG\\\";\\n\\n    function toUint64(uint256 a) internal pure returns (uint64) {\\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\\n        return uint64(a);\\n    }\\n}\\n\",\"keccak256\":\"0x83033025a3f4402be3b7bcc9a23ce96ae4fadc7f251da8f139d73a13a3400b0c\"},\"@aragon/os/contracts/common/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n}\\n\",\"keccak256\":\"0xe497dcb85bbbf10224623247f39a4aeed7d3b230de2a811f3b69cb0e7d0a64d4\"},\"@aragon/os/contracts/common/VaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\nimport \\\"./EtherTokenConstant.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\nimport \\\"./IVaultRecoverable.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\n\\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\\n    using SafeERC20 for ERC20;\\n\\n    string private constant ERROR_DISALLOWED = \\\"RECOVER_DISALLOWED\\\";\\n    string private constant ERROR_VAULT_NOT_CONTRACT = \\\"RECOVER_VAULT_NOT_CONTRACT\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \\\"RECOVER_TOKEN_TRANSFER_FAILED\\\";\\n\\n    /**\\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\\n     *         but in case it does, this function allows one to recover them.\\n     * @param _token Token balance to be sent to recovery vault.\\n     */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\\n        address vault = getRecoveryVault();\\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\\n\\n        uint256 balance;\\n        if (_token == ETH) {\\n            balance = address(this).balance;\\n            vault.transfer(balance);\\n        } else {\\n            ERC20 token = ERC20(_token);\\n            balance = token.staticBalanceOf(this);\\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\\n        }\\n\\n        emit RecoverToVault(vault, _token, balance);\\n    }\\n\\n    /**\\n    * @dev By default deriving from AragonApp makes it recoverable\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return true;\\n    }\\n\\n    // Cast non-implemented interface to be public so we can use it internally\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0xea4ded621a63f988b83ac27b4a23cad0a42c3d77bcf6ca7b88681ae4ea650cf4\"},\"@aragon/os/contracts/evmscript/EVMScriptRunner.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\nimport \\\"../kernel/KernelConstants.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\n\\n\\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \\\"EVMRUN_EXECUTOR_UNAVAILABLE\\\";\\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \\\"EVMRUN_PROTECTED_STATE_MODIFIED\\\";\\n\\n    /* This is manually crafted in assembly\\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\";\\n    */\\n\\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\\n\\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\\n    }\\n\\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n        return IEVMScriptRegistry(registryAddr);\\n    }\\n\\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\\n        internal\\n        isInitialized\\n        protectState\\n        returns (bytes)\\n    {\\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\\n\\n        bytes4 sig = executor.execScript.selector;\\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\\n\\n        bytes memory output;\\n        assembly {\\n            let success := delegatecall(\\n                gas,                // forward all gas\\n                executor,           // address\\n                add(data, 0x20),    // calldata start\\n                mload(data),        // calldata length\\n                0,                  // don't write output (we'll handle this ourselves)\\n                0                   // don't write output\\n            )\\n\\n            output := mload(0x40) // free mem ptr get\\n\\n            switch success\\n            case 0 {\\n                // If the call errored, forward its full error data\\n                returndatacopy(output, 0, returndatasize)\\n                revert(output, returndatasize)\\n            }\\n            default {\\n                switch gt(returndatasize, 0x3f)\\n                case 0 {\\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\\n                    // revert with \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\"\\n                    // See remix: doing a `revert(\\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\")` always results in\\n                    // this memory layout\\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\\n\\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\\n                }\\n                default {\\n                    // Copy result\\n                    //\\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\\n                    //    [ output length (32 bytes) ]\\n                    //    [ output content (N bytes) ]\\n                    //\\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\\n                    let copysize := sub(returndatasize, 0x20)\\n                    returndatacopy(output, 0x20, copysize)\\n\\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\\n                }\\n            }\\n        }\\n\\n        emit ScriptResult(address(executor), _script, _input, output);\\n\\n        return output;\\n    }\\n\\n    modifier protectState {\\n        address preKernel = address(kernel());\\n        bytes32 preAppId = appId();\\n        _; // exec\\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\\n    }\\n}\\n\",\"keccak256\":\"0xf8b4ccf7ee558224c155604a4a0b5cc35715367cda5010fb38e21d63ec5236c9\"},\"@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IEVMScriptExecutor {\\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\\n    function executorType() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x76ad18a278e36e14147f5b58a1157de67ce95f28813f3e1eacfedaaf53dd33b9\"},\"@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    */\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\\n}\\n\",\"keccak256\":\"0x66b255ac1537765d6e79cc0ed02df004e7bf214863773901e207baafd59dc2ce\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\ninterface IKernelEvents {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\\n}\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IKernelEvents, IVaultRecoverable {\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\\n}\\n\",\"keccak256\":\"0x96e9fd607b156a96905ec0108bb4fbcc5ad85212bb98e03600069bb5727d2daa\"},\"@aragon/os/contracts/kernel/KernelConstants.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract KernelAppIds {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\\\"kernel\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\\\"acl\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\\\"vault\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\\n}\\n\\n\\ncontract KernelNamespaceConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\\\"core\\\");\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\\\"base\\\");\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n}\\n\",\"keccak256\":\"0x817f66cfc7bfafd19a4e6b1344850c5f7b72e39a1073fe862efebe608a07c0d3\"},\"@aragon/os/contracts/lib/token/ERC20.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 {\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address _who) public view returns (uint256);\\n\\n    function allowance(address _owner, address _spender)\\n        public view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) public returns (bool);\\n\\n    function approve(address _spender, uint256 _value)\\n        public returns (bool);\\n\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        public returns (bool);\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0xa2e319fde92f9e70912f09bf6e99bbf8b9b798961d54ffcba59d347d37bde1b7\"}},\"version\":1}",
  "bytecode": "0x6080604052620000176401000000006200001d810204565b6200023b565b6200003064010000000062000125810204565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a45440000000000000000602082015290156200010c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620000d0578181015183820152602001620000b6565b50505050905090810190601f168015620000fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506200012360001964010000000062000154810204565b565b60006200014f60008051602062004deb833981519152640100000000620035406200023382021704565b905090565b6200016764010000000062000125810204565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a454400000000000000006020820152901562000206576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015620000d0578181015183820152602001620000b6565b506200023060008051602062004deb83398151915282640100000000620048786200023782021704565b50565b5490565b9055565b614ba0806200024b6000396000f3006080604052600436106102235763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416627bb00381146103af57806301ffc9a7146103d65780630803fac01461042457806311a5e40914610439578063150b7a02146104835780631626ba7e146104c95780631ce3018114610527578063206b60f91461053c57806320c13b0b1461055157806326f06d24146105e85780632914b9bd146105fd57806332f0a3b51461067f578063368c3c34146106945780633e4eb756146106a957806342b2d066146106be57806347e7ef24146106d357806348a0c8dd146106f75780634c7ec0b01461070c57806354842f1414610724578063578eb50b146107395780635fa5e4e6146107675780636298e9021461077c5780637e7db6e1146107aa57806380afdea8146107d85780638129fc1c146107ed578063851a3790146108025780638b3dd7491461081a5780639890cdca1461082f5780639d4941d814610844578063a1658fad14610872578063a479e508146108e6578063a83e52b4146108fb578063aae2505114610929578063ab23c3451461093e578063b03bdb0414610978578063b06c42441461098d578063b4fa653c146109a2578063b61d27f6146109ba578063beabacc8146109f8578063c0774df314610a2f578063d4aae0c414610aa3578063d948d46814610ab8578063de4796ed14610b11578063e3d670d714610b26578063fd64eccb14610b54575b61022b610b69565b60408051808201909152601481527f494e49545f4e4f545f494e495449414c495a45440000000000000000000000006020820152901515610304576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156102c95781810151838201526020016102b1565b50505050905090810190601f1680156102f65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060408051808201909152601381527f5641554c545f444154415f4e4f4e5f5a45524f00000000000000000000000000602082015236156103a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b506103ad600034610b93565b005b3480156103bb57600080fd5b506103c4610eb2565b60408051918252519081900360200190f35b3480156103e257600080fd5b506104107fffffffff0000000000000000000000000000000000000000000000000000000060043516610ed6565b604080519115158252519081900360200190f35b34801561043057600080fd5b50610410610b69565b34801561044557600080fd5b5061044e610fbd565b604080517fffffffff000000000000000000000000000000000000000000000000000000009092168252519081900360200190f35b34801561048f57600080fd5b5061044e73ffffffffffffffffffffffffffffffffffffffff60048035821691602480359091169160443591606435908101910135610fe1565b3480156104d557600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261044e9583359536956044949193909101919081908401838280828437509497506110ab9650505050505050565b34801561053357600080fd5b5061044e611137565b34801561054857600080fd5b506103c461113c565b34801561055d57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261044e94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506111719650505050505050565b3480156105f457600080fd5b506103c46111fe565b34801561060957600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526106569436949293602493928401919081908401838280828437509497506112ae9650505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561068b57600080fd5b506106566113ba565b3480156106a057600080fd5b506103c4611458565b3480156106b557600080fd5b506103c461147c565b3480156106ca57600080fd5b506103c46114a0565b6103ad73ffffffffffffffffffffffffffffffffffffffff600435166024356114c4565b34801561070357600080fd5b50610410611578565b34801561071857600080fd5b506103ad6004356115a8565b34801561073057600080fd5b506103c46116e1565b34801561074557600080fd5b506103ad73ffffffffffffffffffffffffffffffffffffffff60043516611705565b34801561077357600080fd5b506103c461188d565b34801561078857600080fd5b506103ad73ffffffffffffffffffffffffffffffffffffffff600435166118b1565b3480156107b657600080fd5b5061041073ffffffffffffffffffffffffffffffffffffffff60043516611b7c565b3480156107e457600080fd5b506103c4611b82565b3480156107f957600080fd5b506103ad611bad565b34801561080e57600080fd5b50610656600435611c66565b34801561082657600080fd5b506103c4611c9b565b34801561083b57600080fd5b5061044e611cc6565b34801561085057600080fd5b506103ad73ffffffffffffffffffffffffffffffffffffffff60043516611cea565b34801561087e57600080fd5b50604080516020600460443581810135838102808601850190965280855261041095833573ffffffffffffffffffffffffffffffffffffffff1695602480359636969560649593949201929182918501908490808284375094975061200c9650505050505050565b3480156108f257600080fd5b5061065661219c565b34801561090757600080fd5b506103ad73ffffffffffffffffffffffffffffffffffffffff6004351661225e565b34801561093557600080fd5b50610656612463565b34801561094a57600080fd5b506103ad6004803573ffffffffffffffffffffffffffffffffffffffff16906024803590810191013561247f565b34801561098457600080fd5b506103c4612ae6565b34801561099957600080fd5b506103c4612aeb565b3480156109ae57600080fd5b50610410600435612b0f565b3480156109c657600080fd5b506103ad6004803573ffffffffffffffffffffffffffffffffffffffff16906024803591604435918201910135612b24565b348015610a0457600080fd5b506103ad73ffffffffffffffffffffffffffffffffffffffff60043581169060243516604435612d3a565b348015610a3b57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261041095833573ffffffffffffffffffffffffffffffffffffffff169536956044949193909101919081908401838280828437509497506130e59650505050505050565b348015610aaf57600080fd5b50610656613122565b348015610ac457600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103ad94369492936024939284019190819084018382808284375094975061314d9650505050505050565b348015610b1d57600080fd5b50610410613227565b348015610b3257600080fd5b506103c473ffffffffffffffffffffffffffffffffffffffff60043516613258565b348015610b6057600080fd5b506104106132ac565b600080610b74611c9b565b90508015801590610b8c575080610b896132b1565b10155b91505b5090565b610b9b611578565b60408051808201909152601581527f5641554c545f4e4f545f4445504f53495441424c4500000000000000000000006020820152901515610c38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b5060408051808201909152601881527f5641554c545f4445504f5349545f56414c55455f5a45524f0000000000000000602082015260008211610cd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b5073ffffffffffffffffffffffffffffffffffffffff82161515610d985760408051808201909152601481527f5641554c545f56414c55455f4d49534d415443480000000000000000000000006020820152348214610d92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50610e61565b610dc073ffffffffffffffffffffffffffffffffffffffff831633308463ffffffff6132b516565b6040805190810160405280602081526020017f5641554c545f544f4b454e5f5452414e534645525f46524f4d5f524556455254815250901515610e5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b505b604080518281529051339173ffffffffffffffffffffffffffffffffffffffff8516917f2790b90165fd3973ad7edde4eca71b4f8808dd4857a2a3a3e8ae5642a5cb196e9181900360200190a35050565b7f6eb2a499556bfa2872f5aa15812b956cc4a71b4d64eb3553f7073c7e41415aaa81565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167ffb855dc9000000000000000000000000000000000000000000000000000000001480610f6957507fffffffff0000000000000000000000000000000000000000000000000000000082167f150b7a0200000000000000000000000000000000000000000000000000000000145b80610fb557507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b90505b919050565b7ffb855dc90000000000000000000000000000000000000000000000000000000081565b60008473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe0d2ab3bf6896c073bb33b920a9b60f3c8207b3cc3b7561c3101cb081a8f0883878787604051808481526020018060200182810382528484828181526020019250808284376040519201829003965090945050505050a4507f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b600082815260208190526040812054819060ff16156110d5576110ce6001613356565b9150611130565b60015473ffffffffffffffffffffffffffffffffffffffff1615156110fc57506000611124565b60015461112190859073ffffffffffffffffffffffffffffffffffffffff168561338b565b90505b61112d81613356565b91505b5092915050565b600081565b604080517f5452414e534645525f524f4c45000000000000000000000000000000000000008152905190819003600d01902081565b60006111f7836040518082805190602001908083835b602083106111c457805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611187565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020836110ab565b9392505050565b6000611208610b69565b60408051808201909152601481527f494e49545f4e4f545f494e495449414c495a454400000000000000000000000060208201529015156112a5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50506002545b90565b60006112b861219c565b73ffffffffffffffffffffffffffffffffffffffff166304bf2a7f836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561133c578181015183820152602001611324565b50505050905090810190601f1680156113695780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561138857600080fd5b505af115801561139c573d6000803e3d6000fd5b505050506040513d60208110156113b257600080fd5b505192915050565b60006113c4613122565b73ffffffffffffffffffffffffffffffffffffffff166332f0a3b56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561142757600080fd5b505af115801561143b573d6000803e3d6000fd5b505050506040513d602081101561145157600080fd5b5051905090565b7fb421f7ad7646747f3051c50c0b8e2377839296cd4973e27f63821d73e390338f81565b7f0a1ad7b87f5846153c6d5a1f761d71c7d0cfd122384f56066cd33239b793369481565b7f71eee93d500f6f065e38b27d242a756466a00a52a1dbcd6b4260f01a8640402a81565b6114cc610b69565b60408051808201909152601481527f494e49545f4e4f545f494e495449414c495a45440000000000000000000000006020820152901515611569576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b506115748282610b93565b5050565b60006115a37f665fd576fbbe6f247aff98f5c94a561e3f71ec2d3c988d56f12d342396c50cea613540565b905090565b7f0b29780bb523a130b3b01f231ef49ed2fa2781645591a0b0a44ca98f15a5994c6115d282613544565b6115dd33838361200c565b60408051808201909152600f81527f4150505f415554485f4641494c45440000000000000000000000000000000000602082015290151561167a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b5060008381526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905551849133917fb150212e573caa2a0216cf8f273ef996af143fd7b2d35abd92c8105536cac1609190a3505050565b7f23ce341656c3f14df6692eebd4757791e33662b7dcf9970c8308303da5472b7c81565b7f71eee93d500f6f065e38b27d242a756466a00a52a1dbcd6b4260f01a8640402a61172f8261354f565b61173a33838361200c565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156117d7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b506117e183613570565b60408051808201909152601981527f4147454e545f544f4b454e5f4e4f545f50524f54454354454400000000000000602082015290151561187e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50611888836135e8565b505050565b7fcebf517aa4440d1d125e0355aae64401211d0848a23c02cc5d29a14822580ba481565b7f6eb2a499556bfa2872f5aa15812b956cc4a71b4d64eb3553f7073c7e41415aaa6118db8261354f565b6118e633838361200c565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515611983576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b5060025460408051808201909152601881527f4147454e545f544f4b454e535f4341505f524541434845440000000000000000602082015290600a11611a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50611a2f83613713565b60408051808201909152601581527f4147454e545f544f4b454e5f4e4f545f455243323000000000000000000000006020820152901515611acc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50611ad683613570565b60408051808201909152601d81527f4147454e545f544f4b454e5f414c52454144595f50524f54454354454400000060208201529015611b72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b506118888361373e565b50600090565b60006115a37fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b613540565b611bb5611c9b565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a4544000000000000000060208201529015611c51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50611c5a6137db565b611c6460016138b8565b565b6002805482908110611c7457fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60006115a37febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e613540565b7f20c13b0b0000000000000000000000000000000000000000000000000000000081565b6000806000611cf884611b7c565b60408051808201909152601281527f5245434f5645525f444953414c4c4f57454400000000000000000000000000006020820152901515611d95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50611d9e6113ba565b9250611da9836138ef565b60408051808201909152601a81527f5245434f5645525f5641554c545f4e4f545f434f4e54524143540000000000006020820152901515611e46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b5073ffffffffffffffffffffffffffffffffffffffff84161515611eb1576040513031925073ffffffffffffffffffffffffffffffffffffffff84169083156108fc029084906000818181858888f19350505050158015611eab573d6000803e3d6000fd5b50611fa1565b5082611ed973ffffffffffffffffffffffffffffffffffffffff82163063ffffffff61392216565b9150611f0273ffffffffffffffffffffffffffffffffffffffff8216848463ffffffff613a5b16565b60408051808201909152601d81527f5245434f5645525f544f4b454e5f5452414e534645525f4641494c45440000006020820152901515611f9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b505b8373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b600080612017610b69565b15156120265760009150612194565b61202e613122565b905073ffffffffffffffffffffffffffffffffffffffff811615156120565760009150612194565b8073ffffffffffffffffffffffffffffffffffffffff1663fdef910686308761207e88613af3565b6040517c010000000000000000000000000000000000000000000000000000000063ffffffff871602815273ffffffffffffffffffffffffffffffffffffffff808616600483019081529085166024830152604482018490526080606483019081528351608484015283519192909160a490910190602085019080838360005b838110156121165781810151838201526020016120fe565b50505050905090810190601f1680156121435780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561216557600080fd5b505af1158015612179573d6000803e3d6000fd5b505050506040513d602081101561218f57600080fd5b505191505b509392505050565b6000806121a7613122565b604080517fbe00bbd80000000000000000000000000000000000000000000000000000000081527fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb60048201527fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd616024820152905173ffffffffffffffffffffffffffffffffffffffff929092169163be00bbd8916044808201926020929091908290030181600087803b15801561138857600080fd5b60007f23ce341656c3f14df6692eebd4757791e33662b7dcf9970c8308303da5472b7c61228a8361354f565b61229533838361200c565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515612332576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b5060408051808201909152601881527f4147454e545f44455349474e415445445f544f5f53454c460000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff85163014156123e7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b506001805473ffffffffffffffffffffffffffffffffffffffff8681167fffffffffffffffffffffffff00000000000000000000000000000000000000008316811790935560405191169450849033907f3ecf54ed9acd859c5ee7f080794267b8f08b65d2446d816cef1efccd6d00d73590600090a450505050565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60006060806000806000806000807f0a1ad7b87f5846153c6d5a1f761d71c7d0cfd122384f56066cd33239b79336946001026125138d6124ee8e8e8080601f01602080910402602001604051908101604052809392919081815260200183838082843750613afd945050505050565b7c01000000000000000000000000000000000000000000000000000000009004613b16565b61251e33838361200c565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156125bb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50600254604080518281526020808402820101909152909b508b80156125eb578160200160208202803883390190505b5099508a604051908082528060200260200182016040528015612618578160200160208202803883390190505b509850600097505b8a88101561275e57600280548990811061263657fe5b6000918252602091829020015460408051808201909152601681527f4147454e545f5441524745545f50524f544543544544000000000000000000009281019290925273ffffffffffffffffffffffffffffffffffffffff90811698508f168814156126fe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50868a8981518110151561270e57fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029091019091015261273b87613258565b898981518110151561274957fe5b60209081029091010152600190970196612620565b8d73ffffffffffffffffffffffffffffffffffffffff168d8d604051808383808284378201915050925050506000604051808303816000865af191505095503d935060405194503d85016040523d6000863e8515612ae25760025460408051808201909152601f81527f4147454e545f50524f5445435445445f544f4b454e535f4d4f444946494544006020820152908c14612856576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50600092505b8a831015612a6057898381518110151561287257fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff166002848154811015156128a157fe5b6000918252602091829020015460408051808201909152601f81527f4147454e545f50524f5445435445445f544f4b454e535f4d4f4449464945440092810192909252909173ffffffffffffffffffffffffffffffffffffffff90911614612965576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50888381518110151561297457fe5b906020019060200201516129b760028581548110151561299057fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16613258565b60408051808201909152601f81527f4147454e545f50524f5445435445445f42414c414e43455f4c4f5745524544006020820152911115612a54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b5060019092019161285c565b8d73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f47f4287d5285559a03d8affeadc53ef3fca238a63c256c08a22bfd30fd5d33ce8f8f6040518080602001828103825284848281815260200192508082843760405192018290039550909350505050a38385f35b8385fd5b600a81565b7f0b29780bb523a130b3b01f231ef49ed2fa2781645591a0b0a44ca98f15a5994c81565b60006020819052908152604090205460ff1681565b60007fcebf517aa4440d1d125e0355aae64401211d0848a23c02cc5d29a14822580ba4600102612bad8686612b8887878080601f01602080910402602001604051908101604052809392919081815260200183838082843750613afd945050505050565b7c01000000000000000000000000000000000000000000000000000000009004613b38565b612bb833838361200c565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515612c55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b508673ffffffffffffffffffffffffffffffffffffffff168686866040518083838082843782019150509250505060006040518083038185875af19250505092508215612d23578673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc25cfed0b22da6a56f0e5ff784979a0b8623eddf2aee4acd33c2adefb09cbab6888888604051808481526020018060200182810382528484828181526020019250808284376040519201829003965090945050505050a35b6040513d6000823e838015612d36573d82f35b3d82fd5b604080517f5452414e534645525f524f4c45000000000000000000000000000000000000008152905190819003600d019020612d77848484613b63565b612d8233838361200c565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515612e1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b5060408051808201909152601981527f5641554c545f5452414e534645525f56414c55455f5a45524f00000000000000602082015260008411612ebe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b5073ffffffffffffffffffffffffffffffffffffffff85161515612fb35760405173ffffffffffffffffffffffffffffffffffffffff85169084156108fc029085906000818181858888f193505050506040805190810160405280601381526020017f5641554c545f53454e445f524556455254454400000000000000000000000000815250901515612fad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50613079565b612fda73ffffffffffffffffffffffffffffffffffffffff8616858563ffffffff613a5b16565b60408051808201909152601d81527f5641554c545f544f4b454e5f5452414e534645525f52455645525445440000006020820152901515613077576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b505b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f239e7f6cdac8fb35a788a46b431b54da87de90b82448a2c294be5e92a6e579af856040518082815260200191505060405180910390a35050505050565b60006111f7837fb421f7ad7646747f3051c50c0b8e2377839296cd4973e27f63821d73e390338f61311d61311886613b9c565b613cc0565b61200c565b60006115a37f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b613540565b60608061315a33846130e5565b60408051808201909152601581527f4147454e545f43414e5f4e4f545f464f5257415244000000000000000000000060208201529015156131f7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50506040805160208082018352600080835283519081529081019092529150613221838383613d01565b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff613252611c9b565b14905090565b600073ffffffffffffffffffffffffffffffffffffffff8216151561327f57503031610fb8565b6132a573ffffffffffffffffffffffffffffffffffffffff83163063ffffffff61392216565b9050610fb8565b600190565b4390565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905260009061334c86826143d7565b9695505050505050565b600081613364576000610fb5565b507f20c13b0b00000000000000000000000000000000000000000000000000000000919050565b60008060008351600014156133a35760009250613537565b8360008151811015156133b257fe5b01602001517f0100000000000000000000000000000000000000000000000000000000000000908190048102049150600460ff8316106133f55760009250613537565b8160ff16600481111561340457fe5b9050600181600481111561341457fe5b141561342c57613425868686614425565b9250613537565b600281600481111561343a57fe5b141561350b57604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083018a905283518084039091018152605c90920192839052815161342593918291908401908083835b602083106134d757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161349a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208686614425565b600381600481111561351957fe5b141561353257613425858761352d8761450b565b614617565b600092505b50509392505050565b5490565b6060610fb582613cc0565b6060610fb58273ffffffffffffffffffffffffffffffffffffffff16613cc0565b6000805b6002548110156135dd578273ffffffffffffffffffffffffffffffffffffffff166002828154811015156135a457fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614156135d557600191506135e2565b600101613574565b600091505b50919050565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061361857fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16600261364583614778565b8154811061364f57fe5b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905560028054906136ce907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301614b3b565b5060405173ffffffffffffffffffffffffffffffffffffffff8216907f3da25279c93c5b22b359bebff8b5ddbfd9b0506be8344b93c9a7dc999459fe0490600090a250565b600061371e826138ef565b151561372c57506000610fb8565b61373582613258565b50600192915050565b6002805460018101825560009182527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff841690811790915560405190917ff70a5123a7f334e5dac1d9aa3a6aafbc316712bf2519ffe0d3aa4f7cba52767e91a250565b6137e3611c9b565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a454400000000000000006020820152901561387f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50611c6461388b6132b1565b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e9063ffffffff61487816565b6138e87f665fd576fbbe6f247aff98f5c94a561e3f71ec2d3c988d56f12d342396c50cea8263ffffffff61487816565b50565b5490565b60008073ffffffffffffffffffffffffffffffffffffffff8316151561391857600091506135e2565b50506000903b1190565b6040805173ffffffffffffffffffffffffffffffffffffffff83166024808301919091528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f70a082310000000000000000000000000000000000000000000000000000000017905260009081806139af868461487c565b60408051808201909152601c81527f534146455f4552435f32305f42414c414e43455f52455645525445440000000060208201529193509150821515613a51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b5095945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052600090613aea85826143d7565b95945050505050565b8051602002815290565b6000600482511015613b0e57610fb8565b506020015190565b60606111f78373ffffffffffffffffffffffffffffffffffffffff16836148ad565b6060613b5b8473ffffffffffffffffffffffffffffffffffffffff168484614908565b949350505050565b6060613b5b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1684614908565b6000816040516020018082805190602001908083835b60208310613bef57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613bb2565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310613c7057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613c33565b5181516020939093036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0180199091169216919091179052604051920182900390912095945050505050565b6040805160018082528183019092526060916020808301908038833901905050905081816000815181101515613cf257fe5b60209081029091010152919050565b6060600080606080613d11610b69565b60408051808201909152601481527f494e49545f4e4f545f494e495449414c495a45440000000000000000000000006020820152901515613dae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50600080613dba613122565b9150613dc4611b82565b9050613dcf8a6112ae565b60408051808201909152601b81527f45564d52554e5f4558454355544f525f554e415641494c41424c450000000000602082015290965073ffffffffffffffffffffffffffffffffffffffff87161515613e85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b506040516060602482019081528b5160848301528b517f279cea3500000000000000000000000000000000000000000000000000000000975087928d928d928d9282916044820191606481019160a490910190602089019080838360005b83811015613efb578181015183820152602001613ee3565b50505050905090810190601f168015613f285780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015613f5b578181015183820152602001613f43565b50505050905090810190601f168015613f885780820380516001836020036101000a031916815260200191505b508481038252855181528551602091820191808801910280838360005b83811015613fbd578181015183820152602001613fa5565b505050509050019650505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509350600080855160208701895af460405193508080156140c257603f3d1180156140605760203d03806020883e86016040526140bc565b7f08c379a000000000000000000000000000000000000000000000000000000000865260206004870152601e60248701527f45564d52554e5f4558454355544f525f494e56414c49445f52455455524e00006044870152606486fd5b506140cb565b3d6000863e3d85fd5b50508573ffffffffffffffffffffffffffffffffffffffff167f5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad98b8b8660405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561414d578181015183820152602001614135565b50505050905090810190601f16801561417a5780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b838110156141ad578181015183820152602001614195565b50505050905090810190601f1680156141da5780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b8381101561420d5781810151838201526020016141f5565b50505050905090810190601f16801561423a5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a28296508173ffffffffffffffffffffffffffffffffffffffff1661426d613122565b73ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601f81526020017f45564d52554e5f50524f5445435445445f53544154455f4d4f44494649454400815250901515614323576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b508061432d611b82565b60408051808201909152601f81527f45564d52554e5f50524f5445435445445f53544154455f4d4f44494649454400602082015291146143c9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b505050505050509392505050565b6000806040516020818551602087016000895af1600081111561441b573d8015614408576020811461441157614419565b60019350614419565b600183511493505b505b5090949350505050565b600080600080600061443686614981565b9350935093509350831561444d5760009450614500565b60408051600080825260208083018085528c905260ff8516838501526060830187905260808301869052925160019360a08085019491937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0840193928390039091019190865af11580156144c5573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161494505b505050509392505050565b805160408051808201909152601e81527f53494756414c5f494e56414c49445f4c454e4754485f504f505f42595445000060208201526060919060009081908184116145b3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50600183036040519080825280601f01601f1916602001820160405280156145e5578160200160208202803883390190505b5093508351600014156145f75761460f565b60218501915060208401905061460f81838651614a61565b505050919050565b60408051602481018481526044820192835283516064830152835160009360609385937f1626ba7e000000000000000000000000000000000000000000000000000000009389938993909160849091019060208501908083838b5b8381101561468a578181015183820152602001614672565b50505050905090810190601f1680156146b75780820380516001836020036101000a031916815260200191505b509350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050915061472a86836203d090614ae1565b7fffffffff00000000000000000000000000000000000000000000000000000000167f20c13b0b00000000000000000000000000000000000000000000000000000000149695505050505050565b6000805b6002548110156147e4578273ffffffffffffffffffffffffffffffffffffffff166002828154811015156147ac57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614156147dc578091506135e2565b60010161477c565b604080518082018252601981527f4147454e545f544f4b454e5f4e4f545f50524f54454354454400000000000000602080830191825292517f08c379a0000000000000000000000000000000000000000000000000000000008152600481019384528251602482015282519293928392604490920191908083836000838110156102c95781810151838201526020016102b1565b9055565b6000806000806040516020818751602089018a5afa925060008311156148a157805191505b50909590945092505050565b6040805160028082526060808301845292602083019080388339019050509050828160008151811015156148dd57fe5b6020908102909101015280518290829060019081106148f857fe5b6020908102909101015292915050565b604080516003808252608082019092526060916020820183803883390190505090508381600081518110151561493a57fe5b60209081029091010152805183908290600190811061495557fe5b60209081029091010152805182908290600290811061497057fe5b602090810290910101529392505050565b6000806000808451604214151561499b5760019350614a5a565b8460418151811015156149aa57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900490506021850151925060418501519150601b8160ff161015614a3857601b015b8060ff16601b14158015614a5057508060ff16601c14155b15614a5a57600193505b9193509193565b60005b60208210614aa45782518452602093840193909201917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090910190614a64565b50905182516020929092036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0180199091169116179052565b60008060008060005a9350858411614af95783614afb565b855b9250600080885160208a018b87fa9150811515614b1757614500565b503d60208114614b2657614500565b604051816000823e5198975050505050505050565b815481835581811115611888576000838152602090206118889181019083016112ab91905b80821115610b8f5760008155600101614b605600a165627a7a72305820d96aa6023e14042e19a2cb7b66927ccef20c3c3aed56e28b260dea0767223fd80029ebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e",
  "deployedBytecode": "0x6080604052600436106102235763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416627bb00381146103af57806301ffc9a7146103d65780630803fac01461042457806311a5e40914610439578063150b7a02146104835780631626ba7e146104c95780631ce3018114610527578063206b60f91461053c57806320c13b0b1461055157806326f06d24146105e85780632914b9bd146105fd57806332f0a3b51461067f578063368c3c34146106945780633e4eb756146106a957806342b2d066146106be57806347e7ef24146106d357806348a0c8dd146106f75780634c7ec0b01461070c57806354842f1414610724578063578eb50b146107395780635fa5e4e6146107675780636298e9021461077c5780637e7db6e1146107aa57806380afdea8146107d85780638129fc1c146107ed578063851a3790146108025780638b3dd7491461081a5780639890cdca1461082f5780639d4941d814610844578063a1658fad14610872578063a479e508146108e6578063a83e52b4146108fb578063aae2505114610929578063ab23c3451461093e578063b03bdb0414610978578063b06c42441461098d578063b4fa653c146109a2578063b61d27f6146109ba578063beabacc8146109f8578063c0774df314610a2f578063d4aae0c414610aa3578063d948d46814610ab8578063de4796ed14610b11578063e3d670d714610b26578063fd64eccb14610b54575b61022b610b69565b60408051808201909152601481527f494e49545f4e4f545f494e495449414c495a45440000000000000000000000006020820152901515610304576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156102c95781810151838201526020016102b1565b50505050905090810190601f1680156102f65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060408051808201909152601381527f5641554c545f444154415f4e4f4e5f5a45524f00000000000000000000000000602082015236156103a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b506103ad600034610b93565b005b3480156103bb57600080fd5b506103c4610eb2565b60408051918252519081900360200190f35b3480156103e257600080fd5b506104107fffffffff0000000000000000000000000000000000000000000000000000000060043516610ed6565b604080519115158252519081900360200190f35b34801561043057600080fd5b50610410610b69565b34801561044557600080fd5b5061044e610fbd565b604080517fffffffff000000000000000000000000000000000000000000000000000000009092168252519081900360200190f35b34801561048f57600080fd5b5061044e73ffffffffffffffffffffffffffffffffffffffff60048035821691602480359091169160443591606435908101910135610fe1565b3480156104d557600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261044e9583359536956044949193909101919081908401838280828437509497506110ab9650505050505050565b34801561053357600080fd5b5061044e611137565b34801561054857600080fd5b506103c461113c565b34801561055d57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261044e94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506111719650505050505050565b3480156105f457600080fd5b506103c46111fe565b34801561060957600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526106569436949293602493928401919081908401838280828437509497506112ae9650505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561068b57600080fd5b506106566113ba565b3480156106a057600080fd5b506103c4611458565b3480156106b557600080fd5b506103c461147c565b3480156106ca57600080fd5b506103c46114a0565b6103ad73ffffffffffffffffffffffffffffffffffffffff600435166024356114c4565b34801561070357600080fd5b50610410611578565b34801561071857600080fd5b506103ad6004356115a8565b34801561073057600080fd5b506103c46116e1565b34801561074557600080fd5b506103ad73ffffffffffffffffffffffffffffffffffffffff60043516611705565b34801561077357600080fd5b506103c461188d565b34801561078857600080fd5b506103ad73ffffffffffffffffffffffffffffffffffffffff600435166118b1565b3480156107b657600080fd5b5061041073ffffffffffffffffffffffffffffffffffffffff60043516611b7c565b3480156107e457600080fd5b506103c4611b82565b3480156107f957600080fd5b506103ad611bad565b34801561080e57600080fd5b50610656600435611c66565b34801561082657600080fd5b506103c4611c9b565b34801561083b57600080fd5b5061044e611cc6565b34801561085057600080fd5b506103ad73ffffffffffffffffffffffffffffffffffffffff60043516611cea565b34801561087e57600080fd5b50604080516020600460443581810135838102808601850190965280855261041095833573ffffffffffffffffffffffffffffffffffffffff1695602480359636969560649593949201929182918501908490808284375094975061200c9650505050505050565b3480156108f257600080fd5b5061065661219c565b34801561090757600080fd5b506103ad73ffffffffffffffffffffffffffffffffffffffff6004351661225e565b34801561093557600080fd5b50610656612463565b34801561094a57600080fd5b506103ad6004803573ffffffffffffffffffffffffffffffffffffffff16906024803590810191013561247f565b34801561098457600080fd5b506103c4612ae6565b34801561099957600080fd5b506103c4612aeb565b3480156109ae57600080fd5b50610410600435612b0f565b3480156109c657600080fd5b506103ad6004803573ffffffffffffffffffffffffffffffffffffffff16906024803591604435918201910135612b24565b348015610a0457600080fd5b506103ad73ffffffffffffffffffffffffffffffffffffffff60043581169060243516604435612d3a565b348015610a3b57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261041095833573ffffffffffffffffffffffffffffffffffffffff169536956044949193909101919081908401838280828437509497506130e59650505050505050565b348015610aaf57600080fd5b50610656613122565b348015610ac457600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103ad94369492936024939284019190819084018382808284375094975061314d9650505050505050565b348015610b1d57600080fd5b50610410613227565b348015610b3257600080fd5b506103c473ffffffffffffffffffffffffffffffffffffffff60043516613258565b348015610b6057600080fd5b506104106132ac565b600080610b74611c9b565b90508015801590610b8c575080610b896132b1565b10155b91505b5090565b610b9b611578565b60408051808201909152601581527f5641554c545f4e4f545f4445504f53495441424c4500000000000000000000006020820152901515610c38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b5060408051808201909152601881527f5641554c545f4445504f5349545f56414c55455f5a45524f0000000000000000602082015260008211610cd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b5073ffffffffffffffffffffffffffffffffffffffff82161515610d985760408051808201909152601481527f5641554c545f56414c55455f4d49534d415443480000000000000000000000006020820152348214610d92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50610e61565b610dc073ffffffffffffffffffffffffffffffffffffffff831633308463ffffffff6132b516565b6040805190810160405280602081526020017f5641554c545f544f4b454e5f5452414e534645525f46524f4d5f524556455254815250901515610e5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b505b604080518281529051339173ffffffffffffffffffffffffffffffffffffffff8516917f2790b90165fd3973ad7edde4eca71b4f8808dd4857a2a3a3e8ae5642a5cb196e9181900360200190a35050565b7f6eb2a499556bfa2872f5aa15812b956cc4a71b4d64eb3553f7073c7e41415aaa81565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167ffb855dc9000000000000000000000000000000000000000000000000000000001480610f6957507fffffffff0000000000000000000000000000000000000000000000000000000082167f150b7a0200000000000000000000000000000000000000000000000000000000145b80610fb557507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b90505b919050565b7ffb855dc90000000000000000000000000000000000000000000000000000000081565b60008473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe0d2ab3bf6896c073bb33b920a9b60f3c8207b3cc3b7561c3101cb081a8f0883878787604051808481526020018060200182810382528484828181526020019250808284376040519201829003965090945050505050a4507f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b600082815260208190526040812054819060ff16156110d5576110ce6001613356565b9150611130565b60015473ffffffffffffffffffffffffffffffffffffffff1615156110fc57506000611124565b60015461112190859073ffffffffffffffffffffffffffffffffffffffff168561338b565b90505b61112d81613356565b91505b5092915050565b600081565b604080517f5452414e534645525f524f4c45000000000000000000000000000000000000008152905190819003600d01902081565b60006111f7836040518082805190602001908083835b602083106111c457805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611187565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020836110ab565b9392505050565b6000611208610b69565b60408051808201909152601481527f494e49545f4e4f545f494e495449414c495a454400000000000000000000000060208201529015156112a5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50506002545b90565b60006112b861219c565b73ffffffffffffffffffffffffffffffffffffffff166304bf2a7f836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561133c578181015183820152602001611324565b50505050905090810190601f1680156113695780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561138857600080fd5b505af115801561139c573d6000803e3d6000fd5b505050506040513d60208110156113b257600080fd5b505192915050565b60006113c4613122565b73ffffffffffffffffffffffffffffffffffffffff166332f0a3b56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561142757600080fd5b505af115801561143b573d6000803e3d6000fd5b505050506040513d602081101561145157600080fd5b5051905090565b7fb421f7ad7646747f3051c50c0b8e2377839296cd4973e27f63821d73e390338f81565b7f0a1ad7b87f5846153c6d5a1f761d71c7d0cfd122384f56066cd33239b793369481565b7f71eee93d500f6f065e38b27d242a756466a00a52a1dbcd6b4260f01a8640402a81565b6114cc610b69565b60408051808201909152601481527f494e49545f4e4f545f494e495449414c495a45440000000000000000000000006020820152901515611569576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b506115748282610b93565b5050565b60006115a37f665fd576fbbe6f247aff98f5c94a561e3f71ec2d3c988d56f12d342396c50cea613540565b905090565b7f0b29780bb523a130b3b01f231ef49ed2fa2781645591a0b0a44ca98f15a5994c6115d282613544565b6115dd33838361200c565b60408051808201909152600f81527f4150505f415554485f4641494c45440000000000000000000000000000000000602082015290151561167a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b5060008381526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905551849133917fb150212e573caa2a0216cf8f273ef996af143fd7b2d35abd92c8105536cac1609190a3505050565b7f23ce341656c3f14df6692eebd4757791e33662b7dcf9970c8308303da5472b7c81565b7f71eee93d500f6f065e38b27d242a756466a00a52a1dbcd6b4260f01a8640402a61172f8261354f565b61173a33838361200c565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156117d7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b506117e183613570565b60408051808201909152601981527f4147454e545f544f4b454e5f4e4f545f50524f54454354454400000000000000602082015290151561187e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50611888836135e8565b505050565b7fcebf517aa4440d1d125e0355aae64401211d0848a23c02cc5d29a14822580ba481565b7f6eb2a499556bfa2872f5aa15812b956cc4a71b4d64eb3553f7073c7e41415aaa6118db8261354f565b6118e633838361200c565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515611983576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b5060025460408051808201909152601881527f4147454e545f544f4b454e535f4341505f524541434845440000000000000000602082015290600a11611a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50611a2f83613713565b60408051808201909152601581527f4147454e545f544f4b454e5f4e4f545f455243323000000000000000000000006020820152901515611acc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50611ad683613570565b60408051808201909152601d81527f4147454e545f544f4b454e5f414c52454144595f50524f54454354454400000060208201529015611b72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b506118888361373e565b50600090565b60006115a37fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b613540565b611bb5611c9b565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a4544000000000000000060208201529015611c51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50611c5a6137db565b611c6460016138b8565b565b6002805482908110611c7457fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60006115a37febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e613540565b7f20c13b0b0000000000000000000000000000000000000000000000000000000081565b6000806000611cf884611b7c565b60408051808201909152601281527f5245434f5645525f444953414c4c4f57454400000000000000000000000000006020820152901515611d95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50611d9e6113ba565b9250611da9836138ef565b60408051808201909152601a81527f5245434f5645525f5641554c545f4e4f545f434f4e54524143540000000000006020820152901515611e46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b5073ffffffffffffffffffffffffffffffffffffffff84161515611eb1576040513031925073ffffffffffffffffffffffffffffffffffffffff84169083156108fc029084906000818181858888f19350505050158015611eab573d6000803e3d6000fd5b50611fa1565b5082611ed973ffffffffffffffffffffffffffffffffffffffff82163063ffffffff61392216565b9150611f0273ffffffffffffffffffffffffffffffffffffffff8216848463ffffffff613a5b16565b60408051808201909152601d81527f5245434f5645525f544f4b454e5f5452414e534645525f4641494c45440000006020820152901515611f9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b505b8373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b600080612017610b69565b15156120265760009150612194565b61202e613122565b905073ffffffffffffffffffffffffffffffffffffffff811615156120565760009150612194565b8073ffffffffffffffffffffffffffffffffffffffff1663fdef910686308761207e88613af3565b6040517c010000000000000000000000000000000000000000000000000000000063ffffffff871602815273ffffffffffffffffffffffffffffffffffffffff808616600483019081529085166024830152604482018490526080606483019081528351608484015283519192909160a490910190602085019080838360005b838110156121165781810151838201526020016120fe565b50505050905090810190601f1680156121435780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561216557600080fd5b505af1158015612179573d6000803e3d6000fd5b505050506040513d602081101561218f57600080fd5b505191505b509392505050565b6000806121a7613122565b604080517fbe00bbd80000000000000000000000000000000000000000000000000000000081527fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb60048201527fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd616024820152905173ffffffffffffffffffffffffffffffffffffffff929092169163be00bbd8916044808201926020929091908290030181600087803b15801561138857600080fd5b60007f23ce341656c3f14df6692eebd4757791e33662b7dcf9970c8308303da5472b7c61228a8361354f565b61229533838361200c565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515612332576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b5060408051808201909152601881527f4147454e545f44455349474e415445445f544f5f53454c460000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff85163014156123e7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b506001805473ffffffffffffffffffffffffffffffffffffffff8681167fffffffffffffffffffffffff00000000000000000000000000000000000000008316811790935560405191169450849033907f3ecf54ed9acd859c5ee7f080794267b8f08b65d2446d816cef1efccd6d00d73590600090a450505050565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60006060806000806000806000807f0a1ad7b87f5846153c6d5a1f761d71c7d0cfd122384f56066cd33239b79336946001026125138d6124ee8e8e8080601f01602080910402602001604051908101604052809392919081815260200183838082843750613afd945050505050565b7c01000000000000000000000000000000000000000000000000000000009004613b16565b61251e33838361200c565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156125bb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50600254604080518281526020808402820101909152909b508b80156125eb578160200160208202803883390190505b5099508a604051908082528060200260200182016040528015612618578160200160208202803883390190505b509850600097505b8a88101561275e57600280548990811061263657fe5b6000918252602091829020015460408051808201909152601681527f4147454e545f5441524745545f50524f544543544544000000000000000000009281019290925273ffffffffffffffffffffffffffffffffffffffff90811698508f168814156126fe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50868a8981518110151561270e57fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029091019091015261273b87613258565b898981518110151561274957fe5b60209081029091010152600190970196612620565b8d73ffffffffffffffffffffffffffffffffffffffff168d8d604051808383808284378201915050925050506000604051808303816000865af191505095503d935060405194503d85016040523d6000863e8515612ae25760025460408051808201909152601f81527f4147454e545f50524f5445435445445f544f4b454e535f4d4f444946494544006020820152908c14612856576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50600092505b8a831015612a6057898381518110151561287257fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff166002848154811015156128a157fe5b6000918252602091829020015460408051808201909152601f81527f4147454e545f50524f5445435445445f544f4b454e535f4d4f4449464945440092810192909252909173ffffffffffffffffffffffffffffffffffffffff90911614612965576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50888381518110151561297457fe5b906020019060200201516129b760028581548110151561299057fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16613258565b60408051808201909152601f81527f4147454e545f50524f5445435445445f42414c414e43455f4c4f5745524544006020820152911115612a54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b5060019092019161285c565b8d73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f47f4287d5285559a03d8affeadc53ef3fca238a63c256c08a22bfd30fd5d33ce8f8f6040518080602001828103825284848281815260200192508082843760405192018290039550909350505050a38385f35b8385fd5b600a81565b7f0b29780bb523a130b3b01f231ef49ed2fa2781645591a0b0a44ca98f15a5994c81565b60006020819052908152604090205460ff1681565b60007fcebf517aa4440d1d125e0355aae64401211d0848a23c02cc5d29a14822580ba4600102612bad8686612b8887878080601f01602080910402602001604051908101604052809392919081815260200183838082843750613afd945050505050565b7c01000000000000000000000000000000000000000000000000000000009004613b38565b612bb833838361200c565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515612c55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b508673ffffffffffffffffffffffffffffffffffffffff168686866040518083838082843782019150509250505060006040518083038185875af19250505092508215612d23578673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc25cfed0b22da6a56f0e5ff784979a0b8623eddf2aee4acd33c2adefb09cbab6888888604051808481526020018060200182810382528484828181526020019250808284376040519201829003965090945050505050a35b6040513d6000823e838015612d36573d82f35b3d82fd5b604080517f5452414e534645525f524f4c45000000000000000000000000000000000000008152905190819003600d019020612d77848484613b63565b612d8233838361200c565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515612e1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b5060408051808201909152601981527f5641554c545f5452414e534645525f56414c55455f5a45524f00000000000000602082015260008411612ebe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b5073ffffffffffffffffffffffffffffffffffffffff85161515612fb35760405173ffffffffffffffffffffffffffffffffffffffff85169084156108fc029085906000818181858888f193505050506040805190810160405280601381526020017f5641554c545f53454e445f524556455254454400000000000000000000000000815250901515612fad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50613079565b612fda73ffffffffffffffffffffffffffffffffffffffff8616858563ffffffff613a5b16565b60408051808201909152601d81527f5641554c545f544f4b454e5f5452414e534645525f52455645525445440000006020820152901515613077576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b505b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f239e7f6cdac8fb35a788a46b431b54da87de90b82448a2c294be5e92a6e579af856040518082815260200191505060405180910390a35050505050565b60006111f7837fb421f7ad7646747f3051c50c0b8e2377839296cd4973e27f63821d73e390338f61311d61311886613b9c565b613cc0565b61200c565b60006115a37f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b613540565b60608061315a33846130e5565b60408051808201909152601581527f4147454e545f43414e5f4e4f545f464f5257415244000000000000000000000060208201529015156131f7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50506040805160208082018352600080835283519081529081019092529150613221838383613d01565b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff613252611c9b565b14905090565b600073ffffffffffffffffffffffffffffffffffffffff8216151561327f57503031610fb8565b6132a573ffffffffffffffffffffffffffffffffffffffff83163063ffffffff61392216565b9050610fb8565b600190565b4390565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905260009061334c86826143d7565b9695505050505050565b600081613364576000610fb5565b507f20c13b0b00000000000000000000000000000000000000000000000000000000919050565b60008060008351600014156133a35760009250613537565b8360008151811015156133b257fe5b01602001517f0100000000000000000000000000000000000000000000000000000000000000908190048102049150600460ff8316106133f55760009250613537565b8160ff16600481111561340457fe5b9050600181600481111561341457fe5b141561342c57613425868686614425565b9250613537565b600281600481111561343a57fe5b141561350b57604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083018a905283518084039091018152605c90920192839052815161342593918291908401908083835b602083106134d757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161349a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208686614425565b600381600481111561351957fe5b141561353257613425858761352d8761450b565b614617565b600092505b50509392505050565b5490565b6060610fb582613cc0565b6060610fb58273ffffffffffffffffffffffffffffffffffffffff16613cc0565b6000805b6002548110156135dd578273ffffffffffffffffffffffffffffffffffffffff166002828154811015156135a457fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614156135d557600191506135e2565b600101613574565b600091505b50919050565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061361857fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16600261364583614778565b8154811061364f57fe5b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905560028054906136ce907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301614b3b565b5060405173ffffffffffffffffffffffffffffffffffffffff8216907f3da25279c93c5b22b359bebff8b5ddbfd9b0506be8344b93c9a7dc999459fe0490600090a250565b600061371e826138ef565b151561372c57506000610fb8565b61373582613258565b50600192915050565b6002805460018101825560009182527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff841690811790915560405190917ff70a5123a7f334e5dac1d9aa3a6aafbc316712bf2519ffe0d3aa4f7cba52767e91a250565b6137e3611c9b565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a454400000000000000006020820152901561387f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50611c6461388b6132b1565b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e9063ffffffff61487816565b6138e87f665fd576fbbe6f247aff98f5c94a561e3f71ec2d3c988d56f12d342396c50cea8263ffffffff61487816565b50565b5490565b60008073ffffffffffffffffffffffffffffffffffffffff8316151561391857600091506135e2565b50506000903b1190565b6040805173ffffffffffffffffffffffffffffffffffffffff83166024808301919091528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f70a082310000000000000000000000000000000000000000000000000000000017905260009081806139af868461487c565b60408051808201909152601c81527f534146455f4552435f32305f42414c414e43455f52455645525445440000000060208201529193509150821515613a51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b5095945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052600090613aea85826143d7565b95945050505050565b8051602002815290565b6000600482511015613b0e57610fb8565b506020015190565b60606111f78373ffffffffffffffffffffffffffffffffffffffff16836148ad565b6060613b5b8473ffffffffffffffffffffffffffffffffffffffff168484614908565b949350505050565b6060613b5b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1684614908565b6000816040516020018082805190602001908083835b60208310613bef57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613bb2565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310613c7057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613c33565b5181516020939093036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0180199091169216919091179052604051920182900390912095945050505050565b6040805160018082528183019092526060916020808301908038833901905050905081816000815181101515613cf257fe5b60209081029091010152919050565b6060600080606080613d11610b69565b60408051808201909152601481527f494e49545f4e4f545f494e495449414c495a45440000000000000000000000006020820152901515613dae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50600080613dba613122565b9150613dc4611b82565b9050613dcf8a6112ae565b60408051808201909152601b81527f45564d52554e5f4558454355544f525f554e415641494c41424c450000000000602082015290965073ffffffffffffffffffffffffffffffffffffffff87161515613e85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b506040516060602482019081528b5160848301528b517f279cea3500000000000000000000000000000000000000000000000000000000975087928d928d928d9282916044820191606481019160a490910190602089019080838360005b83811015613efb578181015183820152602001613ee3565b50505050905090810190601f168015613f285780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015613f5b578181015183820152602001613f43565b50505050905090810190601f168015613f885780820380516001836020036101000a031916815260200191505b508481038252855181528551602091820191808801910280838360005b83811015613fbd578181015183820152602001613fa5565b505050509050019650505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509350600080855160208701895af460405193508080156140c257603f3d1180156140605760203d03806020883e86016040526140bc565b7f08c379a000000000000000000000000000000000000000000000000000000000865260206004870152601e60248701527f45564d52554e5f4558454355544f525f494e56414c49445f52455455524e00006044870152606486fd5b506140cb565b3d6000863e3d85fd5b50508573ffffffffffffffffffffffffffffffffffffffff167f5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad98b8b8660405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561414d578181015183820152602001614135565b50505050905090810190601f16801561417a5780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b838110156141ad578181015183820152602001614195565b50505050905090810190601f1680156141da5780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b8381101561420d5781810151838201526020016141f5565b50505050905090810190601f16801561423a5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a28296508173ffffffffffffffffffffffffffffffffffffffff1661426d613122565b73ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601f81526020017f45564d52554e5f50524f5445435445445f53544154455f4d4f44494649454400815250901515614323576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b508061432d611b82565b60408051808201909152601f81527f45564d52554e5f50524f5445435445445f53544154455f4d4f44494649454400602082015291146143c9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b505050505050509392505050565b6000806040516020818551602087016000895af1600081111561441b573d8015614408576020811461441157614419565b60019350614419565b600183511493505b505b5090949350505050565b600080600080600061443686614981565b9350935093509350831561444d5760009450614500565b60408051600080825260208083018085528c905260ff8516838501526060830187905260808301869052925160019360a08085019491937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0840193928390039091019190865af11580156144c5573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161494505b505050509392505050565b805160408051808201909152601e81527f53494756414c5f494e56414c49445f4c454e4754485f504f505f42595445000060208201526060919060009081908184116145b3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102c95781810151838201526020016102b1565b50600183036040519080825280601f01601f1916602001820160405280156145e5578160200160208202803883390190505b5093508351600014156145f75761460f565b60218501915060208401905061460f81838651614a61565b505050919050565b60408051602481018481526044820192835283516064830152835160009360609385937f1626ba7e000000000000000000000000000000000000000000000000000000009389938993909160849091019060208501908083838b5b8381101561468a578181015183820152602001614672565b50505050905090810190601f1680156146b75780820380516001836020036101000a031916815260200191505b509350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050915061472a86836203d090614ae1565b7fffffffff00000000000000000000000000000000000000000000000000000000167f20c13b0b00000000000000000000000000000000000000000000000000000000149695505050505050565b6000805b6002548110156147e4578273ffffffffffffffffffffffffffffffffffffffff166002828154811015156147ac57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614156147dc578091506135e2565b60010161477c565b604080518082018252601981527f4147454e545f544f4b454e5f4e4f545f50524f54454354454400000000000000602080830191825292517f08c379a0000000000000000000000000000000000000000000000000000000008152600481019384528251602482015282519293928392604490920191908083836000838110156102c95781810151838201526020016102b1565b9055565b6000806000806040516020818751602089018a5afa925060008311156148a157805191505b50909590945092505050565b6040805160028082526060808301845292602083019080388339019050509050828160008151811015156148dd57fe5b6020908102909101015280518290829060019081106148f857fe5b6020908102909101015292915050565b604080516003808252608082019092526060916020820183803883390190505090508381600081518110151561493a57fe5b60209081029091010152805183908290600190811061495557fe5b60209081029091010152805182908290600290811061497057fe5b602090810290910101529392505050565b6000806000808451604214151561499b5760019350614a5a565b8460418151811015156149aa57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900490506021850151925060418501519150601b8160ff161015614a3857601b015b8060ff16601b14158015614a5057508060ff16601c14155b15614a5a57600193505b9193509193565b60005b60208210614aa45782518452602093840193909201917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090910190614a64565b50905182516020929092036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0180199091169116179052565b60008060008060005a9350858411614af95783614afb565b855b9250600080885160208a018b87fa9150811515614b1757614500565b503d60208114614b2657614500565b604051816000823e5198975050505050505050565b815481835581811115611888576000838152602090206118889181019083016112ab91905b80821115610b8f5760008155600101614b605600a165627a7a72305820d96aa6023e14042e19a2cb7b66927ccef20c3c3aed56e28b260dea0767223fd80029",
  "devdoc": {
    "methods": {
      "addProtectedToken(address)": {
        "params": {
          "_token": "Address of the token to be protected"
        }
      },
      "allowRecoverability(address)": {
        "details": "Disable recovery escape hatch, as it could be used     maliciously to transfer funds away from the vault"
      },
      "canForward(address,bytes)": {
        "details": "IForwarder interface conformance",
        "params": {
          "_sender": "Address of the account intending to forward an action"
        },
        "return": "True if the given address can run scripts, false otherwise"
      },
      "canPerform(address,bytes32,uint256[])": {
        "details": "Check whether an action can be performed by a sender for a particular role on this app",
        "params": {
          "_params": "Permission params for the role",
          "_role": "Role on this app",
          "_sender": "Sender of the call"
        },
        "return": "Boolean indicating whether the sender has the permissions to perform the action.        Always returns false if the app hasn't been initialized yet."
      },
      "deposit(address,uint256)": {
        "params": {
          "_token": "Address of the token being transferred",
          "_value": "Amount of tokens being transferred"
        }
      },
      "execute(address,uint256,bytes)": {
        "params": {
          "_data": "Calldata for the action",
          "_ethValue": "Amount of ETH from the contract that is sent with the action",
          "_target": "Address where the action is being executed"
        },
        "return": "Exits call frame forwarding the return data of the executed call (either error or success data)"
      },
      "forward(bytes)": {
        "details": "IForwarder interface conformance. Forwards any token holder action.",
        "params": {
          "_evmScript": "Script being executed"
        }
      },
      "getInitializationBlock()": {
        "return": "Block number in which the contract was initialized"
      },
      "getRecoveryVault()": {
        "details": "Get the recovery vault for the app",
        "return": "Recovery vault address for the app"
      },
      "hasInitialized()": {
        "return": "Whether the contract has been initialized by the time of the current block"
      },
      "initialize()": {
        "details": "As an AragonApp it needs to be initialized in order for roles (`auth` and `authP`) to work"
      },
      "isForwarder()": {
        "details": "IForwarder interface conformance",
        "return": "Always true"
      },
      "isValidSignature(bytes,bytes)": {
        "details": "Default behavior of `isValidSignature(bytes,bytes)`, can be overloaded for custom validation",
        "params": {
          "_data": "Arbitrary length data signed on the behalf of address(this)",
          "_signature": "Signature byte array associated with _data"
        },
        "return": "A bytes4 magic value 0x20c13b0b if the signature check passes, 0x00000000 if not    * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5) MUST allow external calls"
      },
      "isValidSignature(bytes32,bytes)": {
        "params": {
          "_hash": "Arbitrary length data signed on the behalf of address (this)",
          "_signature": "Signature byte array associated with _data"
        },
        "return": "The ERC-1271 magic value if the signature is valid"
      },
      "presignHash(bytes32)": {
        "params": {
          "_hash": "Hash that will be considered signed regardless of the signature checked with 'isValidSignature()'"
        }
      },
      "removeProtectedToken(address)": {
        "params": {
          "_token": "Address of the token to be unprotected"
        }
      },
      "safeExecute(address,bytes)": {
        "params": {
          "_data": "Calldata for the action",
          "_target": "Address where the action is being executed"
        },
        "return": "Exits call frame forwarding the return data of the executed call (either error or success data)"
      },
      "setDesignatedSigner(address)": {
        "params": {
          "_designatedSigner": "Address that will be able to sign messages on behalf of the app"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Implements conformance to ERC-165",
        "params": {
          "_interfaceId": "Interface bytes to check"
        },
        "return": "True if this contract supports the interface"
      },
      "transfer(address,address,uint256)": {
        "params": {
          "_to": "Address of the recipient of tokens",
          "_token": "Address of the token being transferred",
          "_value": "Amount of tokens being transferred"
        }
      },
      "transferToVault(address)": {
        "params": {
          "_token": "Token balance to be sent to recovery vault."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "addProtectedToken(address)": {
        "notice": "Add `_token.symbol(): string` to the list of protected tokens"
      },
      "canForward(address,bytes)": {
        "notice": "Tells whether `_sender` can forward actions or not"
      },
      "deposit(address,uint256)": {
        "notice": "Deposit `_value` `_token` to the vault"
      },
      "execute(address,uint256,bytes)": {
        "notice": "Execute '`@radspec(_target, _data)`' on `_target``_ethValue == 0 ? '' : ' (Sending ' + @tokenAmount(0x0000000000000000000000000000000000000000, _ethValue) + ')'`"
      },
      "forward(bytes)": {
        "notice": "Execute the script as the Agent app"
      },
      "initialize()": {
        "notice": "Initialize Vault app"
      },
      "isForwarder()": {
        "notice": "Tells whether the Agent app is a forwarder or not"
      },
      "isValidSignature(bytes32,bytes)": {
        "notice": "Tells whether a signature is seen as valid by this contract through ERC-1271"
      },
      "presignHash(bytes32)": {
        "notice": "Pre-sign hash `_hash`"
      },
      "removeProtectedToken(address)": {
        "notice": "Remove `_token.symbol(): string` from the list of protected tokens"
      },
      "safeExecute(address,bytes)": {
        "notice": "Execute '`@radspec(_target, _data)`' on `_target`, ensuring that protected tokens can't be spent"
      },
      "setDesignatedSigner(address)": {
        "notice": "Set `_designatedSigner` as the designated signer of the app, which will be able to sign messages on behalf of the app"
      },
      "supportsInterface(bytes4)": {
        "notice": "Tells whether this contract supports a given ERC-165 interface"
      },
      "transfer(address,address,uint256)": {
        "notice": "Transfer `_value` `_token` from the Vault to `_to`"
      },
      "transferToVault(address)": {
        "notice": "Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them."
      }
    }
  }
}