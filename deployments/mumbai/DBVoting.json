{
  "address": "0x1b35798D90bA88aC2131Efb5694F2118C0075dDA",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "hasInitialized",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_script",
          "type": "bytes"
        }
      ],
      "name": "getEVMScriptExecutor",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRecoveryVault",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MODIFY_QUORUM_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_voteId",
          "type": "uint256"
        },
        {
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "getVoterState",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_voteId",
          "type": "uint256"
        }
      ],
      "name": "getVote",
      "outputs": [
        {
          "name": "open",
          "type": "bool"
        },
        {
          "name": "executed",
          "type": "bool"
        },
        {
          "name": "startDate",
          "type": "uint64"
        },
        {
          "name": "snapshotBlock",
          "type": "uint64"
        },
        {
          "name": "supportRequired",
          "type": "uint64"
        },
        {
          "name": "minAcceptQuorum",
          "type": "uint64"
        },
        {
          "name": "yea",
          "type": "uint256"
        },
        {
          "name": "nay",
          "type": "uint256"
        },
        {
          "name": "votingPower",
          "type": "uint256"
        },
        {
          "name": "script",
          "type": "bytes"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_minAcceptQuorumPct",
          "type": "uint64"
        }
      ],
      "name": "changeMinAcceptQuorumPct",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MODIFY_SUPPORT_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_supportRequiredPct",
          "type": "uint64"
        }
      ],
      "name": "changeSupportRequiredPct",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "token",
          "type": "address"
        }
      ],
      "name": "allowRecoverability",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "appId",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getInitializationBlock",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "transferToVault",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_sender",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "bytes32"
        },
        {
          "name": "_params",
          "type": "uint256[]"
        }
      ],
      "name": "canPerform",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getEVMScriptRegistry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "voteTime",
      "outputs": [
        {
          "name": "",
          "type": "uint64"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CREATE_VOTES_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_sender",
          "type": "address"
        },
        {
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "canForward",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_voteId",
          "type": "uint256"
        }
      ],
      "name": "canExecute",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_voteId",
          "type": "uint256"
        },
        {
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "canVote",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "kernel",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_executionScript",
          "type": "bytes"
        },
        {
          "name": "_metadata",
          "type": "string"
        }
      ],
      "name": "newVote",
      "outputs": [
        {
          "name": "voteId",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_evmScript",
          "type": "bytes"
        }
      ],
      "name": "forward",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "minAcceptQuorumPct",
      "outputs": [
        {
          "name": "",
          "type": "uint64"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isPetrified",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "votesLength",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_voteId",
          "type": "uint256"
        },
        {
          "name": "_supports",
          "type": "bool"
        },
        {
          "name": "_executesIfDecided",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        },
        {
          "name": "_supportRequiredPct",
          "type": "uint64"
        },
        {
          "name": "_minAcceptQuorumPct",
          "type": "uint64"
        },
        {
          "name": "_voteTime",
          "type": "uint64"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_executionScript",
          "type": "bytes"
        },
        {
          "name": "_metadata",
          "type": "string"
        },
        {
          "name": "_castVote",
          "type": "bool"
        },
        {
          "name": "_executesIfDecided",
          "type": "bool"
        }
      ],
      "name": "newVote",
      "outputs": [
        {
          "name": "voteId",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_voteId",
          "type": "uint256"
        }
      ],
      "name": "executeVote",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "supportRequiredPct",
      "outputs": [
        {
          "name": "",
          "type": "uint64"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "PCT_BASE",
      "outputs": [
        {
          "name": "",
          "type": "uint64"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isForwarder",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "voteId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "StartVote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "voteId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "supports",
          "type": "bool"
        },
        {
          "indexed": false,
          "name": "stake",
          "type": "uint256"
        }
      ],
      "name": "CastVote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "voteId",
          "type": "uint256"
        }
      ],
      "name": "ExecuteVote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "supportRequiredPct",
          "type": "uint64"
        }
      ],
      "name": "ChangeSupportRequired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "minAcceptQuorumPct",
          "type": "uint64"
        }
      ],
      "name": "ChangeMinQuorum",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "script",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "input",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "name": "ScriptResult",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoverToVault",
      "type": "event"
    }
  ],
  "transactionHash": "0xc7ab9570887d5168a98ce936b317b06b3e02c2d3b490da6df9427e49daa25c7a",
  "receipt": {
    "to": null,
    "from": "0x0533F9d586ABd3334a0E90cA162602D6574F0493",
    "contractAddress": "0x1b35798D90bA88aC2131Efb5694F2118C0075dDA",
    "transactionIndex": 25,
    "gasUsed": "3493277",
    "logsBloom": "0x
    "blockHash": "0x5475dbc7bab1fda2a95640c413c02504c4dabe092f9baf6fc67d363193070120",
    "transactionHash": "0xc7ab9570887d5168a98ce936b317b06b3e02c2d3b490da6df9427e49daa25c7a",
    "logs": [
      {
        "transactionIndex": 25,
        "blockNumber": 28420243,
        "transactionHash": "0xc7ab9570887d5168a98ce936b317b06b3e02c2d3b490da6df9427e49daa25c7a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000533f9d586abd3334a0e90ca162602d6574f0493",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000021938ae9d86db70000000000000000000000000000000000000000000000000986fc4a27942e6000000000000000000000000000000000000000000000098b05d1b2e33c2fa614000000000000000000000000000000000000000000000000096568bf3dbbc0a900000000000000000000000000000000000000000000098b05f3466e260813cb",
        "logIndex": 102,
        "blockHash": "0x5475dbc7bab1fda2a95640c413c02504c4dabe092f9baf6fc67d363193070120"
      }
    ],
    "blockNumber": 28420243,
    "cumulativeGasUsed": "7274764",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "715002c95ee264b76bfea230df9b4146",
  "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODIFY_QUORUM_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"},{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getVoterState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"getVote\",\"outputs\":[{\"name\":\"open\",\"type\":\"bool\"},{\"name\":\"executed\",\"type\":\"bool\"},{\"name\":\"startDate\",\"type\":\"uint64\"},{\"name\":\"snapshotBlock\",\"type\":\"uint64\"},{\"name\":\"supportRequired\",\"type\":\"uint64\"},{\"name\":\"minAcceptQuorum\",\"type\":\"uint64\"},{\"name\":\"yea\",\"type\":\"uint256\"},{\"name\":\"nay\",\"type\":\"uint256\"},{\"name\":\"votingPower\",\"type\":\"uint256\"},{\"name\":\"script\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minAcceptQuorumPct\",\"type\":\"uint64\"}],\"name\":\"changeMinAcceptQuorumPct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODIFY_SUPPORT_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_supportRequiredPct\",\"type\":\"uint64\"}],\"name\":\"changeSupportRequiredPct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voteTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CREATE_VOTES_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"canForward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"canExecute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"},{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"canVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_executionScript\",\"type\":\"bytes\"},{\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"newVote\",\"outputs\":[{\"name\":\"voteId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evmScript\",\"type\":\"bytes\"}],\"name\":\"forward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAcceptQuorumPct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"},{\"name\":\"_supports\",\"type\":\"bool\"},{\"name\":\"_executesIfDecided\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_supportRequiredPct\",\"type\":\"uint64\"},{\"name\":\"_minAcceptQuorumPct\",\"type\":\"uint64\"},{\"name\":\"_voteTime\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_executionScript\",\"type\":\"bytes\"},{\"name\":\"_metadata\",\"type\":\"string\"},{\"name\":\"_castVote\",\"type\":\"bool\"},{\"name\":\"_executesIfDecided\",\"type\":\"bool\"}],\"name\":\"newVote\",\"outputs\":[{\"name\":\"voteId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"executeVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportRequiredPct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PCT_BASE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isForwarder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"StartVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"supports\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"CastVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voteId\",\"type\":\"uint256\"}],\"name\":\"ExecuteVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"supportRequiredPct\",\"type\":\"uint64\"}],\"name\":\"ChangeSupportRequired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minAcceptQuorumPct\",\"type\":\"uint64\"}],\"name\":\"ChangeMinQuorum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowRecoverability(address)\":{\"details\":\"By default deriving from AragonApp makes it recoverable\",\"params\":{\"token\":\"Token address that would be recovered\"},\"return\":\"bool whether the app allows the recovery\"},\"canExecute(uint256)\":{\"details\":\"Initialization check is implicitly provided by `voteExists()` as new votes can only be     created via `newVote(),` which requires initialization\",\"return\":\"True if the given vote can be executed, false otherwise\"},\"canForward(address,bytes)\":{\"details\":\"IForwarder interface conformance\",\"params\":{\"_sender\":\"Address of the account intending to forward an action\"},\"return\":\"True if the given address can create votes, false otherwise\"},\"canPerform(address,bytes32,uint256[])\":{\"details\":\"Check whether an action can be performed by a sender for a particular role on this app\",\"params\":{\"_params\":\"Permission params for the role\",\"_role\":\"Role on this app\",\"_sender\":\"Sender of the call\"},\"return\":\"Boolean indicating whether the sender has the permissions to perform the action.        Always returns false if the app hasn't been initialized yet.\"},\"canVote(uint256,address)\":{\"details\":\"Initialization check is implicitly provided by `voteExists()` as new votes can only be     created via `newVote(),` which requires initialization\",\"return\":\"True if the given voter can participate a certain vote, false otherwise\"},\"changeMinAcceptQuorumPct(uint64)\":{\"params\":{\"_minAcceptQuorumPct\":\"New acceptance quorum\"}},\"changeSupportRequiredPct(uint64)\":{\"params\":{\"_supportRequiredPct\":\"New required support\"}},\"executeVote(uint256)\":{\"details\":\"Initialization check is implicitly provided by `voteExists()` as new votes can only be     created via `newVote(),` which requires initialization\",\"params\":{\"_voteId\":\"Id for vote\"}},\"forward(bytes)\":{\"details\":\"IForwarder interface conformance\",\"params\":{\"_evmScript\":\"Start vote with script\"}},\"getInitializationBlock()\":{\"return\":\"Block number in which the contract was initialized\"},\"getRecoveryVault()\":{\"details\":\"Get the recovery vault for the app\",\"return\":\"Recovery vault address for the app\"},\"getVote(uint256)\":{\"details\":\"Return all information for a vote by its ID\",\"params\":{\"_voteId\":\"Vote identifier\"},\"return\":\"Vote open statusVote executed statusVote start dateVote snapshot blockVote support requiredVote minimum acceptance quorumVote yeas amountVote nays amountVote powerVote script\"},\"getVoterState(uint256,address)\":{\"details\":\"Return the state of a voter for a given vote by its ID\",\"params\":{\"_voteId\":\"Vote identifier\"},\"return\":\"VoterState of the requested voter for a certain vote\"},\"hasInitialized()\":{\"return\":\"Whether the contract has been initialized by the time of the current block\"},\"initialize(address,uint64,uint64,uint64)\":{\"params\":{\"_minAcceptQuorumPct\":\"Percentage of yeas in total possible votes for a vote to succeed (expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%)\",\"_supportRequiredPct\":\"Percentage of yeas in casted votes for a vote to succeed (expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%)\",\"_token\":\"IVotingToken Address that will be used as governance token\",\"_voteTime\":\"Seconds that a vote will be open for token holders to vote (unless enough yeas or nays have been cast to make an early decision)\"}},\"isForwarder()\":{\"details\":\"IForwarder interface conformance\",\"return\":\"Always true\"},\"newVote(bytes,string)\":{\"params\":{\"_executionScript\":\"EVM script to be executed on approval\",\"_metadata\":\"Vote metadata\"},\"return\":\"voteId Id for newly created vote\"},\"newVote(bytes,string,bool,bool)\":{\"params\":{\"_castVote\":\"Whether to also cast newly created vote\",\"_executesIfDecided\":\"Whether to also immediately execute newly created vote if decided\",\"_executionScript\":\"EVM script to be executed on approval\",\"_metadata\":\"Vote metadata\"},\"return\":\"voteId id for newly created vote\"},\"transferToVault(address)\":{\"params\":{\"_token\":\"Token balance to be sent to recovery vault.\"}},\"vote(uint256,bool,bool)\":{\"details\":\"Initialization check is implicitly provided by `voteExists()` as new votes can only be     created via `newVote(),` which requires initialization\",\"params\":{\"_executesIfDecided\":\"Whether the vote should execute its action if it becomes decided\",\"_supports\":\"Whether voter supports the vote\",\"_voteId\":\"Id for vote\"}}}},\"userdoc\":{\"methods\":{\"canExecute(uint256)\":{\"notice\":\"Tells whether a vote #`_voteId` can be executed or not\"},\"canForward(address,bytes)\":{\"notice\":\"Tells whether `_sender` can forward actions or not\"},\"canVote(uint256,address)\":{\"notice\":\"Tells whether `_sender` can participate in the vote #`_voteId` or not\"},\"changeMinAcceptQuorumPct(uint64)\":{\"notice\":\"Change minimum acceptance quorum to `@formatPct(_minAcceptQuorumPct)`%\"},\"changeSupportRequiredPct(uint64)\":{\"notice\":\"Change required support to `@formatPct(_supportRequiredPct)`%\"},\"executeVote(uint256)\":{\"notice\":\"Execute vote #`_voteId`\"},\"forward(bytes)\":{\"notice\":\"Creates a vote to execute the desired action, and casts a support vote if possible\"},\"initialize(address,uint64,uint64,uint64)\":{\"notice\":\"Initialize Voting app with `_token.symbol(): string` for governance, minimum support of `@formatPct(_supportRequiredPct)`%, minimum acceptance quorum of `@formatPct(_minAcceptQuorumPct)`%, and a voting duration of `@transformTime(_voteTime)`\"},\"isForwarder()\":{\"notice\":\"Tells whether the Voting app is a forwarder or not\"},\"newVote(bytes,string)\":{\"notice\":\"Create a new vote about \\\"`_metadata`\\\"\"},\"newVote(bytes,string,bool,bool)\":{\"notice\":\"Create a new vote about \\\"`_metadata`\\\"\"},\"transferToVault(address)\":{\"notice\":\"Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them.\"},\"vote(uint256,bool,bool)\":{\"notice\":\"Vote `_supports ? 'yes' : 'no'` in vote #`_voteId`\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/apps/DBVoting.sol\":\"DBVoting\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[]) {\\n        return new uint256[](0);\\n    }\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c, _d);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\",\"keccak256\":\"0x672a96975fc17f66905e775645cc93249426ce9601aef597a13d1e449c7f89d0\"},\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0x7e081f42891bbcc8fa9f3a67efb34ecafa8e2c075e37a01d74d221c45ddfdd10\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_POSITION = keccak256(\\\"aragonOS.appStorage.kernel\\\");\\n    bytes32 internal constant APP_ID_POSITION = keccak256(\\\"aragonOS.appStorage.appId\\\");\\n    */\\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\\n\\n    function kernel() public view returns (IKernel) {\\n        return IKernel(KERNEL_POSITION.getStorageAddress());\\n    }\\n\\n    function appId() public view returns (bytes32) {\\n        return APP_ID_POSITION.getStorageBytes32();\\n    }\\n\\n    function setKernel(IKernel _kernel) internal {\\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\\n    }\\n\\n    function setAppId(bytes32 _appId) internal {\\n        APP_ID_POSITION.setStorageBytes32(_appId);\\n    }\\n}\\n\",\"keccak256\":\"0x37324058906601970b1ef5cbe8f2af93144d3b723c2a33e468142cdc753c829b\"},\"@aragon/os/contracts/apps/AragonApp.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\nimport \\\"../common/Autopetrified.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/ReentrancyGuard.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../evmscript/EVMScriptRunner.sol\\\";\\n\\n\\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\\n// that they can never be initialized.\\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\\n// are included so that they are automatically usable by subclassing contracts\\ncontract AragonApp is AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\\n    string private constant ERROR_AUTH_FAILED = \\\"APP_AUTH_FAILED\\\";\\n\\n    modifier auth(bytes32 _role) {\\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    modifier authP(bytes32 _role, uint256[] _params) {\\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\\n    * @param _sender Sender of the call\\n    * @param _role Role on this app\\n    * @param _params Permission params for the role\\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\\n    *         Always returns false if the app hasn't been initialized yet.\\n    */\\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\\n        if (!hasInitialized()) {\\n            return false;\\n        }\\n\\n        IKernel linkedKernel = kernel();\\n        if (address(linkedKernel) == address(0)) {\\n            return false;\\n        }\\n\\n        return linkedKernel.hasPermission(\\n            _sender,\\n            address(this),\\n            _role,\\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\\n        );\\n    }\\n\\n    /**\\n    * @dev Get the recovery vault for the app\\n    * @return Recovery vault address for the app\\n    */\\n    function getRecoveryVault() public view returns (address) {\\n        // Funds recovery via a vault is only available when used with a kernel\\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\\n    }\\n}\\n\",\"keccak256\":\"0x342fa7437cb3e80ea702209cc90787b27d21a7d4bf101e313534c9da2a2f7875\"},\"@aragon/os/contracts/common/Autopetrified.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Petrifiable.sol\\\";\\n\\n\\ncontract Autopetrified is Petrifiable {\\n    constructor() public {\\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\\n        // This renders them uninitializable (and unusable without a proxy).\\n        petrify();\\n    }\\n}\\n\",\"keccak256\":\"0x42f0422744e13674e38bfbef079af7150883aba96ddbe61c5ae50df31d42696e\"},\"@aragon/os/contracts/common/ConversionHelpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary ConversionHelpers {\\n    string private constant ERROR_IMPROPER_LENGTH = \\\"CONVERSION_IMPROPER_LENGTH\\\";\\n\\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\\n        // Force cast the uint256[] into a bytes array, by overwriting its length\\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 byteLength = _input.length * 32;\\n        assembly {\\n            output := _input\\n            mstore(output, byteLength)\\n        }\\n    }\\n\\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\\n        // Force cast the bytes array into a uint256[], by overwriting its length\\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 intsLength = _input.length / 32;\\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\\n\\n        assembly {\\n            output := _input\\n            mstore(output, intsLength)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9872383d458352f5c68fa5afd1fc84ab6b172cbee33359cfa57655b8eda92416\"},\"@aragon/os/contracts/common/EtherTokenConstant.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address internal constant ETH = address(0);\\n}\\n\",\"keccak256\":\"0x6b2fa091968161075154a77fa741a3484c891d73cd3cd14ede502ff56dd08dfc\"},\"@aragon/os/contracts/common/IForwarder.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IForwarder {\\n    function isForwarder() external pure returns (bool);\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function canForward(address sender, bytes evmCallScript) public view returns (bool);\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function forward(bytes evmCallScript) public;\\n}\\n\",\"keccak256\":\"0x3dcf53bc3021c65b14d5af9f681b4bed524dd1c70a7d39add82166a94981f297\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IVaultRecoverable {\\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\\n\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) external view returns (bool);\\n    function getRecoveryVault() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa8e004decf086e817a864b485473b687c2c468c82af7b5011d9908586f7cbf36\"},\"@aragon/os/contracts/common/Initializable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./TimeHelpers.sol\\\";\\nimport \\\"./UnstructuredStorage.sol\\\";\\n\\n\\ncontract Initializable is TimeHelpers {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.initializable.initializationBlock\\\")\\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\\n\\n    string private constant ERROR_ALREADY_INITIALIZED = \\\"INIT_ALREADY_INITIALIZED\\\";\\n    string private constant ERROR_NOT_INITIALIZED = \\\"INIT_NOT_INITIALIZED\\\";\\n\\n    modifier onlyInit {\\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n    * @return Whether the contract has been initialized by the time of the current block\\n    */\\n    function hasInitialized() public view returns (bool) {\\n        uint256 initializationBlock = getInitializationBlock();\\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization to enable the contract\\n    *      at a future block number rather than immediately.\\n    */\\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xc859366d3143499d1458ea55cb5374ae1ca1faf41763cad5e051dea2da373ba1\"},\"@aragon/os/contracts/common/IsContract.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract IsContract {\\n    /*\\n    * NOTE: this should NEVER be used for authentication\\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\\n    *\\n    * This is only intended to be used as a sanity check that an address is actually a contract,\\n    * RATHER THAN an address not being a contract.\\n    */\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x9dd99d770a5eed901ba749e1f02e4fae443e71e899f4909f56825dfc378da089\"},\"@aragon/os/contracts/common/Petrifiable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\n\\ncontract Petrifiable is Initializable {\\n    // Use block UINT256_MAX (which should be never) as the initializable date\\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\\n\\n    function isPetrified() public view returns (bool) {\\n        return getInitializationBlock() == PETRIFIED_BLOCK;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract to prevent being initialized.\\n    *      Useful for freezing base contracts when they're used behind proxies.\\n    */\\n    function petrify() internal onlyInit {\\n        initializedAt(PETRIFIED_BLOCK);\\n    }\\n}\\n\",\"keccak256\":\"0x797d3a58b782032f6afc51725326c0b51dceb00f3af6b85b25bd91cc10d22504\"},\"@aragon/os/contracts/common/ReentrancyGuard.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\n\\n\\ncontract ReentrancyGuard {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\\\"aragonOS.reentrancyGuard.mutex\\\");\\n    */\\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\\n\\n    string private constant ERROR_REENTRANT = \\\"REENTRANCY_REENTRANT_CALL\\\";\\n\\n    modifier nonReentrant() {\\n        // Ensure mutex is unlocked\\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\\n\\n        // Lock mutex before function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\\n\\n        // Perform function call\\n        _;\\n\\n        // Unlock mutex after function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\\n    }\\n}\\n\",\"keccak256\":\"0xd89653c118bbd8cace423c45daa37986c566672198a415254011c028d1831189\"},\"@aragon/os/contracts/common/SafeERC20.sol\":{\"content\":\"// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\n\\n\\nlibrary SafeERC20 {\\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\\n    // https://github.com/ethereum/solidity/issues/3544\\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\\n\\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \\\"SAFE_ERC_20_BALANCE_REVERTED\\\";\\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \\\"SAFE_ERC_20_ALLOWANCE_REVERTED\\\";\\n\\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\\n        private\\n        returns (bool)\\n    {\\n        bool ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            let success := call(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                0,                    // no value\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                // Check number of bytes returned from last function call\\n                switch returndatasize\\n\\n                // No bytes returned: assume success\\n                case 0 {\\n                    ret := 1\\n                }\\n\\n                // 32 bytes returned: check if non-zero\\n                case 0x20 {\\n                    // Only return success if returned data was true\\n                    // Already have output in ptr\\n                    ret := eq(mload(ptr), 1)\\n                }\\n\\n                // Not sure what was returned: don't mark as success\\n                default { }\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    function staticInvoke(address _addr, bytes memory _calldata)\\n        private\\n        view\\n        returns (bool, uint256)\\n    {\\n        bool success;\\n        uint256 ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            success := staticcall(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                ret := mload(ptr)\\n            }\\n        }\\n        return (success, ret);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferCallData = abi.encodeWithSelector(\\n            TRANSFER_SELECTOR,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferFromCallData = abi.encodeWithSelector(\\n            _token.transferFrom.selector,\\n            _from,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferFromCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\\n        bytes memory approveCallData = abi.encodeWithSelector(\\n            _token.approve.selector,\\n            _spender,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, approveCallData);\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.balanceOf().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\\n            _token.balanceOf.selector,\\n            _owner\\n        );\\n\\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\\n\\n        return tokenBalance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.allowance().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\\n        bytes memory allowanceCallData = abi.encodeWithSelector(\\n            _token.allowance.selector,\\n            _owner,\\n            _spender\\n        );\\n\\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return allowance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.totalSupply().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticTotalSupply(ERC20 _token) internal view returns (uint256) {\\n        bytes memory totalSupplyCallData = abi.encodeWithSelector(_token.totalSupply.selector);\\n\\n        (bool success, uint256 totalSupply) = staticInvoke(_token, totalSupplyCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return totalSupply;\\n    }\\n}\\n\",\"keccak256\":\"0xd251a1207e1faa4c41500bf927310bb739b1fbc0bf880f236f8e0a9236d6a03a\"},\"@aragon/os/contracts/common/TimeHelpers.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Uint256Helpers.sol\\\";\\n\\n\\ncontract TimeHelpers {\\n    using Uint256Helpers for uint256;\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n    * @dev Returns the current block number, converted to uint64.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber64() internal view returns (uint64) {\\n        return getBlockNumber().toUint64();\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp() internal view returns (uint256) {\\n        return block.timestamp; // solium-disable-line security/no-block-members\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp, converted to uint64.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp64() internal view returns (uint64) {\\n        return getTimestamp().toUint64();\\n    }\\n}\\n\",\"keccak256\":\"0xfaba85207f0bb4bb5d7b6685a963c39a3258641bda6e523175640c3f9aeb2045\"},\"@aragon/os/contracts/common/Uint256Helpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary Uint256Helpers {\\n    uint256 private constant MAX_UINT64 = uint64(-1);\\n\\n    string private constant ERROR_NUMBER_TOO_BIG = \\\"UINT64_NUMBER_TOO_BIG\\\";\\n\\n    function toUint64(uint256 a) internal pure returns (uint64) {\\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\\n        return uint64(a);\\n    }\\n}\\n\",\"keccak256\":\"0x83033025a3f4402be3b7bcc9a23ce96ae4fadc7f251da8f139d73a13a3400b0c\"},\"@aragon/os/contracts/common/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n}\\n\",\"keccak256\":\"0xe497dcb85bbbf10224623247f39a4aeed7d3b230de2a811f3b69cb0e7d0a64d4\"},\"@aragon/os/contracts/common/VaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\nimport \\\"./EtherTokenConstant.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\nimport \\\"./IVaultRecoverable.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\n\\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\\n    using SafeERC20 for ERC20;\\n\\n    string private constant ERROR_DISALLOWED = \\\"RECOVER_DISALLOWED\\\";\\n    string private constant ERROR_VAULT_NOT_CONTRACT = \\\"RECOVER_VAULT_NOT_CONTRACT\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \\\"RECOVER_TOKEN_TRANSFER_FAILED\\\";\\n\\n    /**\\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\\n     *         but in case it does, this function allows one to recover them.\\n     * @param _token Token balance to be sent to recovery vault.\\n     */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\\n        address vault = getRecoveryVault();\\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\\n\\n        uint256 balance;\\n        if (_token == ETH) {\\n            balance = address(this).balance;\\n            vault.transfer(balance);\\n        } else {\\n            ERC20 token = ERC20(_token);\\n            balance = token.staticBalanceOf(this);\\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\\n        }\\n\\n        emit RecoverToVault(vault, _token, balance);\\n    }\\n\\n    /**\\n    * @dev By default deriving from AragonApp makes it recoverable\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return true;\\n    }\\n\\n    // Cast non-implemented interface to be public so we can use it internally\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0xea4ded621a63f988b83ac27b4a23cad0a42c3d77bcf6ca7b88681ae4ea650cf4\"},\"@aragon/os/contracts/evmscript/EVMScriptRunner.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\nimport \\\"../kernel/KernelConstants.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\n\\n\\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \\\"EVMRUN_EXECUTOR_UNAVAILABLE\\\";\\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \\\"EVMRUN_PROTECTED_STATE_MODIFIED\\\";\\n\\n    /* This is manually crafted in assembly\\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\";\\n    */\\n\\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\\n\\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\\n    }\\n\\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n        return IEVMScriptRegistry(registryAddr);\\n    }\\n\\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\\n        internal\\n        isInitialized\\n        protectState\\n        returns (bytes)\\n    {\\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\\n\\n        bytes4 sig = executor.execScript.selector;\\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\\n\\n        bytes memory output;\\n        assembly {\\n            let success := delegatecall(\\n                gas,                // forward all gas\\n                executor,           // address\\n                add(data, 0x20),    // calldata start\\n                mload(data),        // calldata length\\n                0,                  // don't write output (we'll handle this ourselves)\\n                0                   // don't write output\\n            )\\n\\n            output := mload(0x40) // free mem ptr get\\n\\n            switch success\\n            case 0 {\\n                // If the call errored, forward its full error data\\n                returndatacopy(output, 0, returndatasize)\\n                revert(output, returndatasize)\\n            }\\n            default {\\n                switch gt(returndatasize, 0x3f)\\n                case 0 {\\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\\n                    // revert with \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\"\\n                    // See remix: doing a `revert(\\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\")` always results in\\n                    // this memory layout\\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\\n\\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\\n                }\\n                default {\\n                    // Copy result\\n                    //\\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\\n                    //    [ output length (32 bytes) ]\\n                    //    [ output content (N bytes) ]\\n                    //\\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\\n                    let copysize := sub(returndatasize, 0x20)\\n                    returndatacopy(output, 0x20, copysize)\\n\\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\\n                }\\n            }\\n        }\\n\\n        emit ScriptResult(address(executor), _script, _input, output);\\n\\n        return output;\\n    }\\n\\n    modifier protectState {\\n        address preKernel = address(kernel());\\n        bytes32 preAppId = appId();\\n        _; // exec\\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\\n    }\\n}\\n\",\"keccak256\":\"0xf8b4ccf7ee558224c155604a4a0b5cc35715367cda5010fb38e21d63ec5236c9\"},\"@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IEVMScriptExecutor {\\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\\n    function executorType() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x76ad18a278e36e14147f5b58a1157de67ce95f28813f3e1eacfedaaf53dd33b9\"},\"@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    */\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\\n}\\n\",\"keccak256\":\"0x66b255ac1537765d6e79cc0ed02df004e7bf214863773901e207baafd59dc2ce\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\ninterface IKernelEvents {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\\n}\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IKernelEvents, IVaultRecoverable {\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\\n}\\n\",\"keccak256\":\"0x96e9fd607b156a96905ec0108bb4fbcc5ad85212bb98e03600069bb5727d2daa\"},\"@aragon/os/contracts/kernel/KernelConstants.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract KernelAppIds {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\\\"kernel\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\\\"acl\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\\\"vault\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\\n}\\n\\n\\ncontract KernelNamespaceConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\\\"core\\\");\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\\\"base\\\");\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n}\\n\",\"keccak256\":\"0x817f66cfc7bfafd19a4e6b1344850c5f7b72e39a1073fe862efebe608a07c0d3\"},\"@aragon/os/contracts/lib/math/SafeMath.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\\n// Adapted to use pragma ^0.4.24 and satisfy our linter rules\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (_a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = _a * _b;\\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint256 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint256 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        uint256 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x2e11c8dcead82c452ef452f4dbced40e20ae105fa4145d920dac6e077b31d846\"},\"@aragon/os/contracts/lib/math/SafeMath64.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\\n// Adapted for uint64, pragma ^0.4.24, and satisfying our linter rules\\n// Also optimized the mul() implementation, see https://github.com/aragon/aragonOS/pull/417\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath64\\n * @dev Math operations for uint64 with safety checks that revert on error\\n */\\nlibrary SafeMath64 {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH64_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH64_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH64_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH64_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        uint256 c = uint256(_a) * uint256(_b);\\n        require(c < 0x010000000000000000, ERROR_MUL_OVERFLOW); // 2**64 (less gas this way)\\n\\n        return uint64(c);\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint64 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint64 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        uint64 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x34f18573e7b2180645c67faaff60ebc713ab22c697606d3b3ce4fe0e745955f4\"},\"@aragon/os/contracts/lib/token/ERC20.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 {\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address _who) public view returns (uint256);\\n\\n    function allowance(address _owner, address _spender)\\n        public view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) public returns (bool);\\n\\n    function approve(address _spender, uint256 _value)\\n        public returns (bool);\\n\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        public returns (bool);\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0xa2e319fde92f9e70912f09bf6e99bbf8b9b798961d54ffcba59d347d37bde1b7\"},\"contracts/apps/DBVoting.sol\":{\"content\":\"// SPDX-License-Identitifer: GPL-3.0-or-later\\n\\npragma solidity 0.4.24;\\n\\nimport '@aragon/os/contracts/apps/AragonApp.sol';\\nimport '@aragon/os/contracts/common/IForwarder.sol';\\n\\nimport '@aragon/os/contracts/lib/math/SafeMath.sol';\\nimport '@aragon/os/contracts/lib/math/SafeMath64.sol';\\nimport '../interfaces/IVotingToken.sol';\\n\\ncontract DBVoting is IForwarder, AragonApp {\\n    using SafeMath for uint256;\\n    using SafeMath64 for uint64;\\n\\n    bytes32 public constant CREATE_VOTES_ROLE = keccak256('CREATE_VOTES_ROLE');\\n    bytes32 public constant MODIFY_SUPPORT_ROLE = keccak256('MODIFY_SUPPORT_ROLE');\\n    bytes32 public constant MODIFY_QUORUM_ROLE = keccak256('MODIFY_QUORUM_ROLE');\\n\\n    uint64 public constant PCT_BASE = 10**18; // 0% = 0; 1% = 10^16; 100% = 10^18\\n\\n    string private constant ERROR_NO_VOTE = 'VOTING_NO_VOTE';\\n    string private constant ERROR_INIT_PCTS = 'VOTING_INIT_PCTS';\\n    string private constant ERROR_CHANGE_SUPPORT_PCTS = 'VOTING_CHANGE_SUPPORT_PCTS';\\n    string private constant ERROR_CHANGE_QUORUM_PCTS = 'VOTING_CHANGE_QUORUM_PCTS';\\n    string private constant ERROR_INIT_SUPPORT_TOO_BIG = 'VOTING_INIT_SUPPORT_TOO_BIG';\\n    string private constant ERROR_CHANGE_SUPPORT_TOO_BIG = 'VOTING_CHANGE_SUPP_TOO_BIG';\\n    string private constant ERROR_CAN_NOT_VOTE = 'VOTING_CAN_NOT_VOTE';\\n    string private constant ERROR_CAN_NOT_EXECUTE = 'VOTING_CAN_NOT_EXECUTE';\\n    string private constant ERROR_CAN_NOT_FORWARD = 'VOTING_CAN_NOT_FORWARD';\\n    string private constant ERROR_NO_VOTING_POWER = 'VOTING_NO_VOTING_POWER';\\n\\n    enum VoterState {\\n        Absent,\\n        Yea,\\n        Nay\\n    }\\n\\n    struct Vote {\\n        bool executed;\\n        uint64 startDate;\\n        uint64 snapshotBlock;\\n        uint64 supportRequiredPct;\\n        uint64 minAcceptQuorumPct;\\n        uint256 yea;\\n        uint256 nay;\\n        uint256 votingPower;\\n        bytes executionScript;\\n        mapping(address => VoterState) voters;\\n    }\\n\\n    address public token;\\n    uint64 public supportRequiredPct;\\n    uint64 public minAcceptQuorumPct;\\n    uint64 public voteTime;\\n\\n    // We are mimicing an array, we use a mapping instead to make app upgrade more graceful\\n    mapping(uint256 => Vote) internal votes;\\n    uint256 public votesLength;\\n\\n    event StartVote(uint256 indexed voteId, address indexed creator, string metadata);\\n    event CastVote(uint256 indexed voteId, address indexed voter, bool supports, uint256 stake);\\n    event ExecuteVote(uint256 indexed voteId);\\n    event ChangeSupportRequired(uint64 supportRequiredPct);\\n    event ChangeMinQuorum(uint64 minAcceptQuorumPct);\\n\\n    modifier voteExists(uint256 _voteId) {\\n        require(_voteId < votesLength, ERROR_NO_VOTE);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize Voting app with `_token.symbol(): string` for governance, minimum support of `@formatPct(_supportRequiredPct)`%, minimum acceptance quorum of `@formatPct(_minAcceptQuorumPct)`%, and a voting duration of `@transformTime(_voteTime)`\\n     * @param _token IVotingToken Address that will be used as governance token\\n     * @param _supportRequiredPct Percentage of yeas in casted votes for a vote to succeed (expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%)\\n     * @param _minAcceptQuorumPct Percentage of yeas in total possible votes for a vote to succeed (expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%)\\n     * @param _voteTime Seconds that a vote will be open for token holders to vote (unless enough yeas or nays have been cast to make an early decision)\\n     */\\n    function initialize(\\n        address _token,\\n        uint64 _supportRequiredPct,\\n        uint64 _minAcceptQuorumPct,\\n        uint64 _voteTime\\n    ) external onlyInit {\\n        initialized();\\n\\n        require(_minAcceptQuorumPct <= _supportRequiredPct, ERROR_INIT_PCTS);\\n        require(_supportRequiredPct < PCT_BASE, ERROR_INIT_SUPPORT_TOO_BIG);\\n\\n        token = _token;\\n        supportRequiredPct = _supportRequiredPct;\\n        minAcceptQuorumPct = _minAcceptQuorumPct;\\n        voteTime = _voteTime;\\n    }\\n\\n    /**\\n     * @notice Change required support to `@formatPct(_supportRequiredPct)`%\\n     * @param _supportRequiredPct New required support\\n     */\\n    function changeSupportRequiredPct(uint64 _supportRequiredPct)\\n        external\\n        authP(MODIFY_SUPPORT_ROLE, arr(uint256(_supportRequiredPct), uint256(supportRequiredPct)))\\n    {\\n        require(minAcceptQuorumPct <= _supportRequiredPct, ERROR_CHANGE_SUPPORT_PCTS);\\n        require(_supportRequiredPct < PCT_BASE, ERROR_CHANGE_SUPPORT_TOO_BIG);\\n        supportRequiredPct = _supportRequiredPct;\\n\\n        emit ChangeSupportRequired(_supportRequiredPct);\\n    }\\n\\n    /**\\n     * @notice Change minimum acceptance quorum to `@formatPct(_minAcceptQuorumPct)`%\\n     * @param _minAcceptQuorumPct New acceptance quorum\\n     */\\n    function changeMinAcceptQuorumPct(uint64 _minAcceptQuorumPct)\\n        external\\n        authP(MODIFY_QUORUM_ROLE, arr(uint256(_minAcceptQuorumPct), uint256(minAcceptQuorumPct)))\\n    {\\n        require(_minAcceptQuorumPct <= supportRequiredPct, ERROR_CHANGE_QUORUM_PCTS);\\n        minAcceptQuorumPct = _minAcceptQuorumPct;\\n\\n        emit ChangeMinQuorum(_minAcceptQuorumPct);\\n    }\\n\\n    /**\\n     * @notice Create a new vote about \\\"`_metadata`\\\"\\n     * @param _executionScript EVM script to be executed on approval\\n     * @param _metadata Vote metadata\\n     * @return voteId Id for newly created vote\\n     */\\n    function newVote(bytes _executionScript, string _metadata)\\n        external\\n        auth(CREATE_VOTES_ROLE)\\n        returns (uint256 voteId)\\n    {\\n        return _newVote(_executionScript, _metadata, true, true);\\n    }\\n\\n    /**\\n     * @notice Create a new vote about \\\"`_metadata`\\\"\\n     * @param _executionScript EVM script to be executed on approval\\n     * @param _metadata Vote metadata\\n     * @param _castVote Whether to also cast newly created vote\\n     * @param _executesIfDecided Whether to also immediately execute newly created vote if decided\\n     * @return voteId id for newly created vote\\n     */\\n    function newVote(\\n        bytes _executionScript,\\n        string _metadata,\\n        bool _castVote,\\n        bool _executesIfDecided\\n    ) external auth(CREATE_VOTES_ROLE) returns (uint256 voteId) {\\n        return _newVote(_executionScript, _metadata, _castVote, _executesIfDecided);\\n    }\\n\\n    /**\\n     * @notice Vote `_supports ? 'yes' : 'no'` in vote #`_voteId`\\n     * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\\n     *      created via `newVote(),` which requires initialization\\n     * @param _voteId Id for vote\\n     * @param _supports Whether voter supports the vote\\n     * @param _executesIfDecided Whether the vote should execute its action if it becomes decided\\n     */\\n    function vote(\\n        uint256 _voteId,\\n        bool _supports,\\n        bool _executesIfDecided\\n    ) external voteExists(_voteId) {\\n        require(_canVote(_voteId, msg.sender), ERROR_CAN_NOT_VOTE);\\n        _vote(_voteId, _supports, msg.sender, _executesIfDecided);\\n    }\\n\\n    /**\\n     * @notice Execute vote #`_voteId`\\n     * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\\n     *      created via `newVote(),` which requires initialization\\n     * @param _voteId Id for vote\\n     */\\n    function executeVote(uint256 _voteId) external voteExists(_voteId) {\\n        _executeVote(_voteId);\\n    }\\n\\n    // Forwarding fns\\n\\n    /**\\n     * @notice Tells whether the Voting app is a forwarder or not\\n     * @dev IForwarder interface conformance\\n     * @return Always true\\n     */\\n    function isForwarder() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Creates a vote to execute the desired action, and casts a support vote if possible\\n     * @dev IForwarder interface conformance\\n     * @param _evmScript Start vote with script\\n     */\\n    function forward(bytes _evmScript) public {\\n        require(canPerform(msg.sender, CREATE_VOTES_ROLE, arr()), ERROR_CAN_NOT_FORWARD);\\n        _newVote(_evmScript, '', true, true);\\n    }\\n\\n    /**\\n     * @notice Tells whether `_sender` can forward actions or not\\n     * @dev IForwarder interface conformance\\n     * @param _sender Address of the account intending to forward an action\\n     * @return True if the given address can create votes, false otherwise\\n     */\\n    function canForward(address _sender, bytes) public view returns (bool) {\\n        // Note that `canPerform()` implicitly does an initialization check itself\\n        return canPerform(_sender, CREATE_VOTES_ROLE, arr());\\n    }\\n\\n    // Getter fns\\n\\n    /**\\n     * @notice Tells whether a vote #`_voteId` can be executed or not\\n     * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\\n     *      created via `newVote(),` which requires initialization\\n     * @return True if the given vote can be executed, false otherwise\\n     */\\n    function canExecute(uint256 _voteId) public view voteExists(_voteId) returns (bool) {\\n        return _canExecute(_voteId);\\n    }\\n\\n    /**\\n     * @notice Tells whether `_sender` can participate in the vote #`_voteId` or not\\n     * @dev Initialization check is implicitly provided by `voteExists()` as new votes can only be\\n     *      created via `newVote(),` which requires initialization\\n     * @return True if the given voter can participate a certain vote, false otherwise\\n     */\\n    function canVote(uint256 _voteId, address _voter) public view voteExists(_voteId) returns (bool) {\\n        return _canVote(_voteId, _voter);\\n    }\\n\\n    /**\\n     * @dev Return all information for a vote by its ID\\n     * @param _voteId Vote identifier\\n     * @return Vote open status\\n     * @return Vote executed status\\n     * @return Vote start date\\n     * @return Vote snapshot block\\n     * @return Vote support required\\n     * @return Vote minimum acceptance quorum\\n     * @return Vote yeas amount\\n     * @return Vote nays amount\\n     * @return Vote power\\n     * @return Vote script\\n     */\\n    function getVote(uint256 _voteId)\\n        public\\n        view\\n        voteExists(_voteId)\\n        returns (\\n            bool open,\\n            bool executed,\\n            uint64 startDate,\\n            uint64 snapshotBlock,\\n            uint64 supportRequired,\\n            uint64 minAcceptQuorum,\\n            uint256 yea,\\n            uint256 nay,\\n            uint256 votingPower,\\n            bytes script\\n        )\\n    {\\n        Vote storage vote_ = votes[_voteId];\\n\\n        open = _isVoteOpen(vote_);\\n        executed = vote_.executed;\\n        startDate = vote_.startDate;\\n        snapshotBlock = vote_.snapshotBlock;\\n        supportRequired = vote_.supportRequiredPct;\\n        minAcceptQuorum = vote_.minAcceptQuorumPct;\\n        yea = vote_.yea;\\n        nay = vote_.nay;\\n        votingPower = vote_.votingPower;\\n        script = vote_.executionScript;\\n    }\\n\\n    /**\\n     * @dev Return the state of a voter for a given vote by its ID\\n     * @param _voteId Vote identifier\\n     * @return VoterState of the requested voter for a certain vote\\n     */\\n    function getVoterState(uint256 _voteId, address _voter) public view voteExists(_voteId) returns (VoterState) {\\n        return votes[_voteId].voters[_voter];\\n    }\\n\\n    // Internal fns\\n\\n    /**\\n     * @dev Internal function to create a new vote\\n     * @return voteId id for newly created vote\\n     */\\n    function _newVote(\\n        bytes _executionScript,\\n        string _metadata,\\n        bool _castVote,\\n        bool _executesIfDecided\\n    ) internal returns (uint256 voteId) {\\n        uint64 snapshotBlock = getBlockNumber64() - 1; // avoid double voting in this very block\\n        uint256 votingPower = IVotingToken(token).getDelegatedSupplyByBlockNumber(snapshotBlock);\\n        require(votingPower > 0, ERROR_NO_VOTING_POWER);\\n\\n        voteId = votesLength++;\\n\\n        Vote storage vote_ = votes[voteId];\\n        vote_.startDate = getTimestamp64();\\n        vote_.snapshotBlock = snapshotBlock;\\n        vote_.supportRequiredPct = supportRequiredPct;\\n        vote_.minAcceptQuorumPct = minAcceptQuorumPct;\\n        vote_.votingPower = votingPower;\\n        vote_.executionScript = _executionScript;\\n\\n        emit StartVote(voteId, msg.sender, _metadata);\\n\\n        if (_castVote && _canVote(voteId, msg.sender)) {\\n            _vote(voteId, true, msg.sender, _executesIfDecided);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to cast a vote. It assumes the queried vote exists.\\n     */\\n    function _vote(\\n        uint256 _voteId,\\n        bool _supports,\\n        address _voter,\\n        bool _executesIfDecided\\n    ) internal {\\n        Vote storage vote_ = votes[_voteId];\\n\\n        // This could re-enter, though we can assume the governance token is not malicious\\n        uint256 voterStake = IVotingToken(token).getPowerByBlockNumber(_voter, vote_.snapshotBlock);\\n        VoterState state = vote_.voters[_voter];\\n\\n        // If voter had previously voted, decrease count\\n        if (state == VoterState.Yea) {\\n            vote_.yea = vote_.yea.sub(voterStake);\\n        } else if (state == VoterState.Nay) {\\n            vote_.nay = vote_.nay.sub(voterStake);\\n        }\\n\\n        if (_supports) {\\n            vote_.yea = vote_.yea.add(voterStake);\\n        } else {\\n            vote_.nay = vote_.nay.add(voterStake);\\n        }\\n\\n        vote_.voters[_voter] = _supports ? VoterState.Yea : VoterState.Nay;\\n\\n        emit CastVote(_voteId, _voter, _supports, voterStake);\\n\\n        if (_executesIfDecided && _canExecute(_voteId)) {\\n            // We've already checked if the vote can be executed with `_canExecute()`\\n            _unsafeExecuteVote(_voteId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to execute a vote. It assumes the queried vote exists.\\n     */\\n    function _executeVote(uint256 _voteId) internal {\\n        require(_canExecute(_voteId), ERROR_CAN_NOT_EXECUTE);\\n        _unsafeExecuteVote(_voteId);\\n    }\\n\\n    /**\\n     * @dev Unsafe version of _executeVote that assumes you have already checked if the vote can be executed and exists\\n     */\\n    function _unsafeExecuteVote(uint256 _voteId) internal {\\n        Vote storage vote_ = votes[_voteId];\\n\\n        vote_.executed = true;\\n\\n        bytes memory input = new bytes(0); // TODO: Consider input for voting scripts\\n        runScript(vote_.executionScript, input, new address[](0));\\n\\n        emit ExecuteVote(_voteId);\\n    }\\n\\n    /**\\n     * @dev Internal function to check if a vote can be executed. It assumes the queried vote exists.\\n     * @return True if the given vote can be executed, false otherwise\\n     */\\n    function _canExecute(uint256 _voteId) internal view returns (bool) {\\n        Vote storage vote_ = votes[_voteId];\\n\\n        if (vote_.executed) {\\n            return false;\\n        }\\n\\n        // Voting is already decided\\n        if (_isValuePct(vote_.yea, vote_.votingPower, vote_.supportRequiredPct)) {\\n            return true;\\n        }\\n\\n        // Vote ended?\\n        if (_isVoteOpen(vote_)) {\\n            return false;\\n        }\\n        // Has enough support?\\n        uint256 totalVotes = vote_.yea.add(vote_.nay);\\n        if (!_isValuePct(vote_.yea, totalVotes, vote_.supportRequiredPct)) {\\n            return false;\\n        }\\n        // Has min quorum?\\n        if (!_isValuePct(vote_.yea, vote_.votingPower, vote_.minAcceptQuorumPct)) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Internal function to check if a voter can participate on a vote. It assumes the queried vote exists.\\n     * @return True if the given voter can participate a certain vote, false otherwise\\n     */\\n    function _canVote(uint256 _voteId, address _voter) internal view returns (bool) {\\n        Vote storage vote_ = votes[_voteId];\\n        return _isVoteOpen(vote_) && IVotingToken(token).getPowerByBlockNumber(_voter, vote_.snapshotBlock) > 0;\\n    }\\n\\n    /**\\n     * @dev Internal function to check if a vote is still open\\n     * @return True if the given vote is open, false otherwise\\n     */\\n    function _isVoteOpen(Vote storage vote_) internal view returns (bool) {\\n        return getTimestamp64() < vote_.startDate.add(voteTime) && !vote_.executed;\\n    }\\n\\n    /**\\n     * @dev Calculates whether `_value` is more than a percentage `_pct` of `_total`\\n     */\\n    function _isValuePct(\\n        uint256 _value,\\n        uint256 _total,\\n        uint256 _pct\\n    ) internal pure returns (bool) {\\n        if (_total == 0) {\\n            return false;\\n        }\\n\\n        uint256 computedPct = _value.mul(PCT_BASE) / _total;\\n        return computedPct > _pct;\\n    }\\n}\\n\",\"keccak256\":\"0x99bfaffba1f1810b7e3f16eb4470ac3c0185df6e18afb3609ae6bf1e360d76ac\"},\"contracts/interfaces/IVotingToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.4.24;\\n\\n/**\\n * @title IVotingToken\\n * @author Lens Protocol\\n *\\n * @notice This is the interface for the FollowNFT *** this has been downgraded to 0.4.24 to fit Aragon Classic\\n */\\ninterface IVotingToken {\\n    /**\\n     * @notice Initializes the follow NFT, setting the hub as the privileged minter and storing the associated profile ID.\\n     *\\n     * @param profileId The token ID of the profile in the hub associated with this followNFT, used for transfer hooks.\\n     */\\n    function initialize(uint256 profileId) external;\\n\\n    /**\\n     * @notice Mints a follow NFT to the specified address. This can only be called by the hub, and is called\\n     * upon follow.\\n     *\\n     * @param to The address to mint the NFT to.\\n     *\\n     * @return uint256 An interger representing the minted token ID.\\n     */\\n    function mint(address to) external returns (uint256);\\n\\n    /**\\n     * @notice Delegates the caller's governance power to the given delegatee address.\\n     *\\n     * @param delegatee The delegatee address to delegate governance power to.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @notice Delegates the delegator's governance power via meta-tx to the given delegatee address.\\n     *\\n     * @param delegator The delegator address, who is the signer.\\n     * @param delegatee The delegatee address, who is receiving the governance power delegation.\\n     * @param sig The EIP712Signature struct containing the necessary parameters to recover the delegator's signature.\\n     */\\n    // function delegateBySig(\\n    //     address delegator,\\n    //     address delegatee,\\n    //     EIP712Signature sig\\n    // ) external;\\n\\n    /**\\n     * @notice Returns the governance power for a given user at a specified block number.\\n     *\\n     * @param user The user to query governance power for.\\n     * @param blockNumber The block number to query the user's governance power at.\\n     *\\n     * @return uint256 The power of the given user at the given block number.\\n     */\\n    function getPowerByBlockNumber(address user, uint256 blockNumber) external returns (uint256);\\n\\n    /**\\n     * @notice Returns the total delegated supply at a specified block number. This is the sum of all\\n     * current available voting power at a given block.\\n     *\\n     * @param blockNumber The block number to query the delegated supply at.\\n     *\\n     * @return uint256 The delegated supply at the given block number.\\n     */\\n    function getDelegatedSupplyByBlockNumber(uint256 blockNumber) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xfc65444b8e9cab24057f8be9a44600f694b130d6c7f8c0748b5050751f9001f9\"}},\"version\":1}",
  "bytecode": "0x6080604052620000176401000000006200001d810204565b6200023b565b6200003064010000000062000125810204565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a45440000000000000000602082015290156200010c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620000d0578181015183820152602001620000b6565b50505050905090810190601f168015620000fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506200012360001964010000000062000154810204565b565b60006200014f60008051602062004066833981519152640100000000620025366200023382021704565b905090565b6200016764010000000062000125810204565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a454400000000000000006020820152901562000206576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015620000d0578181015183820152602001620000b6565b50620002306000805160206200406683398151915282640100000000620035116200023782021704565b50565b5490565b9055565b613e1b806200024b6000396000f3006080604052600436106101ab5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630803fac081146101b05780632914b9bd146101d957806332f0a3b51461025b5780633c624c75146102705780634b12311c146102975780635a55c1f0146102ec5780635eb243321461041357806362de7e5a146104375780637c1d0b871461044c5780637e7db6e11461046e57806380afdea81461049c5780638b3dd749146104b15780639d4941d8146104c6578063a1658fad146104f4578063a479e50814610568578063bcf93dd61461057d578063be2c64d4146105af578063c0774df3146105c4578063cc63604a14610638578063cdb2867b14610650578063d4aae0c414610681578063d5db2c8014610696578063d948d468146106c2578063dc474b1a1461071b578063de4796ed14610730578063de4f634714610745578063df133bca1461075a578063df3d33051461077c578063f4b00513146107c3578063f98a4eca146107f9578063fad167ab14610811578063fc0c546a14610826578063fc157cb41461083b578063fd64eccb14610850575b600080fd5b3480156101bc57600080fd5b506101c5610865565b604080519115158252519081900360200190f35b3480156101e557600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261023294369492936024939284019190819084018382808284375094975061088f9650505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561026757600080fd5b5061023261099b565b34801561027c57600080fd5b50610285610a3a565b60408051918252519081900360200190f35b3480156102a357600080fd5b506102c860043573ffffffffffffffffffffffffffffffffffffffff60243516610a6f565b604051808260028111156102d857fe5b60ff16815260200191505060405180910390f35b3480156102f857600080fd5b50610304600435610b91565b604051808b1515151581526020018a1515151581526020018967ffffffffffffffff1667ffffffffffffffff1681526020018867ffffffffffffffff1667ffffffffffffffff1681526020018767ffffffffffffffff1667ffffffffffffffff1681526020018667ffffffffffffffff1667ffffffffffffffff16815260200185815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156103cf5781810151838201526020016103b7565b50505050905090810190601f1680156103fc5780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b34801561041f57600080fd5b5061043567ffffffffffffffff60043516610da7565b005b34801561044357600080fd5b50610285610fd3565b34801561045857600080fd5b5061043567ffffffffffffffff60043516611008565b34801561047a57600080fd5b506101c573ffffffffffffffffffffffffffffffffffffffff600435166112fd565b3480156104a857600080fd5b50610285611303565b3480156104bd57600080fd5b50610285611333565b3480156104d257600080fd5b5061043573ffffffffffffffffffffffffffffffffffffffff6004351661135e565b34801561050057600080fd5b5060408051602060046044358181013583810280860185019096528085526101c595833573ffffffffffffffffffffffffffffffffffffffff169560248035963696956064959394920192918291850190849080828437509497506116809650505050505050565b34801561057457600080fd5b50610232611810565b34801561058957600080fd5b506105926118d2565b6040805167ffffffffffffffff9092168252519081900360200190f35b3480156105bb57600080fd5b506102856118ee565b3480156105d057600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101c595833573ffffffffffffffffffffffffffffffffffffffff169536956044949193909101919081908401838280828437509497506119239650505050505050565b34801561064457600080fd5b506101c5600435611973565b34801561065c57600080fd5b506101c560043573ffffffffffffffffffffffffffffffffffffffff60243516611a2b565b34801561068d57600080fd5b50610232611ae3565b3480156106a257600080fd5b506102856024600480358281019290820135918135918201910135611b0e565b3480156106ce57600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610435943694929360249392840191908190840183828082843750949750611c719650505050505050565b34801561072757600080fd5b50610592611d70565b34801561073c57600080fd5b506101c5611d80565b34801561075157600080fd5b50610285611db1565b34801561076657600080fd5b5061043560043560243515156044351515611db7565b34801561078857600080fd5b5061043573ffffffffffffffffffffffffffffffffffffffff6004351667ffffffffffffffff60243581169060443581169060643516611f13565b3480156107cf57600080fd5b5061028560246004803582810192908201359181359182019101356044351515606435151561220e565b34801561080557600080fd5b50610435600435612370565b34801561081d57600080fd5b5061059261241b565b34801561083257600080fd5b50610232612443565b34801561084757600080fd5b5061059261245f565b34801561085c57600080fd5b506101c561246b565b600080610870611333565b90508015801590610888575080610885612470565b10155b91505b5090565b6000610899611810565b73ffffffffffffffffffffffffffffffffffffffff166304bf2a7f836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561091d578181015183820152602001610905565b50505050905090810190601f16801561094a5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561096957600080fd5b505af115801561097d573d6000803e3d6000fd5b505050506040513d602081101561099357600080fd5b505192915050565b60006109a5611ae3565b73ffffffffffffffffffffffffffffffffffffffff166332f0a3b56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610a0857600080fd5b505af1158015610a1c573d6000803e3d6000fd5b505050506040513d6020811015610a3257600080fd5b505190505b90565b604080517f4d4f444946595f51554f52554d5f524f4c4500000000000000000000000000008152905190819003601201902081565b60035460408051808201909152600e81527f564f54494e475f4e4f5f564f544500000000000000000000000000000000000060208201526000918491908210610b50576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b15578181015183820152602001610afd565b50505050905090810190601f168015610b425780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600084815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845260060190915290205460ff1691505b5092915050565b6000806000806000806000806000606060008b60035481106040805190810160405280600e81526020017f564f54494e475f4e4f5f564f5445000000000000000000000000000000000000815250901515610c48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b5060008d81526002602052604090209150610c6282612474565b9b508160000160009054906101000a900460ff169a508160000160019054906101000a900467ffffffffffffffff1699508160000160099054906101000a900467ffffffffffffffff1698508160000160119054906101000a900467ffffffffffffffff1697508160010160009054906101000a900467ffffffffffffffff169650816002015495508160030154945081600401549350816005018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d915780601f10610d6657610100808354040283529160200191610d91565b820191906000526020600020905b815481529060010190602001808311610d7457829003601f168201915b5050505050925050509193959799509193959799565b604080517f4d4f444946595f51554f52554d5f524f4c45000000000000000000000000000081529051908190036012019020600154610df39067ffffffffffffffff80851691166124db565b610dfe338383611680565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515610e9b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b5060005460408051808201909152601981527f564f54494e475f4348414e47455f51554f52554d5f504354530000000000000060208201529067ffffffffffffffff7401000000000000000000000000000000000000000090910481169085161115610f63576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b506001805467ffffffffffffffff85167fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000909116811790915560408051918252517f3172f2e9273c729c2a47cc8bf7e7f18506e3e3035126d562602bd2155bc78a509181900360200190a1505050565b604080517f4d4f444946595f535550504f52545f524f4c45000000000000000000000000008152905190819003601301902081565b604080517f4d4f444946595f535550504f52545f524f4c45000000000000000000000000008152905190819003601301902060005461106c9067ffffffffffffffff80851691740100000000000000000000000000000000000000009004166124db565b611077338383611680565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515611114576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b5060015460408051808201909152601a81527f564f54494e475f4348414e47455f535550504f52545f5043545300000000000060208201529067ffffffffffffffff808616911611156111c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b5060408051808201909152601a81527f564f54494e475f4348414e47455f535550505f544f4f5f4249470000000000006020820152670de0b6b3a764000067ffffffffffffffff851610611273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b506000805467ffffffffffffffff85167401000000000000000000000000000000000000000081027fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff9092169190911790915560408051918252517f903b617f7f36eb047a29b89d1bf7885fdae31d250c3320fccf11d045c11b396e9181900360200190a1505050565b50600190565b600061132e7fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b612536565b905090565b600061132e7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e612536565b600080600061136c846112fd565b60408051808201909152601281527f5245434f5645525f444953414c4c4f57454400000000000000000000000000006020820152901515611409576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b5061141261099b565b925061141d8361253e565b60408051808201909152601a81527f5245434f5645525f5641554c545f4e4f545f434f4e545241435400000000000060208201529015156114ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b5073ffffffffffffffffffffffffffffffffffffffff84161515611525576040513031925073ffffffffffffffffffffffffffffffffffffffff84169083156108fc029084906000818181858888f1935050505015801561151f573d6000803e3d6000fd5b50611615565b508261154d73ffffffffffffffffffffffffffffffffffffffff82163063ffffffff61257116565b915061157673ffffffffffffffffffffffffffffffffffffffff8216848463ffffffff6126aa16565b60408051808201909152601d81527f5245434f5645525f544f4b454e5f5452414e534645525f4641494c45440000006020820152901515611613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b505b8373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b60008061168b610865565b151561169a5760009150611808565b6116a2611ae3565b905073ffffffffffffffffffffffffffffffffffffffff811615156116ca5760009150611808565b8073ffffffffffffffffffffffffffffffffffffffff1663fdef91068630876116f288612742565b6040517c010000000000000000000000000000000000000000000000000000000063ffffffff871602815273ffffffffffffffffffffffffffffffffffffffff808616600483019081529085166024830152604482018490526080606483019081528351608484015283519192909160a490910190602085019080838360005b8381101561178a578181015183820152602001611772565b50505050905090810190601f1680156117b75780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156117d957600080fd5b505af11580156117ed573d6000803e3d6000fd5b505050506040513d602081101561180357600080fd5b505191505b509392505050565b60008061181b611ae3565b604080517fbe00bbd80000000000000000000000000000000000000000000000000000000081527fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb60048201527fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd616024820152905173ffffffffffffffffffffffffffffffffffffffff929092169163be00bbd8916044808201926020929091908290030181600087803b15801561096957600080fd5b60015468010000000000000000900467ffffffffffffffff1681565b604080517f4352454154455f564f5445535f524f4c450000000000000000000000000000008152905190819003601101902081565b600061196c8360405180807f4352454154455f564f5445535f524f4c450000000000000000000000000000008152506011019050604051809103902061196761274c565b611680565b9392505050565b60035460408051808201909152600e81527f564f54494e475f4e4f5f564f544500000000000000000000000000000000000060208201526000918391908210611a18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b50611a228361275e565b91505b50919050565b60035460408051808201909152600e81527f564f54494e475f4e4f5f564f544500000000000000000000000000000000000060208201526000918491908210611ad0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b50611adb8484612877565b949350505050565b600061132e7f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b612536565b604080517f4352454154455f564f5445535f524f4c450000000000000000000000000000008152815190819003601101812060008083526020830190935290611b5d9033908390855b50611680565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515611bfa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b50611c6786868080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8c018190048102820181019092528a815294508a9350899250829150840183828082843782019150505050505060018061295e565b9695505050505050565b604080517f4352454154455f564f5445535f524f4c4500000000000000000000000000000081529051908190036011019020611cb190339061196761274c565b60408051808201909152601681527f564f54494e475f43414e5f4e4f545f464f5257415244000000000000000000006020820152901515611d4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b50611d6c81602060405190810160405280600081525060018061295e565b5050565b60015467ffffffffffffffff1681565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611dab611333565b14905090565b60035481565b60035460408051808201909152600e81527f564f54494e475f4e4f5f564f5445000000000000000000000000000000000000602082015284918210611e58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b50611e638433612877565b60408051808201909152601381527f564f54494e475f43414e5f4e4f545f564f5445000000000000000000000000006020820152901515611f00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b50611f0d84843385612cd7565b50505050565b611f1b611333565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a4544000000000000000060208201529015611fb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b50611fc0612f65565b60408051808201909152601081527f564f54494e475f494e49545f5043545300000000000000000000000000000000602082015267ffffffffffffffff808516908416111561206b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b5060408051808201909152601b81527f564f54494e475f494e49545f535550504f52545f544f4f5f42494700000000006020820152670de0b6b3a764000067ffffffffffffffff85161061211b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b50600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff95909516949094177fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000067ffffffffffffffff9485160217909355600180547fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016918316919091177fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff16680100000000000000009390921692909202179055565b604080517f4352454154455f564f5445535f524f4c45000000000000000000000000000000815281519081900360110181206000808352602083019093529061225b903390839085611b57565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156122f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b5061236488888080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8e018190048102820181019092528c815294508c93508b92508291508401838280828437820191505050505050868661295e565b98975050505050505050565b60035460408051808201909152600e81527f564f54494e475f4e4f5f564f5445000000000000000000000000000000000000602082015282918210612411576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b50611d6c82613044565b60005474010000000000000000000000000000000000000000900467ffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b670de0b6b3a764000081565b600190565b4390565b60015481546000916124aa91610100900467ffffffffffffffff908116916801000000000000000090041663ffffffff6130f716565b67ffffffffffffffff166124bc6131a9565b67ffffffffffffffff161080156124d55750815460ff16155b92915050565b60408051600280825260608083018452926020830190803883390190505090508281600081518110151561250b57fe5b60209081029091010152805182908290600190811061252657fe5b6020908102909101015292915050565b5490565b5490565b60008073ffffffffffffffffffffffffffffffffffffffff831615156125675760009150611a25565b50506000903b1190565b6040805173ffffffffffffffffffffffffffffffffffffffff83166024808301919091528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f70a082310000000000000000000000000000000000000000000000000000000017905260009081806125fe86846131bb565b60408051808201909152601c81527f534146455f4552435f32305f42414c414e43455f524556455254454400000000602082015291935091508215156126a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b5095945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905260009061273985826131ec565b95945050505050565b8051602002815290565b60408051600081526020810190915290565b60008181526002602052604081208054829060ff16156127815760009250612870565b6002820154600483015483546127b792919071010000000000000000000000000000000000900467ffffffffffffffff1661323a565b156127c55760019250612870565b6127ce82612474565b156127dc5760009250612870565b600382015460028301546127f59163ffffffff61327c16565b6002830154835491925061282991839071010000000000000000000000000000000000900467ffffffffffffffff1661323a565b15156128385760009250612870565b60028201546004830154600184015461285c92919067ffffffffffffffff1661323a565b151561286b5760009250612870565b600192505b5050919050565b600082815260026020526040812061288e81612474565b8015611adb5750600080548254604080517f2c994dc800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152690100000000000000000090930467ffffffffffffffff16602482015290519190921691632c994dc891604480830192602092919082900301818787803b15801561292957600080fd5b505af115801561293d573d6000803e3d6000fd5b505050506040513d602081101561295357600080fd5b505111949350505050565b600080600080600161296e613321565b60008054604080517f8fca0d410000000000000000000000000000000000000000000000000000000081529490930367ffffffffffffffff81166004860152925192965073ffffffffffffffffffffffffffffffffffffffff1692638fca0d419260248083019360209383900390910190829087803b1580156129f057600080fd5b505af1158015612a04573d6000803e3d6000fd5b505050506040513d6020811015612a1a57600080fd5b505160408051808201909152601681527f564f54494e475f4e4f5f564f54494e475f504f57455200000000000000000000602082015290925060008311612abd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b505060038054600181019091556000818152600260205260409020909350612ae36131a9565b81547fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000ff1661010067ffffffffffffffff92831602177fffffffffffffffffffffffffffffff0000000000000000ffffffffffffffffff16690100000000000000000085831602178083556000547fffffffffffffff0000000000000000ffffffffffffffffffffffffffffffffff9091167401000000000000000000000000000000000000000090910482167101000000000000000000000000000000000002178255600180549083018054919092167fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000909116179055600481018290558751612bf690600583019060208b0190613d61565b503373ffffffffffffffffffffffffffffffffffffffff16847f4d72fe0577a3a3f7da968d7b892779dde102519c25527b29cf7054f245c791b9896040518080602001828103825283818151815260200191508051906020019080838360005b83811015612c6e578181015183820152602001612c56565b50505050905090810190601f168015612c9b5780820380516001836020036101000a031916815260200191505b509250505060405180910390a3858015612cba5750612cba8433612877565b15612ccc57612ccc8460013388612cd7565b505050949350505050565b60008481526002602090815260408083208354815483517f2c994dc800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152690100000000000000000090920467ffffffffffffffff166024820152935192959485949190921692632c994dc89260448084019391929182900301818787803b158015612d7b57600080fd5b505af1158015612d8f573d6000803e3d6000fd5b505050506040513d6020811015612da557600080fd5b505173ffffffffffffffffffffffffffffffffffffffff8616600090815260068501602052604090205490925060ff1690506001816002811115612de557fe5b1415612e0a576002830154612e00908363ffffffff61332e16565b6002840155612e39565b6002816002811115612e1857fe5b1415612e39576003830154612e33908363ffffffff61332e16565b60038401555b8515612e5e576002830154612e54908363ffffffff61327c16565b6002840155612e79565b6003830154612e73908363ffffffff61327c16565b60038401555b85612e85576002612e88565b60015b73ffffffffffffffffffffffffffffffffffffffff86166000908152600685016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001836002811115612ee157fe5b021790555060408051871515815260208101849052815173ffffffffffffffffffffffffffffffffffffffff8816928a927fb34ee265e3d4f5ec4e8b52d59b2a9be8fceca2f274ebc080d8fba797fea9391f929081900390910190a3838015612f4e5750612f4e8761275e565b15612f5c57612f5c876133d9565b50505050505050565b612f6d611333565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a4544000000000000000060208201529015613009576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b50613042613015612470565b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e9063ffffffff61351116565b565b61304d8161275e565b60408051808201909152601681527f564f54494e475f43414e5f4e4f545f455845435554450000000000000000000060208201529015156130ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b506130f4816133d9565b50565b60408051808201909152601381527f4d41544836345f4144445f4f564552464c4f570000000000000000000000000060208201526000908383019067ffffffffffffffff8086169083161015611808576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b600061132e6131b6613515565b613519565b6000806000806040516020818751602089018a5afa925060008311156131e057805191505b50909590945092505050565b6000806040516020818551602087016000895af16000811115613230573d801561321d57602081146132265761322e565b6001935061322e565b600183511493505b505b5090949350505050565b60008083151561324d5760009150611808565b8361326686670de0b6b3a764000063ffffffff6135c916565b81151561326f57fe5b0492909211949350505050565b60408051808201909152601181527f4d4154485f4144445f4f564552464c4f5700000000000000000000000000000060208201526000908383019084821015611808576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b600061132e6131b6612470565b60408051808201909152601281527f4d4154485f5355425f554e444552464c4f57000000000000000000000000000060208201526000908190848411156133d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b505050900390565b600081815260026020818152604080842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081178255825195865260058201805491821615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190911694909404601f810184900484028601830183529285018381529094936134e09391929091908501828280156134c35780601f10613498576101008083540402835291602001916134c3565b820191906000526020600020905b8154815290600101906020018083116134a657829003601f168201915b5050604080516000815260208101909152869350915061368b9050565b5060405183907fbf8e2b108bb7c980e08903a8a46527699d5e84905a082d56dacb4150725c8cab90600090a2505050565b9055565b4290565b60408051808201909152601581527f55494e5436345f4e554d4245525f544f4f5f4249470000000000000000000000602082015260009067ffffffffffffffff8311156135c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b5090919050565b6000808315156135dc5760009150610b8a565b508282028284828115156135ec57fe5b60408051808201909152601181527f4d4154485f4d554c5f4f564552464c4f5700000000000000000000000000000060208201529291900414611808576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b606060008060608061369b610865565b60408051808201909152601481527f494e49545f4e4f545f494e495449414c495a45440000000000000000000000006020820152901515613738576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b50600080613744611ae3565b915061374e611303565b90506137598a61088f565b60408051808201909152601b81527f45564d52554e5f4558454355544f525f554e415641494c41424c450000000000602082015290965073ffffffffffffffffffffffffffffffffffffffff8716151561380f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b506040516060602482019081528b5160848301528b517f279cea3500000000000000000000000000000000000000000000000000000000975087928d928d928d9282916044820191606481019160a490910190602089019080838360005b8381101561388557818101518382015260200161386d565b50505050905090810190601f1680156138b25780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b838110156138e55781810151838201526020016138cd565b50505050905090810190601f1680156139125780820380516001836020036101000a031916815260200191505b508481038252855181528551602091820191808801910280838360005b8381101561394757818101518382015260200161392f565b505050509050019650505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509350600080855160208701895af46040519350808015613a4c57603f3d1180156139ea5760203d03806020883e8601604052613a46565b7f08c379a000000000000000000000000000000000000000000000000000000000865260206004870152601e60248701527f45564d52554e5f4558454355544f525f494e56414c49445f52455455524e00006044870152606486fd5b50613a55565b3d6000863e3d85fd5b50508573ffffffffffffffffffffffffffffffffffffffff167f5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad98b8b8660405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015613ad7578181015183820152602001613abf565b50505050905090810190601f168015613b045780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015613b37578181015183820152602001613b1f565b50505050905090810190601f168015613b645780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b83811015613b97578181015183820152602001613b7f565b50505050905090810190601f168015613bc45780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a28296508173ffffffffffffffffffffffffffffffffffffffff16613bf7611ae3565b73ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601f81526020017f45564d52554e5f50524f5445435445445f53544154455f4d4f44494649454400815250901515613cad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b5080613cb7611303565b60408051808201909152601f81527f45564d52554e5f50524f5445435445445f53544154455f4d4f4449464945440060208201529114613d53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b505050505050509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613da257805160ff1916838001178555613dcf565b82800160010185558215613dcf579182015b82811115613dcf578251825591602001919060010190613db4565b5061088b92610a379250905b8082111561088b5760008155600101613ddb5600a165627a7a72305820c67c78273515e4b6f6000a52f571558ac60777d96a1bd545481bc6afd8fba80c0029ebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e",
  "deployedBytecode": "0x6080604052600436106101ab5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630803fac081146101b05780632914b9bd146101d957806332f0a3b51461025b5780633c624c75146102705780634b12311c146102975780635a55c1f0146102ec5780635eb243321461041357806362de7e5a146104375780637c1d0b871461044c5780637e7db6e11461046e57806380afdea81461049c5780638b3dd749146104b15780639d4941d8146104c6578063a1658fad146104f4578063a479e50814610568578063bcf93dd61461057d578063be2c64d4146105af578063c0774df3146105c4578063cc63604a14610638578063cdb2867b14610650578063d4aae0c414610681578063d5db2c8014610696578063d948d468146106c2578063dc474b1a1461071b578063de4796ed14610730578063de4f634714610745578063df133bca1461075a578063df3d33051461077c578063f4b00513146107c3578063f98a4eca146107f9578063fad167ab14610811578063fc0c546a14610826578063fc157cb41461083b578063fd64eccb14610850575b600080fd5b3480156101bc57600080fd5b506101c5610865565b604080519115158252519081900360200190f35b3480156101e557600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261023294369492936024939284019190819084018382808284375094975061088f9650505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561026757600080fd5b5061023261099b565b34801561027c57600080fd5b50610285610a3a565b60408051918252519081900360200190f35b3480156102a357600080fd5b506102c860043573ffffffffffffffffffffffffffffffffffffffff60243516610a6f565b604051808260028111156102d857fe5b60ff16815260200191505060405180910390f35b3480156102f857600080fd5b50610304600435610b91565b604051808b1515151581526020018a1515151581526020018967ffffffffffffffff1667ffffffffffffffff1681526020018867ffffffffffffffff1667ffffffffffffffff1681526020018767ffffffffffffffff1667ffffffffffffffff1681526020018667ffffffffffffffff1667ffffffffffffffff16815260200185815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156103cf5781810151838201526020016103b7565b50505050905090810190601f1680156103fc5780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b34801561041f57600080fd5b5061043567ffffffffffffffff60043516610da7565b005b34801561044357600080fd5b50610285610fd3565b34801561045857600080fd5b5061043567ffffffffffffffff60043516611008565b34801561047a57600080fd5b506101c573ffffffffffffffffffffffffffffffffffffffff600435166112fd565b3480156104a857600080fd5b50610285611303565b3480156104bd57600080fd5b50610285611333565b3480156104d257600080fd5b5061043573ffffffffffffffffffffffffffffffffffffffff6004351661135e565b34801561050057600080fd5b5060408051602060046044358181013583810280860185019096528085526101c595833573ffffffffffffffffffffffffffffffffffffffff169560248035963696956064959394920192918291850190849080828437509497506116809650505050505050565b34801561057457600080fd5b50610232611810565b34801561058957600080fd5b506105926118d2565b6040805167ffffffffffffffff9092168252519081900360200190f35b3480156105bb57600080fd5b506102856118ee565b3480156105d057600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101c595833573ffffffffffffffffffffffffffffffffffffffff169536956044949193909101919081908401838280828437509497506119239650505050505050565b34801561064457600080fd5b506101c5600435611973565b34801561065c57600080fd5b506101c560043573ffffffffffffffffffffffffffffffffffffffff60243516611a2b565b34801561068d57600080fd5b50610232611ae3565b3480156106a257600080fd5b506102856024600480358281019290820135918135918201910135611b0e565b3480156106ce57600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610435943694929360249392840191908190840183828082843750949750611c719650505050505050565b34801561072757600080fd5b50610592611d70565b34801561073c57600080fd5b506101c5611d80565b34801561075157600080fd5b50610285611db1565b34801561076657600080fd5b5061043560043560243515156044351515611db7565b34801561078857600080fd5b5061043573ffffffffffffffffffffffffffffffffffffffff6004351667ffffffffffffffff60243581169060443581169060643516611f13565b3480156107cf57600080fd5b5061028560246004803582810192908201359181359182019101356044351515606435151561220e565b34801561080557600080fd5b50610435600435612370565b34801561081d57600080fd5b5061059261241b565b34801561083257600080fd5b50610232612443565b34801561084757600080fd5b5061059261245f565b34801561085c57600080fd5b506101c561246b565b600080610870611333565b90508015801590610888575080610885612470565b10155b91505b5090565b6000610899611810565b73ffffffffffffffffffffffffffffffffffffffff166304bf2a7f836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561091d578181015183820152602001610905565b50505050905090810190601f16801561094a5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561096957600080fd5b505af115801561097d573d6000803e3d6000fd5b505050506040513d602081101561099357600080fd5b505192915050565b60006109a5611ae3565b73ffffffffffffffffffffffffffffffffffffffff166332f0a3b56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610a0857600080fd5b505af1158015610a1c573d6000803e3d6000fd5b505050506040513d6020811015610a3257600080fd5b505190505b90565b604080517f4d4f444946595f51554f52554d5f524f4c4500000000000000000000000000008152905190819003601201902081565b60035460408051808201909152600e81527f564f54494e475f4e4f5f564f544500000000000000000000000000000000000060208201526000918491908210610b50576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b15578181015183820152602001610afd565b50505050905090810190601f168015610b425780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600084815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845260060190915290205460ff1691505b5092915050565b6000806000806000806000806000606060008b60035481106040805190810160405280600e81526020017f564f54494e475f4e4f5f564f5445000000000000000000000000000000000000815250901515610c48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b5060008d81526002602052604090209150610c6282612474565b9b508160000160009054906101000a900460ff169a508160000160019054906101000a900467ffffffffffffffff1699508160000160099054906101000a900467ffffffffffffffff1698508160000160119054906101000a900467ffffffffffffffff1697508160010160009054906101000a900467ffffffffffffffff169650816002015495508160030154945081600401549350816005018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d915780601f10610d6657610100808354040283529160200191610d91565b820191906000526020600020905b815481529060010190602001808311610d7457829003601f168201915b5050505050925050509193959799509193959799565b604080517f4d4f444946595f51554f52554d5f524f4c45000000000000000000000000000081529051908190036012019020600154610df39067ffffffffffffffff80851691166124db565b610dfe338383611680565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515610e9b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b5060005460408051808201909152601981527f564f54494e475f4348414e47455f51554f52554d5f504354530000000000000060208201529067ffffffffffffffff7401000000000000000000000000000000000000000090910481169085161115610f63576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b506001805467ffffffffffffffff85167fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000909116811790915560408051918252517f3172f2e9273c729c2a47cc8bf7e7f18506e3e3035126d562602bd2155bc78a509181900360200190a1505050565b604080517f4d4f444946595f535550504f52545f524f4c45000000000000000000000000008152905190819003601301902081565b604080517f4d4f444946595f535550504f52545f524f4c45000000000000000000000000008152905190819003601301902060005461106c9067ffffffffffffffff80851691740100000000000000000000000000000000000000009004166124db565b611077338383611680565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515611114576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b5060015460408051808201909152601a81527f564f54494e475f4348414e47455f535550504f52545f5043545300000000000060208201529067ffffffffffffffff808616911611156111c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b5060408051808201909152601a81527f564f54494e475f4348414e47455f535550505f544f4f5f4249470000000000006020820152670de0b6b3a764000067ffffffffffffffff851610611273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b506000805467ffffffffffffffff85167401000000000000000000000000000000000000000081027fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff9092169190911790915560408051918252517f903b617f7f36eb047a29b89d1bf7885fdae31d250c3320fccf11d045c11b396e9181900360200190a1505050565b50600190565b600061132e7fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b612536565b905090565b600061132e7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e612536565b600080600061136c846112fd565b60408051808201909152601281527f5245434f5645525f444953414c4c4f57454400000000000000000000000000006020820152901515611409576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b5061141261099b565b925061141d8361253e565b60408051808201909152601a81527f5245434f5645525f5641554c545f4e4f545f434f4e545241435400000000000060208201529015156114ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b5073ffffffffffffffffffffffffffffffffffffffff84161515611525576040513031925073ffffffffffffffffffffffffffffffffffffffff84169083156108fc029084906000818181858888f1935050505015801561151f573d6000803e3d6000fd5b50611615565b508261154d73ffffffffffffffffffffffffffffffffffffffff82163063ffffffff61257116565b915061157673ffffffffffffffffffffffffffffffffffffffff8216848463ffffffff6126aa16565b60408051808201909152601d81527f5245434f5645525f544f4b454e5f5452414e534645525f4641494c45440000006020820152901515611613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b505b8373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b60008061168b610865565b151561169a5760009150611808565b6116a2611ae3565b905073ffffffffffffffffffffffffffffffffffffffff811615156116ca5760009150611808565b8073ffffffffffffffffffffffffffffffffffffffff1663fdef91068630876116f288612742565b6040517c010000000000000000000000000000000000000000000000000000000063ffffffff871602815273ffffffffffffffffffffffffffffffffffffffff808616600483019081529085166024830152604482018490526080606483019081528351608484015283519192909160a490910190602085019080838360005b8381101561178a578181015183820152602001611772565b50505050905090810190601f1680156117b75780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156117d957600080fd5b505af11580156117ed573d6000803e3d6000fd5b505050506040513d602081101561180357600080fd5b505191505b509392505050565b60008061181b611ae3565b604080517fbe00bbd80000000000000000000000000000000000000000000000000000000081527fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb60048201527fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd616024820152905173ffffffffffffffffffffffffffffffffffffffff929092169163be00bbd8916044808201926020929091908290030181600087803b15801561096957600080fd5b60015468010000000000000000900467ffffffffffffffff1681565b604080517f4352454154455f564f5445535f524f4c450000000000000000000000000000008152905190819003601101902081565b600061196c8360405180807f4352454154455f564f5445535f524f4c450000000000000000000000000000008152506011019050604051809103902061196761274c565b611680565b9392505050565b60035460408051808201909152600e81527f564f54494e475f4e4f5f564f544500000000000000000000000000000000000060208201526000918391908210611a18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b50611a228361275e565b91505b50919050565b60035460408051808201909152600e81527f564f54494e475f4e4f5f564f544500000000000000000000000000000000000060208201526000918491908210611ad0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b50611adb8484612877565b949350505050565b600061132e7f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b612536565b604080517f4352454154455f564f5445535f524f4c450000000000000000000000000000008152815190819003601101812060008083526020830190935290611b5d9033908390855b50611680565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515611bfa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b50611c6786868080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8c018190048102820181019092528a815294508a9350899250829150840183828082843782019150505050505060018061295e565b9695505050505050565b604080517f4352454154455f564f5445535f524f4c4500000000000000000000000000000081529051908190036011019020611cb190339061196761274c565b60408051808201909152601681527f564f54494e475f43414e5f4e4f545f464f5257415244000000000000000000006020820152901515611d4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b50611d6c81602060405190810160405280600081525060018061295e565b5050565b60015467ffffffffffffffff1681565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611dab611333565b14905090565b60035481565b60035460408051808201909152600e81527f564f54494e475f4e4f5f564f5445000000000000000000000000000000000000602082015284918210611e58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b50611e638433612877565b60408051808201909152601381527f564f54494e475f43414e5f4e4f545f564f5445000000000000000000000000006020820152901515611f00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b50611f0d84843385612cd7565b50505050565b611f1b611333565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a4544000000000000000060208201529015611fb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b50611fc0612f65565b60408051808201909152601081527f564f54494e475f494e49545f5043545300000000000000000000000000000000602082015267ffffffffffffffff808516908416111561206b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b5060408051808201909152601b81527f564f54494e475f494e49545f535550504f52545f544f4f5f42494700000000006020820152670de0b6b3a764000067ffffffffffffffff85161061211b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b50600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff95909516949094177fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000067ffffffffffffffff9485160217909355600180547fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016918316919091177fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff16680100000000000000009390921692909202179055565b604080517f4352454154455f564f5445535f524f4c45000000000000000000000000000000815281519081900360110181206000808352602083019093529061225b903390839085611b57565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156122f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b5061236488888080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8e018190048102820181019092528c815294508c93508b92508291508401838280828437820191505050505050868661295e565b98975050505050505050565b60035460408051808201909152600e81527f564f54494e475f4e4f5f564f5445000000000000000000000000000000000000602082015282918210612411576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b50611d6c82613044565b60005474010000000000000000000000000000000000000000900467ffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b670de0b6b3a764000081565b600190565b4390565b60015481546000916124aa91610100900467ffffffffffffffff908116916801000000000000000090041663ffffffff6130f716565b67ffffffffffffffff166124bc6131a9565b67ffffffffffffffff161080156124d55750815460ff16155b92915050565b60408051600280825260608083018452926020830190803883390190505090508281600081518110151561250b57fe5b60209081029091010152805182908290600190811061252657fe5b6020908102909101015292915050565b5490565b5490565b60008073ffffffffffffffffffffffffffffffffffffffff831615156125675760009150611a25565b50506000903b1190565b6040805173ffffffffffffffffffffffffffffffffffffffff83166024808301919091528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f70a082310000000000000000000000000000000000000000000000000000000017905260009081806125fe86846131bb565b60408051808201909152601c81527f534146455f4552435f32305f42414c414e43455f524556455254454400000000602082015291935091508215156126a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b5095945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905260009061273985826131ec565b95945050505050565b8051602002815290565b60408051600081526020810190915290565b60008181526002602052604081208054829060ff16156127815760009250612870565b6002820154600483015483546127b792919071010000000000000000000000000000000000900467ffffffffffffffff1661323a565b156127c55760019250612870565b6127ce82612474565b156127dc5760009250612870565b600382015460028301546127f59163ffffffff61327c16565b6002830154835491925061282991839071010000000000000000000000000000000000900467ffffffffffffffff1661323a565b15156128385760009250612870565b60028201546004830154600184015461285c92919067ffffffffffffffff1661323a565b151561286b5760009250612870565b600192505b5050919050565b600082815260026020526040812061288e81612474565b8015611adb5750600080548254604080517f2c994dc800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152690100000000000000000090930467ffffffffffffffff16602482015290519190921691632c994dc891604480830192602092919082900301818787803b15801561292957600080fd5b505af115801561293d573d6000803e3d6000fd5b505050506040513d602081101561295357600080fd5b505111949350505050565b600080600080600161296e613321565b60008054604080517f8fca0d410000000000000000000000000000000000000000000000000000000081529490930367ffffffffffffffff81166004860152925192965073ffffffffffffffffffffffffffffffffffffffff1692638fca0d419260248083019360209383900390910190829087803b1580156129f057600080fd5b505af1158015612a04573d6000803e3d6000fd5b505050506040513d6020811015612a1a57600080fd5b505160408051808201909152601681527f564f54494e475f4e4f5f564f54494e475f504f57455200000000000000000000602082015290925060008311612abd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b505060038054600181019091556000818152600260205260409020909350612ae36131a9565b81547fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000ff1661010067ffffffffffffffff92831602177fffffffffffffffffffffffffffffff0000000000000000ffffffffffffffffff16690100000000000000000085831602178083556000547fffffffffffffff0000000000000000ffffffffffffffffffffffffffffffffff9091167401000000000000000000000000000000000000000090910482167101000000000000000000000000000000000002178255600180549083018054919092167fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000909116179055600481018290558751612bf690600583019060208b0190613d61565b503373ffffffffffffffffffffffffffffffffffffffff16847f4d72fe0577a3a3f7da968d7b892779dde102519c25527b29cf7054f245c791b9896040518080602001828103825283818151815260200191508051906020019080838360005b83811015612c6e578181015183820152602001612c56565b50505050905090810190601f168015612c9b5780820380516001836020036101000a031916815260200191505b509250505060405180910390a3858015612cba5750612cba8433612877565b15612ccc57612ccc8460013388612cd7565b505050949350505050565b60008481526002602090815260408083208354815483517f2c994dc800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152690100000000000000000090920467ffffffffffffffff166024820152935192959485949190921692632c994dc89260448084019391929182900301818787803b158015612d7b57600080fd5b505af1158015612d8f573d6000803e3d6000fd5b505050506040513d6020811015612da557600080fd5b505173ffffffffffffffffffffffffffffffffffffffff8616600090815260068501602052604090205490925060ff1690506001816002811115612de557fe5b1415612e0a576002830154612e00908363ffffffff61332e16565b6002840155612e39565b6002816002811115612e1857fe5b1415612e39576003830154612e33908363ffffffff61332e16565b60038401555b8515612e5e576002830154612e54908363ffffffff61327c16565b6002840155612e79565b6003830154612e73908363ffffffff61327c16565b60038401555b85612e85576002612e88565b60015b73ffffffffffffffffffffffffffffffffffffffff86166000908152600685016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001836002811115612ee157fe5b021790555060408051871515815260208101849052815173ffffffffffffffffffffffffffffffffffffffff8816928a927fb34ee265e3d4f5ec4e8b52d59b2a9be8fceca2f274ebc080d8fba797fea9391f929081900390910190a3838015612f4e5750612f4e8761275e565b15612f5c57612f5c876133d9565b50505050505050565b612f6d611333565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a4544000000000000000060208201529015613009576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b50613042613015612470565b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e9063ffffffff61351116565b565b61304d8161275e565b60408051808201909152601681527f564f54494e475f43414e5f4e4f545f455845435554450000000000000000000060208201529015156130ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b506130f4816133d9565b50565b60408051808201909152601381527f4d41544836345f4144445f4f564552464c4f570000000000000000000000000060208201526000908383019067ffffffffffffffff8086169083161015611808576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b600061132e6131b6613515565b613519565b6000806000806040516020818751602089018a5afa925060008311156131e057805191505b50909590945092505050565b6000806040516020818551602087016000895af16000811115613230573d801561321d57602081146132265761322e565b6001935061322e565b600183511493505b505b5090949350505050565b60008083151561324d5760009150611808565b8361326686670de0b6b3a764000063ffffffff6135c916565b81151561326f57fe5b0492909211949350505050565b60408051808201909152601181527f4d4154485f4144445f4f564552464c4f5700000000000000000000000000000060208201526000908383019084821015611808576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b600061132e6131b6612470565b60408051808201909152601281527f4d4154485f5355425f554e444552464c4f57000000000000000000000000000060208201526000908190848411156133d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b505050900390565b600081815260026020818152604080842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081178255825195865260058201805491821615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190911694909404601f810184900484028601830183529285018381529094936134e09391929091908501828280156134c35780601f10613498576101008083540402835291602001916134c3565b820191906000526020600020905b8154815290600101906020018083116134a657829003601f168201915b5050604080516000815260208101909152869350915061368b9050565b5060405183907fbf8e2b108bb7c980e08903a8a46527699d5e84905a082d56dacb4150725c8cab90600090a2505050565b9055565b4290565b60408051808201909152601581527f55494e5436345f4e554d4245525f544f4f5f4249470000000000000000000000602082015260009067ffffffffffffffff8311156135c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b5090919050565b6000808315156135dc5760009150610b8a565b508282028284828115156135ec57fe5b60408051808201909152601181527f4d4154485f4d554c5f4f564552464c4f5700000000000000000000000000000060208201529291900414611808576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b606060008060608061369b610865565b60408051808201909152601481527f494e49545f4e4f545f494e495449414c495a45440000000000000000000000006020820152901515613738576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b50600080613744611ae3565b915061374e611303565b90506137598a61088f565b60408051808201909152601b81527f45564d52554e5f4558454355544f525f554e415641494c41424c450000000000602082015290965073ffffffffffffffffffffffffffffffffffffffff8716151561380f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b506040516060602482019081528b5160848301528b517f279cea3500000000000000000000000000000000000000000000000000000000975087928d928d928d9282916044820191606481019160a490910190602089019080838360005b8381101561388557818101518382015260200161386d565b50505050905090810190601f1680156138b25780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b838110156138e55781810151838201526020016138cd565b50505050905090810190601f1680156139125780820380516001836020036101000a031916815260200191505b508481038252855181528551602091820191808801910280838360005b8381101561394757818101518382015260200161392f565b505050509050019650505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509350600080855160208701895af46040519350808015613a4c57603f3d1180156139ea5760203d03806020883e8601604052613a46565b7f08c379a000000000000000000000000000000000000000000000000000000000865260206004870152601e60248701527f45564d52554e5f4558454355544f525f494e56414c49445f52455455524e00006044870152606486fd5b50613a55565b3d6000863e3d85fd5b50508573ffffffffffffffffffffffffffffffffffffffff167f5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad98b8b8660405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015613ad7578181015183820152602001613abf565b50505050905090810190601f168015613b045780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015613b37578181015183820152602001613b1f565b50505050905090810190601f168015613b645780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b83811015613b97578181015183820152602001613b7f565b50505050905090810190601f168015613bc45780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a28296508173ffffffffffffffffffffffffffffffffffffffff16613bf7611ae3565b73ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601f81526020017f45564d52554e5f50524f5445435445445f53544154455f4d4f44494649454400815250901515613cad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b5080613cb7611303565b60408051808201909152601f81527f45564d52554e5f50524f5445435445445f53544154455f4d4f4449464945440060208201529114613d53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b15578181015183820152602001610afd565b505050505050509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613da257805160ff1916838001178555613dcf565b82800160010185558215613dcf579182015b82811115613dcf578251825591602001919060010190613db4565b5061088b92610a379250905b8082111561088b5760008155600101613ddb5600a165627a7a72305820c67c78273515e4b6f6000a52f571558ac60777d96a1bd545481bc6afd8fba80c0029",
  "devdoc": {
    "methods": {
      "allowRecoverability(address)": {
        "details": "By default deriving from AragonApp makes it recoverable",
        "params": {
          "token": "Token address that would be recovered"
        },
        "return": "bool whether the app allows the recovery"
      },
      "canExecute(uint256)": {
        "details": "Initialization check is implicitly provided by `voteExists()` as new votes can only be     created via `newVote(),` which requires initialization",
        "return": "True if the given vote can be executed, false otherwise"
      },
      "canForward(address,bytes)": {
        "details": "IForwarder interface conformance",
        "params": {
          "_sender": "Address of the account intending to forward an action"
        },
        "return": "True if the given address can create votes, false otherwise"
      },
      "canPerform(address,bytes32,uint256[])": {
        "details": "Check whether an action can be performed by a sender for a particular role on this app",
        "params": {
          "_params": "Permission params for the role",
          "_role": "Role on this app",
          "_sender": "Sender of the call"
        },
        "return": "Boolean indicating whether the sender has the permissions to perform the action.        Always returns false if the app hasn't been initialized yet."
      },
      "canVote(uint256,address)": {
        "details": "Initialization check is implicitly provided by `voteExists()` as new votes can only be     created via `newVote(),` which requires initialization",
        "return": "True if the given voter can participate a certain vote, false otherwise"
      },
      "changeMinAcceptQuorumPct(uint64)": {
        "params": {
          "_minAcceptQuorumPct": "New acceptance quorum"
        }
      },
      "changeSupportRequiredPct(uint64)": {
        "params": {
          "_supportRequiredPct": "New required support"
        }
      },
      "executeVote(uint256)": {
        "details": "Initialization check is implicitly provided by `voteExists()` as new votes can only be     created via `newVote(),` which requires initialization",
        "params": {
          "_voteId": "Id for vote"
        }
      },
      "forward(bytes)": {
        "details": "IForwarder interface conformance",
        "params": {
          "_evmScript": "Start vote with script"
        }
      },
      "getInitializationBlock()": {
        "return": "Block number in which the contract was initialized"
      },
      "getRecoveryVault()": {
        "details": "Get the recovery vault for the app",
        "return": "Recovery vault address for the app"
      },
      "getVote(uint256)": {
        "details": "Return all information for a vote by its ID",
        "params": {
          "_voteId": "Vote identifier"
        },
        "return": "Vote open statusVote executed statusVote start dateVote snapshot blockVote support requiredVote minimum acceptance quorumVote yeas amountVote nays amountVote powerVote script"
      },
      "getVoterState(uint256,address)": {
        "details": "Return the state of a voter for a given vote by its ID",
        "params": {
          "_voteId": "Vote identifier"
        },
        "return": "VoterState of the requested voter for a certain vote"
      },
      "hasInitialized()": {
        "return": "Whether the contract has been initialized by the time of the current block"
      },
      "initialize(address,uint64,uint64,uint64)": {
        "params": {
          "_minAcceptQuorumPct": "Percentage of yeas in total possible votes for a vote to succeed (expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%)",
          "_supportRequiredPct": "Percentage of yeas in casted votes for a vote to succeed (expressed as a percentage of 10^18; eg. 10^16 = 1%, 10^18 = 100%)",
          "_token": "IVotingToken Address that will be used as governance token",
          "_voteTime": "Seconds that a vote will be open for token holders to vote (unless enough yeas or nays have been cast to make an early decision)"
        }
      },
      "isForwarder()": {
        "details": "IForwarder interface conformance",
        "return": "Always true"
      },
      "newVote(bytes,string)": {
        "params": {
          "_executionScript": "EVM script to be executed on approval",
          "_metadata": "Vote metadata"
        },
        "return": "voteId Id for newly created vote"
      },
      "newVote(bytes,string,bool,bool)": {
        "params": {
          "_castVote": "Whether to also cast newly created vote",
          "_executesIfDecided": "Whether to also immediately execute newly created vote if decided",
          "_executionScript": "EVM script to be executed on approval",
          "_metadata": "Vote metadata"
        },
        "return": "voteId id for newly created vote"
      },
      "transferToVault(address)": {
        "params": {
          "_token": "Token balance to be sent to recovery vault."
        }
      },
      "vote(uint256,bool,bool)": {
        "details": "Initialization check is implicitly provided by `voteExists()` as new votes can only be     created via `newVote(),` which requires initialization",
        "params": {
          "_executesIfDecided": "Whether the vote should execute its action if it becomes decided",
          "_supports": "Whether voter supports the vote",
          "_voteId": "Id for vote"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "canExecute(uint256)": {
        "notice": "Tells whether a vote #`_voteId` can be executed or not"
      },
      "canForward(address,bytes)": {
        "notice": "Tells whether `_sender` can forward actions or not"
      },
      "canVote(uint256,address)": {
        "notice": "Tells whether `_sender` can participate in the vote #`_voteId` or not"
      },
      "changeMinAcceptQuorumPct(uint64)": {
        "notice": "Change minimum acceptance quorum to `@formatPct(_minAcceptQuorumPct)`%"
      },
      "changeSupportRequiredPct(uint64)": {
        "notice": "Change required support to `@formatPct(_supportRequiredPct)`%"
      },
      "executeVote(uint256)": {
        "notice": "Execute vote #`_voteId`"
      },
      "forward(bytes)": {
        "notice": "Creates a vote to execute the desired action, and casts a support vote if possible"
      },
      "initialize(address,uint64,uint64,uint64)": {
        "notice": "Initialize Voting app with `_token.symbol(): string` for governance, minimum support of `@formatPct(_supportRequiredPct)`%, minimum acceptance quorum of `@formatPct(_minAcceptQuorumPct)`%, and a voting duration of `@transformTime(_voteTime)`"
      },
      "isForwarder()": {
        "notice": "Tells whether the Voting app is a forwarder or not"
      },
      "newVote(bytes,string)": {
        "notice": "Create a new vote about \"`_metadata`\""
      },
      "newVote(bytes,string,bool,bool)": {
        "notice": "Create a new vote about \"`_metadata`\""
      },
      "transferToVault(address)": {
        "notice": "Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them."
      },
      "vote(uint256,bool,bool)": {
        "notice": "Vote `_supports ? 'yes' : 'no'` in vote #`_voteId`"
      }
    }
  }
}